// Cleanup script to remove test user ben.howard@stoke.nhs.uk
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
const SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTAxNzI3NiwiZXhwIjoyMDcwNTkzMjc2fQ.CJxV14F0T2TWkAjeR4bpYiBIOwLwyfzF9WzAWwS99Xc';

async function cleanupTestUser() {
  console.log('=== CLEANING UP TEST USER ben.howard@stoke.nhs.uk ===\n');

  const supabase = createClient(SUPABASE_URL, SERVICE_KEY);
  const testEmail = 'ben.howard@stoke.nhs.uk';

  try {
    // Step 1: Get the user from auth
    console.log('Step 1: Finding user in auth system...');
    const { data: { users }, error: listError } = await supabase.auth.admin.listUsers();

    if (listError) {
      console.error('Error listing users:', listError);
      return;
    }

    const testUser = users?.find(u => u.email === testEmail);

    if (testUser) {
      console.log(`Found user: ${testUser.id}`);

      // Step 2: Delete from related tables first (due to foreign keys)
      console.log('\nStep 2: Cleaning up related data...');

      // Delete from site_invitations
      const { error: inviteError } = await supabase
        .from('site_invitations')
        .delete()
        .eq('email', testEmail);

      if (inviteError) {
        console.log('Site invitations cleanup:', inviteError.message);
      } else {
        console.log('✓ Cleaned up site_invitations');
      }

      // Delete from staff_app_welcome
      const { error: welcomeError } = await supabase
        .from('master_users')
        .delete()
        .eq('auth_user_id', testUser.id);

      if (welcomeError) {
        console.log('Staff app welcome cleanup:', welcomeError.message);
      } else {
        console.log('✓ Cleaned up staff_app_welcome');
      }

      // Delete from working_patterns
      const { error: patternError } = await supabase
        .from('master_users')
        .delete()
        .eq('auth_user_id', testUser.id);

      if (patternError) {
        console.log('Working patterns cleanup:', patternError.message);
      } else {
        console.log('✓ Cleaned up working_patterns');
      }

      // Delete from staff_holiday_profiles (using full_name)
      const { error: holidayError } = await supabase
        .from('master_users')
        .delete()
        .eq('full_name', 'Benjamin Howard');

      if (holidayError) {
        console.log('Holiday profiles cleanup:', holidayError.message);
      } else {
        console.log('✓ Cleaned up staff_holiday_profiles');
      }

      // Delete from profiles
      const { error: profileError } = await supabase
        .from('master_users')
        .delete()
        .eq('auth_user_id', testUser.id);

      if (profileError) {
        console.log('Profiles cleanup:', profileError.message);
      } else {
        console.log('✓ Cleaned up profiles');
      }

      // Step 3: Delete the user from auth
      console.log('\nStep 3: Removing user from auth system...');
      const { error: deleteError } = await supabase.auth.admin.deleteUser(testUser.id);

      if (deleteError) {
        console.error('Error deleting user:', deleteError);
      } else {
        console.log('✅ Successfully removed user from auth system');
      }
    } else {
      console.log('User not found in auth system');

      // Still try to clean up site_invitations by email
      const { error } = await supabase
        .from('site_invitations')
        .delete()
        .eq('email', testEmail);

      if (!error) {
        console.log('✓ Cleaned up any remaining site_invitations');
      }
    }

    // Clean up duplicate holiday profiles
    console.log('\nStep 4: Cleaning up duplicate holiday profiles...');
    const { data: duplicates } = await supabase
      .from('master_users')
      .select('*')
      .eq('full_name', 'Benjamin Howard');

    if (duplicates && duplicates.length > 1) {
      // Keep the first one, delete the rest
      for (let i = 1; i < duplicates.length; i++) {
        await supabase
          .from('master_users')
          .delete()
          .eq('id', duplicates[i].id);
      }
      console.log(`✓ Removed ${duplicates.length - 1} duplicate holiday profiles`);
    }

    console.log('\n✅ Cleanup completed successfully!');

  } catch (error) {
    console.error('Unexpected error:', error);
  }
}

cleanupTestUser();