import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://unveoqnlqnobufhublyw.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixRequiredQuizSubmission() {
  console.log('üîß Fixing required quiz submission for benhowardmagic@hotmail.com...');
  
  try {
    // Login as admin first
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'benhowardmagic@hotmail.com',
      password: 'Hello1!'
    });

    if (authError) {
      console.error('‚ùå Auth error:', authError);
      return;
    }

    console.log('‚úÖ Successfully logged in as admin');
    
    // Get user ID
    const userId = authData.user.id;
    console.log(`üîë User ID: ${userId}`);
    
    // Set completed date to now and next quiz due to 7 days from now
    const completedAt = new Date();
    const nextDue = new Date(completedAt);
    nextDue.setDate(nextDue.getDate() + 7);
    
    // Create SQL update statement
    const updateSql = `
      UPDATE master_users 
      SET next_quiz_due = '${nextDue.toISOString()}', 
          last_required_quiz_at = '${completedAt.toISOString()}'
      WHERE auth_user_id = '${userId}'
    `;
    
    console.log('üîß Executing SQL update...');
    console.log(updateSql);
    
    // Execute the SQL update
    const { data: updateData, error: updateError } = await supabase.rpc('exec_sql', { 
      sql: updateSql 
    });
    
    if (updateError) {
      console.error('‚ùå Error executing SQL update:', updateError);
      
      // Try alternative approach - fetch, modify, update
      console.log('üîÑ Trying alternative approach...');
      
      // Get current record
      const { data: masterUser, error: fetchError } = await supabase
        .from('master_users')
        .select('*')
        .eq('auth_user_id', userId)
        .maybeSingle();
      
      if (fetchError || !masterUser) {
        console.error('‚ùå Could not fetch master_users record:', fetchError);
        return;
      }
      
      // Update only the necessary fields
      const updatePayload = {
        ...masterUser,
        next_quiz_due: nextDue.toISOString(),
        last_required_quiz_at: completedAt.toISOString()
      };
      
      // Perform the update
      const { error: upsertError } = await supabase
        .from('master_users')
        .upsert(updatePayload);
      
      if (upsertError) {
        console.error('‚ùå Upsert also failed:', upsertError);
        return;
      }
      
      console.log('‚úÖ Alternative update successful!');
    } else {
      console.log('‚úÖ SQL update successful!');
    }
    
    // Verify the update
    const { data: verifyData, error: verifyError } = await supabase
      .from('master_users')
      .select('next_quiz_due, last_required_quiz_at')
      .eq('auth_user_id', userId)
      .maybeSingle();
    
    if (verifyError) {
      console.error('‚ùå Error verifying update:', verifyError);
      return;
    }
    
    console.log('üìä Updated user data:');
    console.log(`Next quiz due: ${verifyData.next_quiz_due}`);
    console.log(`Last required quiz: ${verifyData.last_required_quiz_at}`);
    
    console.log('üéâ Quiz completion recorded successfully!');
    
  } catch (error) {
    console.error('üí• Unexpected error:', error);
  }
}

fixRequiredQuizSubmission();