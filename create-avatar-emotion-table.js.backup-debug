import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://unveoqnlqnobufhublyw.supabase.co';
const supabaseServiceKey = 'sb_secret_ylIhDtikpno4LTTUmpDJvw_Ov7BtIEp';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createAvatarEmotionChangesTable() {
  console.log('Creating avatar_emotion_changes table...\n');

  try {
    // Create the table using raw SQL
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS public.avatar_emotion_changes (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID NOT NULL,
          site_id TEXT NOT NULL,
          mood TEXT NOT NULL,
          mood_name TEXT,
          avatar_url TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
        );

        CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_user_id ON public.avatar_emotion_changes(user_id);
        CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_site_id ON public.avatar_emotion_changes(site_id);
        CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_created_at ON public.avatar_emotion_changes(created_at DESC);

        -- Enable RLS
        ALTER TABLE public.avatar_emotion_changes ENABLE ROW LEVEL SECURITY;

        -- Create policies for access
        CREATE POLICY "Users can view avatar changes in their site" ON public.avatar_emotion_changes
          FOR SELECT
          USING (
            site_id IN (
              SELECT site_id FROM public.master_users
              WHERE auth_user_id = auth.uid()
            )
          );

        CREATE POLICY "Users can insert their own avatar changes" ON public.avatar_emotion_changes
          FOR INSERT
          WITH CHECK (user_id = auth.uid());
      `
    });

    if (error) {
      // If the exec_sql function doesn't exist, try direct query
      console.log('exec_sql RPC not available, trying alternative approach...');

      // We'll need to handle this differently - create a migration file instead
      console.log('\nPlease run this SQL in your Supabase SQL editor:\n');
      console.log(`
CREATE TABLE IF NOT EXISTS public.avatar_emotion_changes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  site_id TEXT NOT NULL,
  mood TEXT NOT NULL,
  mood_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_user_id ON public.avatar_emotion_changes(user_id);
CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_site_id ON public.avatar_emotion_changes(site_id);
CREATE INDEX IF NOT EXISTS idx_avatar_emotion_changes_created_at ON public.avatar_emotion_changes(created_at DESC);

-- Enable RLS
ALTER TABLE public.avatar_emotion_changes ENABLE ROW LEVEL SECURITY;

-- Create policies for access
CREATE POLICY "Users can view avatar changes in their site" ON public.avatar_emotion_changes
  FOR SELECT
  USING (
    site_id IN (
      SELECT site_id FROM public.master_users
      WHERE auth_user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert their own avatar changes" ON public.avatar_emotion_changes
  FOR INSERT
  WITH CHECK (user_id = auth.uid());
      `);
    } else {
      console.log('Table created successfully!');
    }

    // Test if the table exists
    const { data: testData, error: testError } = await supabase
      .from('avatar_emotion_changes')
      .select('*')
      .limit(1);

    if (testError && testError.code === '42P01') {
      console.log('\nTable does not exist yet. Please run the SQL above in your Supabase dashboard.');
    } else if (!testError) {
      console.log('Table verified - avatar_emotion_changes exists and is accessible.');
    }

  } catch (err) {
    console.error('Error:', err);
  }
}

createAvatarEmotionChangesTable();