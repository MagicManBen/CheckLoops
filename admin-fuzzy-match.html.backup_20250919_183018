<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CheckLoop â€” Fuzzy Match Holidays</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://img.icons8.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <script src="config.js"></script>
  <link rel="stylesheet" href="admin.css">
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <style>
    .fuzzy-match-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .upload-zone {
      border: 2px dashed #667eea;
      border-radius: 12px;
      padding: 40px;
      text-align: center;
      background: rgba(102, 126, 234, 0.05);
      transition: all 0.3s ease;
      cursor: pointer;
      margin-bottom: 30px;
    }

    .upload-zone:hover {
      background: rgba(102, 126, 234, 0.1);
      border-color: #5a67d8;
    }

    .upload-zone.dragover {
      background: rgba(102, 126, 234, 0.15);
      transform: scale(1.02);
    }

    .template-download {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 600;
      margin-bottom: 30px;
      transition: all 0.3s ease;
    }

    .template-download:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }

    .data-preview {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      overflow-x: auto;
      margin-bottom: 30px;
    }

    .preview-table {
      width: 100%;
      border-collapse: collapse;
    }

    .preview-table th {
      background: #f7f9fc;
      padding: 12px;
      text-align: left;
      font-weight: 600;
      color: #4a5568;
      border-bottom: 2px solid #e2e8f0;
    }

    .preview-table td {
      padding: 12px;
      border-bottom: 1px solid #e2e8f0;
      color: #2d3748;
    }

    .preview-table tr:hover {
      background: #f7f9fc;
    }

    .match-status {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
    }

    .match-status.pending {
      background: #fef5e7;
      color: #f39c12;
    }

    .match-status.matched {
      background: #e8f5e9;
      color: #27ae60;
    }

    .match-status.transferred {
      background: #e3f2fd;
      color: #2196f3;
    }

    .match-status.rejected {
      background: #ffebee;
      color: #e74c3c;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      text-align: center;
    }

    .stat-number {
      font-size: 32px;
      font-weight: 700;
      color: #667eea;
      margin-bottom: 5px;
    }

    .stat-label {
      color: #718096;
      font-size: 14px;
    }

    .error-message {
      background: #fee;
      color: #c53030;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: none;
    }

    .success-message {
      background: #c6f6d5;
      color: #22543d;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: none;
    }

    .action-buttons {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }

    .btn-upload {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 12px 32px;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-upload:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-upload:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .btn-cancel {
      background: #e2e8f0;
      color: #4a5568;
      padding: 12px 32px;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-cancel:hover {
      background: #cbd5e0;
    }

    /* Instructions panel */
    .instructions {
      background: #f0f4f8;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 30px;
    }

    .instructions h3 {
      color: #2d3748;
      margin-bottom: 15px;
    }

    .instructions ol {
      color: #4a5568;
      line-height: 1.8;
    }

    .instructions code {
      background: white;
      padding: 2px 6px;
      border-radius: 4px;
      color: #667eea;
      font-family: 'Courier New', monospace;
    }
  </style>
</head>
<body>
  <div class="admin-container">
    <!-- Navigation -->
    <nav id="admin-nav"></nav>

    <!-- Main Content -->
    <main class="main-content">
      <div class="page-header">
        <h1>Fuzzy Match Holiday Import</h1>
        <p class="page-subtitle">Import historical holiday data for staff who haven't joined yet</p>
      </div>

      <div class="fuzzy-match-container">
        <!-- Instructions -->
        <div class="instructions">
          <h3>ðŸ“‹ How to Import Historical Holidays</h3>
          <ol>
            <li>Download the Excel template using the button below</li>
            <li>Fill in the template with historical holiday data:
              <ul>
                <li><code>Name</code> - Staff member's full name (must match exactly when they join)</li>
                <li><code>Start Date</code> - Holiday start date (DD/MM/YYYY)</li>
                <li><code>End Date</code> - Holiday end date (DD/MM/YYYY)</li>
                <li><code>Total Hours</code> - For non-GP staff (leave blank for GPs)</li>
                <li><code>Total Sessions</code> - For GP staff (leave blank for non-GPs)</li>
                <li><code>Reason</code> - Optional reason/description</li>
              </ul>
            </li>
            <li>Upload the completed Excel file</li>
            <li>Review the data and confirm upload</li>
            <li>When staff members join, their holidays will be automatically matched by name</li>
          </ol>
        </div>

        <!-- Statistics -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number" id="stat-pending">0</div>
            <div class="stat-label">Pending Matches</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="stat-matched">0</div>
            <div class="stat-label">Matched</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="stat-transferred">0</div>
            <div class="stat-label">Transferred</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="stat-total">0</div>
            <div class="stat-label">Total Records</div>
          </div>
        </div>

        <!-- Messages -->
        <div class="error-message" id="error-message"></div>
        <div class="success-message" id="success-message"></div>

        <!-- Template Download -->
        <a href="#" class="template-download" id="download-template">
          <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Download Excel Template
        </a>

        <!-- Upload Zone -->
        <div class="upload-zone" id="upload-zone">
          <input type="file" id="file-input" accept=".xlsx,.xls" style="display: none;">
          <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin: 0 auto 16px; opacity: 0.5;">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          <h3>Upload Excel File</h3>
          <p style="color: #718096; margin-top: 8px;">Drag & drop your Excel file here or click to browse</p>
        </div>

        <!-- Data Preview -->
        <div class="data-preview" id="data-preview" style="display: none;">
          <h3>Preview Data</h3>
          <div style="overflow-x: auto;">
            <table class="preview-table" id="preview-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Start Date</th>
                  <th>End Date</th>
                  <th>Hours</th>
                  <th>Sessions</th>
                  <th>Reason</th>
                </tr>
              </thead>
              <tbody id="preview-tbody">
              </tbody>
            </table>
          </div>
          <div class="action-buttons">
            <button class="btn-upload" id="btn-confirm-upload">Confirm Upload</button>
            <button class="btn-cancel" id="btn-cancel-upload">Cancel</button>
          </div>
        </div>

        <!-- Existing Records -->
        <div class="data-preview" id="existing-records" style="margin-top: 30px;">
          <h3>Existing Fuzzy Match Records</h3>
          <div style="overflow-x: auto;">
            <table class="preview-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Start Date</th>
                  <th>End Date</th>
                  <th>Hours/Sessions</th>
                  <th>Status</th>
                  <th>Matched User</th>
                  <th>Uploaded</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="existing-tbody">
                <tr>
                  <td colspan="8" style="text-align: center; color: #718096;">Loading...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script type="module">
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

    let supabase;
    let currentUser;
    let currentSiteId;
    let parsedData = [];

    async function init() {
      // Initialize Supabase
      supabase = createClient(window.CONFIG.supabaseUrl, window.CONFIG.supabaseAnonKey);

      // Check authentication
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        window.location.href = 'index.html';
        return;
      }

      currentUser = session.user;

      // Get user profile and check admin status
      const { data: profile } = await supabase
        .from('profiles')
        .select('role, site_id')
        .eq('user_id', currentUser.id)
        .single();

      if (!profile || !['admin', 'owner'].includes(profile.role)) {
        alert('Access denied. Admin privileges required.');
        window.location.href = 'staff.html';
        return;
      }

      currentSiteId = profile.site_id;

      // Load navigation
      if (typeof loadAdminNav === 'function') {
        loadAdminNav('fuzzy-match');
      }

      // Setup event handlers
      setupEventHandlers();

      // Load existing records
      await loadExistingRecords();
      await loadStatistics();
    }

    function setupEventHandlers() {
      // File upload
      const uploadZone = document.getElementById('upload-zone');
      const fileInput = document.getElementById('file-input');

      uploadZone.addEventListener('click', () => fileInput.click());

      uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('dragover');
      });

      uploadZone.addEventListener('dragleave', () => {
        uploadZone.classList.remove('dragover');
      });

      uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
          handleFileUpload(e.target.files[0]);
        }
      });

      // Template download
      document.getElementById('download-template').addEventListener('click', (e) => {
        e.preventDefault();
        downloadTemplate();
      });

      // Confirm/Cancel upload
      document.getElementById('btn-confirm-upload').addEventListener('click', confirmUpload);
      document.getElementById('btn-cancel-upload').addEventListener('click', cancelUpload);
    }

    function downloadTemplate() {
      // Create workbook with template
      const wb = XLSX.utils.book_new();

      // Create worksheet with headers and sample data
      const wsData = [
        ['Name', 'Start Date', 'End Date', 'Total Hours', 'Total Sessions', 'Reason'],
        ['John Smith', '01/07/2024', '15/07/2024', '75', '', 'Summer holiday'],
        ['Dr. Jane Doe', '10/08/2024', '12/08/2024', '', '6', 'Long weekend'],
        ['', '', '', '', '', '']
      ];

      const ws = XLSX.utils.aoa_to_sheet(wsData);

      // Set column widths
      ws['!cols'] = [
        { wch: 20 }, // Name
        { wch: 12 }, // Start Date
        { wch: 12 }, // End Date
        { wch: 12 }, // Total Hours
        { wch: 14 }, // Total Sessions
        { wch: 30 }  // Reason
      ];

      // Add worksheet to workbook
      XLSX.utils.book_append_sheet(wb, ws, 'Holiday Import');

      // Generate and download
      XLSX.writeFile(wb, 'holiday_import_template.xlsx');

      showSuccess('Template downloaded successfully!');
    }

    function handleFileUpload(file) {
      if (!file.name.match(/\.(xlsx|xls)$/)) {
        showError('Please upload an Excel file (.xlsx or .xls)');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array', cellDates: true });

          // Get first worksheet
          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];

          // Convert to JSON
          const jsonData = XLSX.utils.sheet_to_json(firstSheet, {
            header: 1,
            dateNF: 'dd/mm/yyyy',
            raw: false
          });

          // Parse and validate data
          parseAndValidateData(jsonData);
        } catch (error) {
          showError('Error reading Excel file: ' + error.message);
        }
      };
      reader.readAsArrayBuffer(file);
    }

    function parseAndValidateData(data) {
      // Remove header row
      const headers = data[0];
      const rows = data.slice(1);

      parsedData = [];
      const errors = [];

      rows.forEach((row, index) => {
        // Skip empty rows
        if (!row[0]) return;

        const record = {
          name: row[0]?.toString().trim(),
          startDate: parseExcelDate(row[1]),
          endDate: parseExcelDate(row[2]),
          totalHours: row[3] ? parseFloat(row[3]) : null,
          totalSessions: row[4] ? parseFloat(row[4]) : null,
          reason: row[5]?.toString().trim() || null
        };

        // Validate
        if (!record.name) {
          errors.push(`Row ${index + 2}: Name is required`);
        }
        if (!record.startDate) {
          errors.push(`Row ${index + 2}: Invalid start date`);
        }
        if (!record.endDate) {
          errors.push(`Row ${index + 2}: Invalid end date`);
        }
        if (record.startDate && record.endDate && record.startDate > record.endDate) {
          errors.push(`Row ${index + 2}: End date must be after start date`);
        }
        if (!record.totalHours && !record.totalSessions) {
          errors.push(`Row ${index + 2}: Either hours or sessions must be provided`);
        }

        if (errors.length === 0) {
          parsedData.push(record);
        }
      });

      if (errors.length > 0) {
        showError('Validation errors:\n' + errors.join('\n'));
        return;
      }

      if (parsedData.length === 0) {
        showError('No valid data found in the file');
        return;
      }

      // Show preview
      showPreview(parsedData);
    }

    function parseExcelDate(value) {
      if (!value) return null;

      // If it's already a Date object from XLSX parsing
      if (value instanceof Date) {
        return value.toISOString().split('T')[0];
      }

      // Try parsing as string date
      const parts = value.toString().split(/[\/\-]/);
      if (parts.length === 3) {
        // Assume DD/MM/YYYY or DD-MM-YYYY
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1; // JS months are 0-indexed
        const year = parseInt(parts[2]);

        if (year < 100) {
          // Two-digit year, assume 2000s
          return new Date(2000 + year, month, day).toISOString().split('T')[0];
        }

        return new Date(year, month, day).toISOString().split('T')[0];
      }

      return null;
    }

    function showPreview(data) {
      const tbody = document.getElementById('preview-tbody');
      tbody.innerHTML = data.map(record => `
        <tr>
          <td>${record.name}</td>
          <td>${new Date(record.startDate).toLocaleDateString('en-GB')}</td>
          <td>${new Date(record.endDate).toLocaleDateString('en-GB')}</td>
          <td>${record.totalHours || '-'}</td>
          <td>${record.totalSessions || '-'}</td>
          <td>${record.reason || '-'}</td>
        </tr>
      `).join('');

      document.getElementById('data-preview').style.display = 'block';
      hideMessages();
    }

    async function confirmUpload() {
      const btn = document.getElementById('btn-confirm-upload');
      btn.disabled = true;
      btn.textContent = 'Uploading...';

      try {
        // Prepare data for insertion
        const insertData = parsedData.map(record => ({
          site_id: currentSiteId,
          staff_name: record.name,
          start_date: record.startDate,
          end_date: record.endDate,
          total_hours: record.totalHours,
          total_sessions: record.totalSessions,
          reason: record.reason,
          uploaded_by: currentUser.id,
          match_status: 'pending'
        }));

        // Insert into fuzzy_match_holidays
        const { data, error } = await supabase
          .from('fuzzy_match_holidays')
          .insert(insertData)
          .select();

        if (error) throw error;

        showSuccess(`Successfully uploaded ${data.length} holiday records`);

        // Reset UI
        cancelUpload();

        // Reload data
        await loadExistingRecords();
        await loadStatistics();

      } catch (error) {
        showError('Upload failed: ' + error.message);
      } finally {
        btn.disabled = false;
        btn.textContent = 'Confirm Upload';
      }
    }

    function cancelUpload() {
      parsedData = [];
      document.getElementById('data-preview').style.display = 'none';
      document.getElementById('file-input').value = '';
      hideMessages();
    }

    async function loadExistingRecords() {
      try {
        const { data, error } = await supabase
          .from('fuzzy_match_holidays')
          .select(`
            *,
            matched_user:profiles!fuzzy_match_holidays_matched_user_id_fkey(full_name)
          `)
          .eq('site_id', currentSiteId)
          .order('created_at', { ascending: false });

        if (error) throw error;

        const tbody = document.getElementById('existing-tbody');

        if (!data || data.length === 0) {
          tbody.innerHTML = '<tr><td colspan="8" style="text-align: center; color: #718096;">No records found</td></tr>';
          return;
        }

        tbody.innerHTML = data.map(record => `
          <tr>
            <td>${record.staff_name}</td>
            <td>${new Date(record.start_date).toLocaleDateString('en-GB')}</td>
            <td>${new Date(record.end_date).toLocaleDateString('en-GB')}</td>
            <td>${record.total_hours || record.total_sessions || '-'} ${record.total_hours ? 'hrs' : 'sessions'}</td>
            <td><span class="match-status ${record.match_status}">${record.match_status}</span></td>
            <td>${record.matched_user?.full_name || '-'}</td>
            <td>${new Date(record.uploaded_at).toLocaleDateString('en-GB')}</td>
            <td>
              ${record.match_status === 'pending' ?
                `<button class="btn-small" onclick="deleteRecord(${record.id})">Delete</button>` :
                '-'}
            </td>
          </tr>
        `).join('');

      } catch (error) {
        console.error('Error loading records:', error);
        showError('Failed to load existing records');
      }
    }

    async function loadStatistics() {
      try {
        const { data } = await supabase
          .from('fuzzy_match_holidays')
          .select('match_status')
          .eq('site_id', currentSiteId);

        const stats = {
          pending: 0,
          matched: 0,
          transferred: 0,
          total: data?.length || 0
        };

        data?.forEach(record => {
          if (record.match_status === 'pending') stats.pending++;
          if (record.match_status === 'matched') stats.matched++;
          if (record.match_status === 'transferred') stats.transferred++;
        });

        document.getElementById('stat-pending').textContent = stats.pending;
        document.getElementById('stat-matched').textContent = stats.matched;
        document.getElementById('stat-transferred').textContent = stats.transferred;
        document.getElementById('stat-total').textContent = stats.total;

      } catch (error) {
        console.error('Error loading statistics:', error);
      }
    }

    window.deleteRecord = async function(id) {
      if (!confirm('Are you sure you want to delete this record?')) return;

      try {
        const { error } = await supabase
          .from('fuzzy_match_holidays')
          .delete()
          .eq('id', id)
          .eq('site_id', currentSiteId);

        if (error) throw error;

        showSuccess('Record deleted successfully');
        await loadExistingRecords();
        await loadStatistics();

      } catch (error) {
        showError('Failed to delete record: ' + error.message);
      }
    };

    function showError(message) {
      const el = document.getElementById('error-message');
      el.textContent = message;
      el.style.display = 'block';
      setTimeout(() => el.style.display = 'none', 5000);
    }

    function showSuccess(message) {
      const el = document.getElementById('success-message');
      el.textContent = message;
      el.style.display = 'block';
      setTimeout(() => el.style.display = 'none', 5000);
    }

    function hideMessages() {
      document.getElementById('error-message').style.display = 'none';
      document.getElementById('success-message').style.display = 'none';
    }

    // Initialize on load
    init();
  </script>

  <script src="admin-nav.js"></script>
</body>
</html>