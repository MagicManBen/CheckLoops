const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';

async function testCompletelyFixedInsert() {
  console.log('‚úÖ TESTING COMPLETELY FIXED QUIZ_ATTEMPTS INSERT');
  console.log('===============================================');
  
  try {
    // Authenticate
    const authResponse = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'benhowardmagic@hotmail.com',
        password: 'Hello1!'
      })
    });
    
    const authData = await authResponse.json();
    const accessToken = authData.access_token;
    const userId = authData.user.id;
    
    console.log('‚úÖ Authentication successful');
    
    // Test with the EXACT same logic as the fixed code
    const siteId = 2; // Default site ID as in the fix
    
    const insertAttempt = {
      site_id: siteId,
      user_id: userId,
      started_at: new Date().toISOString(),
      completed_at: new Date().toISOString(),
      total_questions: 10,
      correct_answers: 9,
      // score_percent is NOT included (it's generated)
      is_practice: false
    };
    
    console.log('\nüéØ Testing with FINAL FIXED logic...');
    console.log('   Record to insert:', JSON.stringify(insertAttempt, null, 2));
    
    const insertResponse = await fetch(`${SUPABASE_URL}/rest/v1/quiz_attempts`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(insertAttempt)
    });
    
    console.log('\nüèÜ FINAL TEST RESULT:');
    console.log('   Status:', insertResponse.status);
    
    const responseText = await insertResponse.text();
    
    if (insertResponse.ok) {
      console.log('üéâüéâüéâ SUCCESS! THE MANDATORY QUIZ BUG IS COMPLETELY FIXED! üéâüéâüéâ');
      
      const insertedData = JSON.parse(responseText);
      console.log('\nüìä Successfully inserted record:');
      console.log('   ID:', insertedData[0].id);
      console.log('   Site ID:', insertedData[0].site_id);
      console.log('   User ID:', insertedData[0].user_id);
      console.log('   Is Practice:', insertedData[0].is_practice);
      console.log('   Score:', `${insertedData[0].correct_answers}/${insertedData[0].total_questions}`);
      console.log('   Generated Score %:', insertedData[0].score_percent);
      console.log('   Completed At:', insertedData[0].completed_at);
      
      // Clean up the test record
      console.log('\nüßπ Cleaning up test record...');
      const deleteResponse = await fetch(`${SUPABASE_URL}/rest/v1/quiz_attempts?id=eq.${insertedData[0].id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'apikey': SUPABASE_ANON_KEY
        }
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ Test record cleaned up successfully');
      }
      
      console.log('\nüéØ SUMMARY: THE ISSUES WERE:');
      console.log('   1. ‚ùå Trying to insert score_percent (auto-generated column)');
      console.log('   2. ‚ùå Missing site_id (required NOT NULL field)');
      console.log('\n‚úÖ BOTH ISSUES ARE NOW FIXED IN THE CODE!');
      console.log('   Mandatory quiz submissions will now work correctly.');
      
    } else {
      console.log('‚ùå Still failing after all fixes:');
      console.log('   Response:', responseText);
      
      // Try to parse error for more details
      try {
        const errorData = JSON.parse(responseText);
        console.log('   Error code:', errorData.code);
        console.log('   Error message:', errorData.message);
      } catch (e) {
        // Raw response if can't parse
      }
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testCompletelyFixedInsert();