<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Staff Sign In — CheckLoops</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700;800&display=swap" rel="stylesheet">
<script src="config.js"></script>
<script src="rls-fix.js"></script>
<script>
  // MAGIC LINK REDIRECT HANDLER - MUST BE AT TOP OF PAGE
  (function() {
    // Check if this is a magic link callback
    const urlParams = new URLSearchParams(window.location.search);
    const hashParams = new URLSearchParams(window.location.hash.substring(1));

    // Check the type of auth flow
    const type = hashParams.get('type') || urlParams.get('type');
    const isRecovery = type === 'recovery';
    const isSignup = type === 'signup';
    const isInvite = type === 'invite' || urlParams.has('invite_email');
    const hasAccessToken = hashParams.has('access_token');

    console.log('Auth flow detected:', { type, isRecovery, isSignup, isInvite, hasAccessToken });

    // Handle different auth callback patterns
    if (isRecovery) {
      // Password recovery - needs to set new password
      console.log('Password recovery flow - redirecting to password setup...');
      const redirectUrl = window.location.origin + '/simple-set-password.html' + window.location.search + window.location.hash;
      window.location.replace(redirectUrl);
    } else if (isSignup && hasAccessToken) {
      // Signup confirmation - user already has password, just let them login
      console.log('Signup confirmation detected - user already has password');
      // DO NOT redirect to password setup - user already has a password!
      // The page will continue loading and handle the session normally
    } else if (isInvite || urlParams.has('code') || urlParams.has('token')) {
      // Only redirect for actual invitations or magic links (not signup confirmations)
      if (!isSignup) {
        console.log('Invitation/magic link detected - redirecting to password setup...');
        const redirectUrl = window.location.origin + '/simple-set-password.html' + window.location.search + window.location.hash;
        window.location.replace(redirectUrl);
      }
    } else if (hashParams.has('confirmation_token')) {
      // Email confirmation token (but not signup)
      if (!isSignup) {
        console.log('Confirmation token detected - redirecting to password setup...');
        const redirectUrl = window.location.origin + '/simple-set-password.html' + window.location.search + window.location.hash;
        window.location.replace(redirectUrl);
      }
    }
    // If none of the above, or if it's a signup confirmation, let the page continue to load normally
  })();
</script>
<style>
  :root {
    /* Primary color palette - matching homepage */
    --primary: #0b4fb3;
    --primary-dark: #062b6f;
    --primary-light: #2b6ecc;
    --primary-lightest: #e8f2ff;

    /* Accent colors */
    --accent: #76a7ff;
    --accent-2: #5f96ff;
    --success: #2bd4a7;
    --success-light: #e8fdf8;
    --warning: #ffca28;
    --warning-light: #fffbeb;
    --danger: #ff6b6b;
    --danger-light: #fef2f2;

    /* Neutral colors */
    --white: #ffffff;
    --gray-50: #f8fafc;
    --gray-100: #f1f5f9;
    --gray-200: #e2e8f0;
    --gray-300: #cbd5e1;
    --gray-400: #94a3b8;
    --gray-500: #64748b;
    --gray-600: #475569;
    --gray-700: #334155;
    --gray-800: #1e293b;
    --gray-900: #0f172a;

    /* Shadows */
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
    --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);

    /* Border radius */
    --radius-sm: 0.375rem;
    --radius: 0.5rem;
    --radius-lg: 0.75rem;
    --radius-xl: 1rem;
    --radius-2xl: 1.5rem;

    /* Typography */
    --font-sans: 'Inter', system-ui, -apple-system, sans-serif;
    --font-display: 'Plus Jakarta Sans', 'Inter', sans-serif;

    /* Transitions */
    --transition: all 0.2s ease-in-out;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html, body {
    height: 100%;
  }

  body {
    font-family: var(--font-sans);
    background: linear-gradient(135deg, var(--primary-lightest) 0%, var(--white) 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 24px;
    position: relative;
    overflow-x: hidden;
  }

  /* Subtle background pattern */
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%23e2e8f0" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.3;
    z-index: -1;
  }

  /* Main card container */
  .login-container {
    width: 100%;
    max-width: 400px;
    position: relative;
    z-index: 1;
  }

  .card {
    background: var(--white);
    border-radius: var(--radius-2xl);
    box-shadow: var(--shadow-2xl);
    border: 1px solid var(--gray-200);
    padding: 2rem;
    position: relative;
    overflow: hidden;
  }

  .card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--primary), var(--accent), var(--success));
    border-radius: var(--radius-2xl) var(--radius-2xl) 0 0;
  }

  /* Brand section */
  .brand {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    margin-bottom: 2rem;
  }

  .logo-icon {
    width: 2.5rem;
    height: 2.5rem;
    background: linear-gradient(135deg, var(--primary), var(--accent));
    border-radius: var(--radius-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 700;
    font-size: 1.25rem;
  }

  .brand-text {
    font-size: 1.75rem;
    font-weight: 800;
    color: var(--gray-900);
    font-family: var(--font-display);
  }

  /* Form styling */
  .form-container {
    position: relative;
  }

  .form-step {
    transition: all 0.3s ease;
  }

  .form-step.hidden {
    opacity: 0;
    transform: translateX(20px);
    pointer-events: none;
    position: absolute;
    inset: 0;
  }

  .form-header {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .form-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--gray-900);
    margin-bottom: 0.5rem;
    font-family: var(--font-display);
  }

  .form-subtitle {
    color: var(--gray-600);
    font-size: 0.9375rem;
  }

  /* Status badges */
  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 999px;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .status-badge.test-mode {
    background: var(--warning-light);
    color: #b45309;
    border: 1px solid #fcd34d;
  }

  .status-badge.invite-mode {
    background: var(--success-light);
    color: #059669;
    border: 1px solid #6ee7b7;
  }

  /* Form fields */
  .field {
    margin-bottom: 1rem;
  }

  .field label {
    display: block;
    font-weight: 600;
    font-size: 0.875rem;
    color: var(--gray-700);
    margin-bottom: 0.5rem;
  }

  .field input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--gray-300);
    border-radius: var(--radius);
    font-size: 1rem;
    background: var(--white);
    color: var(--gray-900);
    transition: var(--transition);
  }

  .field input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(11, 79, 179, 0.1);
  }

  .field input:disabled,
  .field input[readonly] {
    background: var(--gray-50);
    color: var(--gray-600);
    cursor: not-allowed;
  }

  .field input::placeholder {
    color: var(--gray-400);
  }

  /* Extra options row */
  .extra-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 1rem 0;
    font-size: 0.875rem;
  }

  .checkbox-wrapper {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--gray-600);
  }

  .checkbox-wrapper input[type="checkbox"] {
    width: auto;
    margin: 0;
  }

  .forgot-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition);
  }

  .forgot-link:hover {
    color: var(--primary-dark);
    text-decoration: underline;
  }

  /* Buttons */
  .btn {
    width: 100%;
    padding: 0.75rem 1rem;
    border: none;
    border-radius: var(--radius);
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 0.75rem;
  }

  .btn-primary {
    background: var(--primary);
    color: white;
    box-shadow: var(--shadow-sm);
  }

  .btn-primary:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .btn-secondary {
    background: var(--gray-100);
    color: var(--gray-700);
    border: 1px solid var(--gray-300);
  }

  .btn-secondary:hover {
    background: var(--gray-200);
    border-color: var(--gray-400);
  }

  .btn-small {
    width: auto;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    margin: 0;
  }

  /* Alert messages */
  .alert {
    padding: 0.75rem 1rem;
    border-radius: var(--radius);
    font-size: 0.875rem;
    margin-top: 1rem;
    display: none;
  }

  .alert.error {
    background: var(--danger-light);
    color: #b91c1c;
    border: 1px solid #fca5a5;
  }

  .alert.success {
    background: var(--success-light);
    color: #059669;
    border: 1px solid #6ee7b7;
  }

  /* Footer links */
  .form-footer {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--gray-200);
    text-align: center;
  }

  .signup-link {
    color: var(--gray-600);
    font-size: 0.9375rem;
  }

  .signup-link a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 600;
  }

  .signup-link a:hover {
    text-decoration: underline;
  }

  .admin-link {
    margin-top: 0.75rem;
  }

  .admin-link a {
    color: var(--gray-500);
    text-decoration: none;
    font-size: 0.875rem;
    transition: var(--transition);
  }

  .admin-link a:hover {
    color: var(--gray-700);
  }

  /* Security badge */
  .security-badge {
    margin-top: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 0.8125rem;
    color: var(--gray-500);
  }

  .ssl-badge {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
    border-radius: 999px;
    overflow: hidden;
    border: 1px solid var(--gray-300);
    transition: var(--transition);
  }

  .ssl-badge:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
  }

  .ssl-badge-left {
    background: var(--gray-100);
    color: var(--gray-600);
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.05em;
  }

  .ssl-badge-right {
    background: var(--success);
    color: white;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 700;
  }

  /* Back to homepage link */
  .back-link {
    position: absolute;
    top: 1.5rem;
    left: 1.5rem;
    color: var(--gray-500);
    text-decoration: none;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition);
  }

  .back-link:hover {
    color: var(--gray-700);
  }

  /* Loading state */
  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  .btn.loading {
    position: relative;
    color: transparent;
  }

  .btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 1rem;
    height: 1rem;
    margin: -0.5rem 0 0 -0.5rem;
    border: 2px solid transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Responsive design */
  @media (max-width: 480px) {
    body {
      padding: 1rem;
    }

    .card {
      padding: 1.5rem;
    }

    .form-title {
      font-size: 1.25rem;
    }

    .extra-options {
      flex-direction: column;
      gap: 0.75rem;
      align-items: flex-start;
    }

    .back-link {
      position: static;
      margin-bottom: 1rem;
      justify-content: center;
    }
  }

  /* Animations */
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-1rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(1rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card {
    animation: slideUp 0.5s ease-out;
  }
</style>
</head>
<body>
  <a href="homepage.html" class="back-link">
    ← Back to Homepage
  </a>

  <div class="login-container">
    <div class="card">
      <div class="brand">
        <div class="logo-icon">✓</div>
        <span class="brand-text">CheckLoops</span>
      </div>

      <div class="form-container">
        <!-- Sign In Form -->
        <div class="form-step" id="signin-form-container">
          <div class="form-header">
            <h1 class="form-title" id="signin-title">Welcome Back</h1>
            <p class="form-subtitle" id="signin-hint">Enter your credentials to access your account.</p>
          </div>

          <form id="signin-form">
            <div class="field">
              <label for="email">Email Address</label>
              <input type="email" id="email" name="email" placeholder="you@practice.com" required />
            </div>
            <div class="field">
              <label for="password">Password</label>
              <input type="password" id="password" name="password" placeholder="••••••••" required />
            </div>

            <div class="extra-options">
              <label class="checkbox-wrapper" for="remember-me">
                <input type="checkbox" id="remember-me" name="remember-me">
                Remember me
              </label>
              <a href="#" class="forgot-link" onclick="showForgotPassword()">Forgot Password?</a>
            </div>

            <button class="btn btn-primary" type="submit">Sign In</button>
            <div class="alert error" id="auth-error" role="alert"></div>
            <div class="alert success" id="auth-success"></div>
          </form>

          <div class="form-footer">
            <div class="signup-link">
              Don't have an account? <a href="signup.html">Sign up here</a>
            </div>
            <div class="admin-link">
              <a href="admin-login.html">Admin Login</a>
            </div>

            <div class="security-badge">
              <a class="ssl-badge" href="https://www.ssllabs.com/ssltest/analyze.html?d=checkloops.co.uk&s=185.199.108.153" target="_blank" rel="noopener noreferrer" aria-label="SSL Labs report for checkloops.co.uk (Grade A)" title="View our live SSL Labs report">
                <span class="ssl-badge-left">SSL</span>
                <span class="ssl-badge-right">A</span>
              </a>
              <span>Qualys SSL Labs</span>
            </div>
          </div>
        </div>

        <!-- Forgot Password Form -->
        <div class="form-step hidden" id="forgot-form-container">
          <div class="form-header">
            <h2 class="form-title">Reset Password</h2>
            <p class="form-subtitle">Enter your email address and we'll send you a link to reset your password.</p>
          </div>

          <form id="forgot-form">
            <div class="field">
              <label for="reset-email">Email Address</label>
              <input type="email" id="reset-email" name="reset-email" placeholder="you@practice.com" required />
            </div>
            <button type="submit" class="btn btn-primary">Send Reset Link</button>
            <button type="button" class="btn btn-secondary" onclick="showSignIn()">Back to Sign In</button>
            <div class="alert error" id="reset-error"></div>
            <div class="alert success" id="reset-success"></div>
          </form>
        </div>

        <!-- Reset Password Form (when coming from email link) -->
        <div class="form-step hidden" id="reset-form-container">
          <div class="form-header">
            <h2 class="form-title">Set New Password</h2>
            <p class="form-subtitle">Choose a strong password for your account.</p>
          </div>

          <form id="reset-form">
            <div class="field">
              <label for="new-password">New Password</label>
              <input type="password" id="new-password" name="new-password" placeholder="Enter new password" required minlength="6" />
            </div>
            <div class="field">
              <label for="confirm-password">Confirm Password</label>
              <input type="password" id="confirm-password" name="confirm-password" placeholder="Confirm new password" required minlength="6" />
            </div>
            <button type="submit" class="btn btn-primary">Update Password</button>
            <div class="alert error" id="update-error"></div>
            <div class="alert success" id="update-success"></div>
          </form>
        </div>
      </div>
    </div>
  </div>

<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";

  const SUPABASE_URL = "https://pmjohczpgwqrmodxpfjf.supabase.co";
  const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtam9oY3pwZ3dxcm1vZHhwZmpmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg0Mzc3MzIsImV4cCI6MjA3NDAxMzczMn0.i4_gM1sCjKECzV_wqF3aYx3lfChD1NpwjZXI9Dz2APE";
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      storage: window.localStorage,
      storageKey: `sb-${SUPABASE_URL.split('//')[1].split('.')[0]}-auth-token`
    }
  });

  // Helper: Clear any stale auth data that might cause session confusion
  function clearStaleAuthData() {
    console.log('Checking for stale auth data...');
    try {
      // We only want to clear manually logged out sessions
      // Don't clear auth data if there's a valid session
      const sessionStr = localStorage.getItem(`sb-${SUPABASE_URL.split('//')[1].split('.')[0]}-auth-token`);
      if (sessionStr && sessionStr.includes('"access_token"')) {
        // Valid session exists, don't clear anything
        console.log('Valid session exists, preserving auth data');
        return;
      }

      // Clear remember me data if user manually logged out from another page
      const entries = Object.keys(localStorage);
      const authKeys = entries.filter(key =>
        key.startsWith('sb-') ||
        key.includes('supabase') ||
        key === 'rememberMe' ||
        key === 'rememberedEmail' ||
        key === 'rememberedPassword'
      );

      // Only clear if we detect inconsistent state - i.e., auth tokens without remember me setting
      if (authKeys.some(key => key.startsWith('sb-')) && !localStorage.getItem('rememberMe')) {
        // Don't clear rememberedEmail and rememberedPassword even if logged out
        authKeys.filter(key => key !== 'rememberedEmail' && key !== 'rememberedPassword')
               .forEach(key => localStorage.removeItem(key));
        console.log('Cleared stale auth data from localStorage');
      }
    } catch (error) {
      console.error('Error clearing stale auth data:', error);
    }
  }

  // Helper: redirect the current user to the correct site based on their profile.role
  // Placed here (inside the module) so it can use the module-scoped `supabase` client.
  async function redirectByRole(user) {
    console.log('redirectByRole called with user:', user?.email || 'no user provided');
    try {
      let theUser = user;
      if (!theUser) {
        console.log('No user provided, fetching from auth...');
        const res = await supabase.auth.getUser();
        theUser = res?.data?.user;
      }
      if (!theUser) {
        console.log('Cannot determine user, falling back to admin index');
        // If we can't determine user, fallback to admin index
        window.location.href = 'staff.html';
        return;
      }

      console.log('Querying profile for user:', theUser.id);
      const { data: profile, error } = await supabase
        .from('master_users')
        .select('access_type, role')
        .eq('auth_user_id', theUser.id)
        .maybeSingle();

      console.log('Profile query result:', { profile, error });

      // If profile row missing or has no access_type/role, fall back to auth user metadata
      let effectiveRole = (profile && (profile.access_type || profile.role)) ? (profile.access_type || profile.role) : null;
      if (!effectiveRole) {
        try {
          const rawRole = theUser?.raw_user_meta_data?.role;
          if (rawRole) effectiveRole = rawRole;
          console.log('Using fallback role from metadata:', rawRole);
        } catch (e) {
          console.log('Failed to get fallback role:', e);
        }
      }

      console.log('Final effective role:', effectiveRole);

      // Check if user has completed their profile setup
      const { data: profileCheck } = await supabase
        .from('master_users')
        .select('full_name, nickname')
        .eq('auth_user_id', theUser.id)
        .single();

      // If user has no profile or incomplete profile, send to welcome
      if (!profileCheck || !profileCheck.full_name) {
        console.log('User has incomplete profile, redirecting to staff-welcome.html');
        window.location.href = 'staff-welcome.html';
        return;
      }

      // Staff-only login - redirect all users to staff.html
      console.log('Redirecting to staff.html (staff-only portal)');
      window.location.href = 'staff.html';
    } catch (err) {
      console.error('redirectByRole failed', err);
      // Default to staff-welcome for safety
      window.location.href = 'staff-welcome.html';
    }
  }

  // DOM elements
  const signinForm = document.getElementById("signin-form");
  const forgotForm = document.getElementById("forgot-form");
  const resetForm = document.getElementById("reset-form");
  const authErr = document.getElementById("auth-error");
  const authSuccess = document.getElementById("auth-success");
  const emailInput = document.getElementById("email");
  const passwordInput = document.getElementById("password");
  const rememberMeCheckbox = document.getElementById("remember-me");
  // Optional username field (some flows may include a username input)
  const usernameInput = document.getElementById('username');

  // Form switching functions
  window.showForgotPassword = function() {
    document.getElementById('signin-form-container').classList.add('hidden');
    document.getElementById('forgot-form-container').classList.remove('hidden');
    document.getElementById('reset-email').value = emailInput.value;
  };

  window.showSignIn = function() {
    document.getElementById('forgot-form-container').classList.add('hidden');
    document.getElementById('reset-form-container').classList.add('hidden');
    document.getElementById('signin-form-container').classList.remove('hidden');
  };

  function showResetPassword() {
    document.getElementById('signin-form-container').classList.add('hidden');
    document.getElementById('forgot-form-container').classList.add('hidden');
    document.getElementById('reset-form-container').classList.remove('hidden');
  }

  function showMessage(element, message, isError = false) {
    element.textContent = message;
    element.style.display = 'block';
    if (!isError) {
      setTimeout(() => {
        element.style.display = 'none';
      }, 5000);
    }
  }

  // Check URL for invite token or password recovery
  async function handleUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('invite');
    const type = urlParams.get('type');
    const accessToken = urlParams.get('access_token');
    const refreshToken = urlParams.get('refresh_token');
    const testEmail = urlParams.get('test_email');
    const testMode = urlParams.get('test_mode') === 'true';

    // Handle test mode (from admin dashboard)
    if (testMode && testEmail) {
      // Pre-fill email for test login
      emailInput.value = testEmail;
      const defaultPassword = localStorage.getItem('cl_default_password');
      if (defaultPassword) {
        passwordInput.value = defaultPassword;
      }
      // Show test mode indicator
      document.getElementById('signin-title').textContent = 'Test Login Mode';
      document.getElementById('signin-hint').innerHTML = `<div class="status-badge test-mode"><span>⚠️</span>Testing account: ${testEmail}</div>Password has been pre-filled.`;
      return;
    }

    // Handle password recovery
    if (type === 'recovery' || (accessToken && refreshToken)) {
      showResetPassword();
      return 'recovery';
    }

    // Handle invite
    if (!token) return false;

    try {
      const { data: invite, error: inviteError } = await supabase
        .from('site_invites')
        .select('*')
        .eq('token', token)
        .eq('status', 'pending')
        .gte('expires_at', new Date().toISOString())
        .single();

      if (inviteError || !invite) {
        showMessage(authErr, 'Invalid or expired invitation', true);
        return false;
      }

      // Pre-fill email and update UI for invited user
      emailInput.value = invite.email;
      emailInput.readOnly = true;
      document.getElementById('signin-title').textContent = 'Welcome to CheckLoops';
      document.getElementById('signin-hint').innerHTML = `<div class="status-badge invite-mode"><span>✓</span>Invitation Mode</div>Please create your password to complete registration.`;

      signinForm.setAttribute('data-invite', token);
      return 'invite';
    } catch (err) {
      console.error('Failed to verify invite:', err);
      showMessage(authErr, 'Failed to verify invitation', true);
      return false;
    }
  }

  // Complete invitation flow when user is already signed in from email link
  async function completeInvitationFlow(user, inviteToken) {
    try {
      console.log('Completing invitation flow for user:', user.email, 'with token:', inviteToken);

      // Get the invite details
      const { data: invite, error: inviteError } = await supabase
        .from('site_invites')
        .select('*')
        .eq('token', inviteToken)
        .single();

      if (inviteError || !invite) {
        console.error('Failed to get invite details:', inviteError);
        showMessage(authErr, "Invalid or expired invitation.", true);
        return;
      }

      if (invite.status === 'accepted') {
        showMessage(authSuccess, "This invitation has already been accepted. Redirecting...");
        setTimeout(() => window.location.href = 'staff.html', 2000);
        return;
      }

      const userId = user.id;

      // Check if profile already exists
      const { data: existingProfile, error: profileCheckError } = await supabase
        .from('master_users')
        .select('*')
        .eq('auth_user_id', userId)
        .eq('site_id', invite.site_id)
        .single();

      if (profileCheckError && profileCheckError.code !== 'PGRST116') {
        console.error('Error checking existing profile:', profileCheckError);
      }

      // Create profile if it doesn't exist
      if (!existingProfile) {
        console.log('Creating user profile...');
        const { error: profileError } = await supabase
          .from('master_users')
          .insert({
            user_id: userId,
            site_id: invite.site_id,
            full_name: invite.full_name,
            role: invite.role,
            created_at: new Date().toISOString()
          });

        if (profileError) {
          console.error('Failed to create profile:', profileError);
          showMessage(authErr, "Failed to create profile. Please contact support.", true);
          return;
        }
      }

      // Add to master_users table if role detail is provided
      if (invite.role_detail) {
        const { data: existingKioskUser, error: kioskCheckError } = await supabase
          .from('master_users')
          .select('*')
          .eq('site_id', invite.site_id)
          .eq('full_name', invite.full_name)
          .single();

        if (kioskCheckError && kioskCheckError.code !== 'PGRST116') {
          console.error('Error checking existing kiosk user:', kioskCheckError);
        }

        if (!existingKioskUser) {
          console.log('Creating kiosk user entry...');
          const kioskUserData = {
            site_id: invite.site_id,
            full_name: invite.full_name,
            role: invite.role_detail,
            active: true,
            created_at: new Date().toISOString()
          };

          if (invite.reports_to_id) {
            kioskUserData.reports_to_id = parseInt(invite.reports_to_id);
          }

          const { error: kioskError } = await supabase
            .from('master_users')
            .insert(kioskUserData);

          if (kioskError) {
            console.error('Failed to create kiosk user:', kioskError);
            // Don't fail the process, just log the error
          }
        }
      }

      // Update invite status
      const { error: updateError } = await supabase
        .from('site_invites')
        .update({
          status: 'accepted',
          accepted_at: new Date().toISOString()
        })
        .eq('token', inviteToken);

      if (updateError) {
        console.error('Failed to update invite status:', updateError);
        // Don't fail if invite status update fails, user is created successfully
      }

      showMessage(authSuccess, "Welcome to CheckLoops! Your account has been activated successfully. Redirecting...");

      // Redirect based on role after invitation completion
      setTimeout(() => {
        redirectByRole(user);
      }, 3000);

    } catch (error) {
      console.error('Error completing invitation flow:', error);
      showMessage(authErr, "Failed to complete registration. Please try again or contact support.", true);
    }
  }

  // Initialize page
  supabase.auth.getSession().then(async ({ data: { session } }) => {
    // Clear any stale auth data first
    clearStaleAuthData();

    // Check for URL parameters first to handle invitations properly
    const urlParams = new URLSearchParams(window.location.search);
    const inviteToken = urlParams.get('invite');

    if (session && inviteToken) {
      // User is signed in from clicking invitation email link
      // Complete the invitation process automatically
      console.log('User signed in via invitation, completing registration...');
      await completeInvitationFlow(session.user, inviteToken);
      return;
    }

    if (session) {
      // Regular signed-in user, redirect based on role
      await redirectByRole(session.user);
      return;
    }

    const urlType = await handleUrlParams();

    if (urlType !== 'recovery' && urlType !== 'invite' && localStorage.getItem('rememberMe') === 'true') {
      emailInput.value = localStorage.getItem('rememberedEmail') || '';
      passwordInput.value = localStorage.getItem('rememberedPassword') || '';
      // If there's a stored username field, populate it
      if (usernameInput) usernameInput.value = localStorage.getItem('rememberedUsername') || '';
      rememberMeCheckbox.checked = true;
    }
  });

  // Loading state helper
  function setLoading(button, isLoading) {
    if (isLoading) {
      button.disabled = true;
      button.classList.add('loading');
    } else {
      button.disabled = false;
      button.classList.remove('loading');
    }
  }

  // Sign in form handler
  signinForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');

    setLoading(submitBtn, true);
    authErr.style.display = 'none';
    authSuccess.style.display = 'none';

    const email = emailInput.value.trim();
    const password = passwordInput.value;
    const inviteToken = signinForm.getAttribute('data-invite');

    try {
      let authResponse;

      if (inviteToken) {
        // Handle invitation signup - check if user was already created by admin.inviteUserByEmail
        console.log('Handling invitation signup for token:', inviteToken);

        // Get the invite details first
        const { data: invite, error: inviteError } = await supabase
          .from('site_invites')
          .select('*')
          .eq('token', inviteToken)
          .single();

        if (inviteError || !invite) {
          console.error('Failed to get invite details:', inviteError);
          showMessage(authErr, "Invalid or expired invitation. Please contact support.", true);
          return;
        }

        if (invite.status === 'accepted') {
          showMessage(authErr, "This invitation has already been accepted. Please try signing in.", true);
          return;
        }

        // Try to sign up the user
        console.log('Creating new user account...');
        authResponse = await supabase.auth.signUp({
          email,
          password,
        });

        if (authResponse.error) {
          showMessage(authErr, authResponse.error.message, true);
          return;
        }

        // Ensure we have a user ID
        if (!authResponse.data.user?.id) {
          showMessage(authErr, "Failed to get user information. Please try again.", true);
          return;
        }

        const userId = authResponse.data.user.id;

        // Check if profile already exists (might have been created by trigger)
        const { data: existingProfile, error: profileCheckError } = await supabase
          .from('master_users')
          .select('*')
          .eq('auth_user_id', userId)
          .eq('site_id', invite.site_id)
          .single();

        if (profileCheckError && profileCheckError.code !== 'PGRST116') {
          console.error('Error checking existing profile:', profileCheckError);
        }

        // Only create profile if it doesn't exist
        if (!existingProfile) {
          console.log('Creating user profile...');
          const { error: profileError } = await supabase
            .from('master_users')
            .insert({
              user_id: userId,
              site_id: invite.site_id,
              full_name: invite.full_name,
              role: invite.role,
              created_at: new Date().toISOString()
            });

          if (profileError) {
            console.error('Failed to create profile:', profileError);
            showMessage(authErr, "Account created but failed to create profile. Please contact support.", true);
            return;
          }
        }

        // Add to master_users table if role detail and reports_to were provided in the invite
        if (invite.role_detail) {
          // Check if kiosk user already exists
          const { data: existingKioskUser, error: kioskCheckError } = await supabase
            .from('master_users')
            .select('*')
            .eq('site_id', invite.site_id)
            .eq('full_name', invite.full_name)
            .single();

          if (kioskCheckError && kioskCheckError.code !== 'PGRST116') {
            console.error('Error checking existing kiosk user:', kioskCheckError);
          }

          if (!existingKioskUser) {
            console.log('Creating kiosk user entry...');
            const kioskUserData = {
              site_id: invite.site_id,
              full_name: invite.full_name,
              role: invite.role_detail,
              active: true,
              created_at: new Date().toISOString()
            };

            if (invite.reports_to_id) {
              kioskUserData.reports_to_id = parseInt(invite.reports_to_id);
            }

            const { error: kioskError } = await supabase
              .from('master_users')
              .insert(kioskUserData);

            if (kioskError) {
              console.error('Failed to create kiosk user:', kioskError);
              // Don't fail the registration, just log the error
            }
          }
        }

        // Update invite status
        const { error: updateError } = await supabase
          .from('site_invites')
          .update({
            status: 'accepted',
            accepted_at: new Date().toISOString()
          })
          .eq('token', inviteToken);

        if (updateError) {
          console.error('Failed to update invite status:', updateError);
          // Don't fail if invite status update fails, user is created successfully
        }

        showMessage(authSuccess, "Welcome to CheckLoops! Your account has been activated successfully.");
      } else {
        // Handle normal sign in
        authResponse = await supabase.auth.signInWithPassword({ email, password });

        if (authResponse.error) {
          showMessage(authErr, authResponse.error.message, true);
          return;
        }
      }

      if (!authResponse.data.session) {
        showMessage(authErr, "Authentication successful but no session was created. Please try again.", true);
        return;
      }

      // Handle "Remember me" — persist email and optional username/password if checked
      if (rememberMeCheckbox.checked) {
        localStorage.setItem('rememberMe', 'true');
        localStorage.setItem('rememberedEmail', email);
        if (usernameInput && usernameInput.value) localStorage.setItem('rememberedUsername', usernameInput.value.trim());
        localStorage.setItem('rememberedPassword', passwordInput.value);
      } else {
        localStorage.removeItem('rememberMe');
        localStorage.removeItem('rememberedEmail');
        localStorage.removeItem('rememberedUsername');
        localStorage.removeItem('rememberedPassword');
      }

      // Redirect after successful authentication based on role
      console.log('About to redirect after sign-in, authResponse:', !!authResponse.data.session);
      setTimeout(() => {
        console.log('Executing redirect after sign-in...');
        redirectByRole();
      }, inviteToken ? 2000 : 500);

    } catch (err) {
      console.error('Authentication error:', err);
      showMessage(authErr, "An unexpected error occurred. Please try again.", true);
    } finally {
      setLoading(submitBtn, false);
    }
  });

  // Forgot password form handler
  forgotForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const resetError = document.getElementById('reset-error');
    const resetSuccess = document.getElementById('reset-success');

    setLoading(submitBtn, true);
    resetError.style.display = 'none';
    resetSuccess.style.display = 'none';

    const email = document.getElementById('reset-email').value.trim();

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/home.html`
      });

      if (error) {
        showMessage(resetError, error.message, true);
      } else {
        showMessage(resetSuccess, `Password reset instructions have been sent to ${email}. Please check your email.`);
      }
    } catch (err) {
      console.error('Password reset error:', err);
      showMessage(resetError, "An unexpected error occurred. Please try again.", true);
    } finally {
      setLoading(submitBtn, false);
    }
  });

  // Reset password form handler
  resetForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const updateError = document.getElementById('update-error');
    const updateSuccess = document.getElementById('update-success');

    setLoading(submitBtn, true);
    updateError.style.display = 'none';
    updateSuccess.style.display = 'none';

    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;

    if (newPassword !== confirmPassword) {
      showMessage(updateError, "Passwords do not match", true);
      setLoading(submitBtn, false);
      return;
    }

    if (newPassword.length < 6) {
      showMessage(updateError, "Password must be at least 6 characters long", true);
      setLoading(submitBtn, false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });

      if (error) {
        showMessage(updateError, error.message, true);
      } else {
        showMessage(updateSuccess, "Password updated successfully! Redirecting...");
        // After password reset, redirect according to role
        setTimeout(() => {
          redirectByRole();
        }, 2000);
      }
    } catch (err) {
      console.error('Password update error:', err);
      showMessage(updateError, "An unexpected error occurred. Please try again.", true);
    } finally {
      setLoading(submitBtn, false);
    }
  });
</script>

<!-- Debug Console - Persistent across all pages -->
<script src="debug-console.js"></script>
<script src="supabase-debug.js"></script>
</body>
</html>