<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CQC GP Surgery Search</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .header h1 {
            color: #333;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
        }

        .search-section {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .search-input {
            width: 100%;
            padding: 15px;
            font-size: 16px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            transition: border-color 0.3s;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .surgery-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .surgery-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }

        .surgery-card h3 {
            color: #333;
            margin-bottom: 10px;
        }

        .surgery-card p {
            color: #666;
            font-size: 14px;
            margin: 5px 0;
        }

        .rating-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            margin-top: 10px;
        }

        .rating-outstanding { background: #4CAF50; color: white; }
        .rating-good { background: #8BC34A; color: white; }
        .rating-requires-improvement { background: #FF9800; color: white; }
        .rating-inadequate { background: #f44336; color: white; }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            animation: fadeIn 0.3s;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background: white;
            margin: 50px auto;
            padding: 30px;
            width: 90%;
            max-width: 900px;
            max-height: 80vh;
            overflow-y: auto;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 30px;
            cursor: pointer;
            color: #999;
        }

        .fetch-details-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            transition: transform 0.3s;
        }

        .fetch-details-btn:hover {
            transform: scale(1.05);
        }

        .fetch-details-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .details-section {
            margin-top: 20px;
        }

        .details-section h3 {
            color: #333;
            margin: 20px 0 10px 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #e0e0e0;
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .detail-item {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 6px;
        }

        .detail-item strong {
            color: #555;
            display: block;
            font-size: 12px;
            margin-bottom: 5px;
        }

        .detail-item span {
            color: #333;
            font-size: 14px;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .error {
            background: #fee;
            color: #c00;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
        }

        .success {
            background: #efe;
            color: #060;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .api-response-section {
            margin-top: 30px;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
        }

        .api-response-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.3s;
        }

        .copy-btn:hover {
            background: #218838;
        }

        .copy-btn.copied {
            background: #007bff;
        }

        .api-response-content {
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            max-height: 400px;
            overflow-y: auto;
        }

        .api-response-content pre {
            margin: 0;
            font-size: 12px;
            line-height: 1.4;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>CQC GP Surgery Search</h1>
            <p>Search for GP surgeries and view their CQC inspection details</p>
        </div>

        <div class="search-section">
            <input type="text"
                   id="searchInput"
                   class="search-input"
                   placeholder="Search by surgery name, postcode, or location...">
            <div id="searchResults" class="results-grid"></div>
        </div>
    </div>

    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Surgery Details</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalBody"></div>
        </div>
    </div>

    <script>
        const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';

        console.log('Initializing Supabase with URL:', SUPABASE_URL);
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        console.log('Supabase client initialized');

        let searchTimeout;
        let currentSurgery = null;

        document.getElementById('searchInput').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => searchGPSurgeries(e.target.value), 300);
        });

        async function searchGPSurgeries(searchTerm) {
            const resultsDiv = document.getElementById('searchResults');
            console.log('Searching for:', searchTerm);

            if (searchTerm.length < 2) {
                resultsDiv.innerHTML = '';
                return;
            }

            resultsDiv.innerHTML = '<div class="loading">Searching...</div>';

            try {
                console.log('Making Supabase query...');
                const { data, error } = await supabase
                    .from('CQC All GPs')
                    .select('*')
                    .or(`location_name.ilike.%${searchTerm}%,postcode.ilike.%${searchTerm}%,town_city.ilike.%${searchTerm}%`)
                    .limit(20);

                console.log('Query response:', { data, error });

                if (error) throw error;

                if (!data || data.length === 0) {
                    resultsDiv.innerHTML = '<div class="loading">No results found</div>';
                    return;
                }

                resultsDiv.innerHTML = data.map(surgery => `
                    <div class="surgery-card" onclick="showSurgeryDetails('${surgery.location_id}')">
                        <h3>${surgery.location_name || 'Unknown Surgery'}</h3>
                        <p><strong>Location ID:</strong> ${surgery.location_id}</p>
                        ${surgery.address_line_1 ? `<p>${surgery.address_line_1}</p>` : ''}
                        ${surgery.town_city ? `<p>${surgery.town_city}</p>` : ''}
                        ${surgery.postcode ? `<p><strong>${surgery.postcode}</strong></p>` : ''}
                        ${surgery.overall_rating ? `
                            <span class="rating-badge rating-${surgery.overall_rating.toLowerCase().replace(/\s+/g, '-')}">
                                ${surgery.overall_rating}
                            </span>
                        ` : ''}
                    </div>
                `).join('');
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">Error searching: ${error.message}</div>`;
            }
        }

        async function showSurgeryDetails(locationId) {
            console.log('Showing details for location:', locationId);
            const modal = document.getElementById('detailsModal');
            const modalBody = document.getElementById('modalBody');
            const modalTitle = document.getElementById('modalTitle');

            modal.style.display = 'block';
            modalBody.innerHTML = '<div class="spinner"></div>';

            try {
                console.log('Fetching surgery details from Supabase...');
                const { data, error } = await supabase
                    .from('CQC All GPs')
                    .select('*')
                    .eq('location_id', locationId)
                    .single();

                console.log('Surgery details response:', { data, error });

                if (error) throw error;

                currentSurgery = data;
                modalTitle.textContent = data.location_name || 'Surgery Details';

                modalBody.innerHTML = `
                    <div style="text-align: center; margin-bottom: 20px;">
                        <button id="fetchDetailsBtn" class="fetch-details-btn" onclick="fetchCQCDetails()">
                            Fetch More Details from CQC API
                        </button>
                    </div>
                    <div id="apiResult"></div>
                    <div id="rawApiResponse" class="api-response-section" style="display: none;">
                        <div class="api-response-header">
                            <h3>API Response</h3>
                            <button class="copy-btn" id="copyRawBtn" onclick="copyRawResponse()">Copy JSON</button>
                        </div>
                        <div class="api-response-content">
                            <pre id="rawResponseContent"></pre>
                        </div>
                    </div>
                `;
            } catch (error) {
                modalBody.innerHTML = `<div class="error">Error loading details: ${error.message}</div>`;
            }
        }

        async function fetchCQCDetails() {
            console.log('Fetching CQC details for:', currentSurgery);
            const btn = document.getElementById('fetchDetailsBtn');
            const resultDiv = document.getElementById('apiResult');

            btn.disabled = true;
            btn.textContent = 'Fetching from CQC...';
            resultDiv.innerHTML = '<div class="loading">Fetching from CQC API...</div>';

            try {
                console.log('Invoking Supabase function with:', {
                    location_id: currentSurgery.location_id,
                    provider_id: currentSurgery.provider_id
                });

                const { data, error } = await supabase.functions.invoke('fetch-cqc-details', {
                    body: {
                        location_id: currentSurgery.location_id,
                        provider_id: currentSurgery.provider_id
                    }
                });

                console.log('CQC API response:', { data, error });

                if (error) throw error;

                console.log('Checking data.success:', data.success);
                console.log('Full data object:', data);

                // Store the raw response and show it
                window.currentRawApiResponse = data;
                const rawResponseDiv = document.getElementById('rawApiResponse');
                const rawResponseContent = document.getElementById('rawResponseContent');
                rawResponseContent.textContent = JSON.stringify(data, null, 2);
                rawResponseDiv.style.display = 'block';

                // Clear the loading message since we're showing the raw response
                resultDiv.innerHTML = '';
            } catch (error) {
                console.error('Error in fetchCQCDetails:', error);

                // Store the error response and show it
                window.currentRawApiResponse = { error: error.message, stack: error.stack };
                const rawResponseDiv = document.getElementById('rawApiResponse');
                const rawResponseContent = document.getElementById('rawResponseContent');
                rawResponseContent.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
                rawResponseDiv.style.display = 'block';

                resultDiv.innerHTML = '';
            } finally {
                btn.disabled = false;
                btn.textContent = 'Fetch More Details from CQC API';
            }
        }

        function renderDetailItem(label, value) {
            if (!value) return '';
            return `
                <div class="detail-item">
                    <strong>${label}</strong>
                    <span>${value}</span>
                </div>
            `;
        }

        function renderJsonSection(title, data) {
            if (!data) return '';
            return `
                <h3>${title}</h3>
                <div class="detail-item">
                    <pre style="overflow-x: auto; font-size: 12px;">${JSON.stringify(data, null, 2)}</pre>
                </div>
            `;
        }

        function renderCQCData(data) {
            if (!data) return '';

            const sections = [];

            if (data.name) {
                sections.push(renderDetailItem('Name', data.name));
            }
            if (data.alsoKnownAs) {
                sections.push(renderDetailItem('Also Known As', data.alsoKnownAs));
            }
            if (data.website) {
                sections.push(renderDetailItem('Website', `<a href="${data.website}" target="_blank">${data.website}</a>`));
            }
            if (data.mainPhoneNumber) {
                sections.push(renderDetailItem('Phone', data.mainPhoneNumber));
            }
            if (data.numberOfBeds) {
                sections.push(renderDetailItem('Number of Beds', data.numberOfBeds));
            }

            if (data.currentRatings) {
                sections.push(`
                    <h4>Current Ratings</h4>
                    ${renderJsonSection('', data.currentRatings)}
                `);
            }

            if (data.regulatedActivities && data.regulatedActivities.length > 0) {
                sections.push(`
                    <h4>Regulated Activities</h4>
                    ${data.regulatedActivities.map(activity => `
                        <div class="detail-item">
                            <strong>${activity.name}</strong>
                            <span>Code: ${activity.code}</span>
                        </div>
                    `).join('')}
                `);
            }

            if (data.specialisms && data.specialisms.length > 0) {
                sections.push(`
                    <h4>Specialisms</h4>
                    ${data.specialisms.map(spec => `
                        <div class="detail-item">
                            <span>${spec.name}</span>
                        </div>
                    `).join('')}
                `);
            }

            if (data.reports && data.reports.length > 0) {
                sections.push(`
                    <h4>Reports</h4>
                    ${data.reports.map(report => `
                        <div class="detail-item">
                            <strong>Report Date: ${formatDate(report.reportDate)}</strong>
                            <span>Type: ${report.reportType}</span>
                            ${report.reportUri ? `<a href="${report.reportUri}" target="_blank">View Report</a>` : ''}
                        </div>
                    `).join('')}
                `);
            }

            return `<div class="details-grid">${sections.join('')}</div>`;
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            try {
                return new Date(dateString).toLocaleDateString('en-GB', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            } catch {
                return dateString;
            }
        }

        function copyRawResponse() {
            try {
                const jsonString = JSON.stringify(window.currentRawApiResponse || {}, null, 2);
                navigator.clipboard.writeText(jsonString).then(() => {
                    const btn = document.getElementById('copyRawBtn');
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.classList.add('copied');

                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.classList.remove('copied');
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy to clipboard:', err);
                    // Fallback: create a text area and select the text
                    const textArea = document.createElement('textarea');
                    textArea.value = jsonString;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);

                    const btn = document.getElementById('copyRawBtn');
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.classList.add('copied');

                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.classList.remove('copied');
                    }, 2000);
                });
            } catch (error) {
                console.error('Error copying raw response:', error);
            }
        }

        function closeModal() {
            document.getElementById('detailsModal').style.display = 'none';
        }

        window.onclick = function(event) {
            const modal = document.getElementById('detailsModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>