import { chromium } from 'playwright';
import { createClient } from '@supabase/supabase-js';

// Configuration
const BASE_URL = 'http://127.0.0.1:58156';
const SUPABASE_URL = "https://unveoqnlqnobufhublyw.supabase.co";
const SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTAxNzI3NiwiZXhwIjoyMDcwNTkzMjc2fQ.CJxV14F0T2TWkAjeR4bpYiBIOwLwyfzF9WzAWwS99Xc";

const supabase = createClient(SUPABASE_URL, SERVICE_KEY);

async function testCompleteFlow() {
    console.log('=== TESTING COMPLETE KIOSK FLOW ===\n');

    const browser = await chromium.launch({
        headless: false,
        slowMo: 500  // Slow down for visibility
    });

    try {
        const context = await browser.newContext();
        const page = await context.newPage();

        // Enable console logging
        page.on('console', msg => {
            if (msg.type() === 'log' || msg.type() === 'error') {
                console.log('Browser:', msg.text());
            }
        });

        // STEP 1: Login to indexIpad
        console.log('1. Testing login...');
        await page.goto(`${BASE_URL}/indexIpad.html`);
        await page.waitForTimeout(2000);

        // Fill login form
        await page.fill('#loginEmail', 'benhowardmagic@hotmail.com');
        await page.fill('#loginPass', 'Hello1!');
        await page.click('#doLogin');

        // Wait for PIN screen
        await page.waitForSelector('#screen-pin:not(.hidden)', { timeout: 10000 });
        console.log('✓ Login successful, PIN screen displayed');

        // STEP 2: Check if Ben Howard appears in dropdown
        console.log('\n2. Testing PIN setup dropdown...');
        await page.click('#btnPinSetup');
        await page.waitForSelector('#screen-pin-setup:not(.hidden)', { timeout: 5000 });

        // Wait for dropdown to populate
        await page.waitForTimeout(2000);

        // Check dropdown options
        const options = await page.$$eval('#pinSetupUser option', opts =>
            opts.map(opt => ({ value: opt.value, text: opt.textContent }))
        );

        console.log('Found users in dropdown:', options.length - 1); // -1 for placeholder
        options.forEach(opt => {
            if (opt.value) console.log(`  - ${opt.text}`);
        });

        const benOption = options.find(opt => opt.text && opt.text.includes('Ben Howard'));
        if (benOption) {
            console.log('✓ Ben Howard found in dropdown');

            // STEP 3: Set a PIN
            console.log('\n3. Setting PIN for Ben Howard...');
            await page.selectOption('#pinSetupUser', benOption.value);
            await page.fill('#pinSetupNew', '1234');
            await page.fill('#pinSetupConfirm', '1234');
            await page.click('#btnPinSetupSave');

            // Wait for success message
            await page.waitForTimeout(3000);
            const msg = await page.textContent('#pinSetupMsg');
            if (msg.includes('successfully')) {
                console.log('✓ PIN set successfully');
            } else {
                console.log('✗ PIN setting failed:', msg);
            }

            // Return to PIN screen
            await page.waitForSelector('#screen-pin:not(.hidden)', { timeout: 5000 });

            // STEP 4: Test PIN authentication
            console.log('\n4. Testing PIN authentication...');
            const pinDigits = ['1', '2', '3', '4'];
            for (const digit of pinDigits) {
                await page.click(`.key:has-text("${digit}")`);
                await page.waitForTimeout(200);
            }

            // Wait for authentication
            await page.waitForTimeout(3000);

            // Check if we reached the begin screen
            const onBeginScreen = await page.isVisible('#screen-begin');
            if (onBeginScreen) {
                console.log('✓ PIN authentication successful!');

                // STEP 5: Test scanning flow
                console.log('\n5. Testing scanning flow...');
                await page.click('#btnBegin');

                // Wait for scanning screen
                await page.waitForSelector('#screen-scanning:not(.hidden)', { timeout: 5000 });
                console.log('✓ Scanning screen displayed');

                // Wait for auto-advance to upload screen
                console.log('  Waiting for auto-advance to upload screen...');
                await page.waitForSelector('#screen-upload:not(.hidden)', { timeout: 15000 });
                console.log('✓ Upload screen displayed');

                // Simulate scanning items
                const testItemIds = ['1234567890', '0987654321'];
                for (const itemId of testItemIds) {
                    await page.fill('#uploadInput', itemId);
                    await page.keyboard.press('Enter');
                    await page.waitForTimeout(500);
                }

                console.log('  Simulated scanning', testItemIds.length, 'items');

            } else {
                console.log('✗ PIN authentication failed - did not reach begin screen');
                const currentScreen = await page.evaluate(() => {
                    const screens = ['screen-login', 'screen-pin', 'screen-begin', 'screen-pin-setup'];
                    for (const s of screens) {
                        const el = document.getElementById(s);
                        if (el && !el.classList.contains('hidden')) return s;
                    }
                    return 'unknown';
                });
                console.log('  Current screen:', currentScreen);

                // Check for error message
                const pinMsg = await page.textContent('#pinMsg');
                if (pinMsg) console.log('  PIN message:', pinMsg);
            }

        } else {
            console.log('✗ Ben Howard NOT found in dropdown!');
            console.log('  This means the profile still lacks proper setup');
        }

        // STEP 6: Check database state
        console.log('\n6. Checking database state...');

        // Check profiles
        const { data: profiles } = await supabase
            .from('master_users')
            .select('auth_user_id, full_name, kiosk_user_id, site_id')
            .eq('full_name', 'Ben Howard');

        if (profiles && profiles.length > 0) {
            console.log('Profile found:', profiles[0]);
        }

        // Check kiosk_users
        const { data: kioskUsers } = await supabase
            .from('master_users')
            .select('id, full_name, site_id')
            .eq('full_name', 'Ben Howard');

        if (kioskUsers && kioskUsers.length > 0) {
            console.log('Kiosk user found:', kioskUsers[0]);
        } else {
            console.log('✗ No kiosk_user found for Ben Howard!');
        }

        // Take final screenshot
        await page.screenshot({ path: 'test_result.png', fullPage: true });
        console.log('\n✓ Screenshot saved as test_result.png');

    } catch (error) {
        console.error('Test failed:', error);

        // Take error screenshot
        const page = browser.contexts()[0]?.pages()[0];
        if (page) {
            await page.screenshot({ path: 'test_error.png', fullPage: true });
            console.log('Error screenshot saved as test_error.png');
        }
    } finally {
        await browser.close();
        console.log('\n=== TEST COMPLETE ===');
    }
}

// Run the test
testCompleteFlow().catch(console.error);