const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';

async function testQuizAttemptInsert() {
  console.log('üß™ TESTING QUIZ_ATTEMPTS INSERT PERMISSIONS');
  console.log('==========================================');
  
  try {
    // First authenticate as the user
    console.log('üîê Authenticating as benhowardmagic@hotmail.com...');
    
    const authResponse = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'benhowardmagic@hotmail.com',
        password: 'Hello1!'
      })
    });
    
    if (!authResponse.ok) {
      throw new Error(`Auth failed: ${authResponse.status}`);
    }
    
    const authData = await authResponse.json();
    const accessToken = authData.access_token;
    const userId = authData.user.id;
    
    console.log('‚úÖ Authentication successful');
    console.log('   User ID:', userId);
    
    // Get user's site_id from master_users
    console.log('\nüìã Getting user site_id...');
    const masterResponse = await fetch(`${SUPABASE_URL}/rest/v1/master_users?auth_user_id=eq.${userId}&select=site_id`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'apikey': SUPABASE_ANON_KEY
      }
    });
    
    if (!masterResponse.ok) {
      throw new Error(`Master users fetch failed: ${masterResponse.status}`);
    }
    
    const masterData = await masterResponse.json();
    const siteId = masterData[0]?.site_id;
    
    console.log('   Site ID:', siteId);
    
    // Try to insert a test record
    console.log('\nüß™ Testing quiz_attempts insert...');
    
    const testRecord = {
      site_id: siteId,
      user_id: userId,
      started_at: new Date().toISOString(),
      completed_at: new Date().toISOString(),
      total_questions: 10,
      correct_answers: 7,
      score_percent: 70,
      is_practice: false
    };
    
    console.log('   Test record:', JSON.stringify(testRecord, null, 2));
    
    const insertResponse = await fetch(`${SUPABASE_URL}/rest/v1/quiz_attempts`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testRecord)
    });
    
    console.log('\nüìä INSERT RESULT:');
    console.log('   Status:', insertResponse.status);
    console.log('   Status Text:', insertResponse.statusText);
    
    const responseText = await insertResponse.text();
    
    if (insertResponse.ok) {
      console.log('‚úÖ SUCCESS! Insert worked');
      console.log('   Response:', responseText);
      
      // Clean up - delete the test record
      const insertedData = JSON.parse(responseText);
      if (insertedData && insertedData[0]?.id) {
        console.log('\nüßπ Cleaning up test record...');
        const deleteResponse = await fetch(`${SUPABASE_URL}/rest/v1/quiz_attempts?id=eq.${insertedData[0].id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'apikey': SUPABASE_ANON_KEY
          }
        });
        
        if (deleteResponse.ok) {
          console.log('‚úÖ Test record cleaned up');
        } else {
          console.log('‚ö†Ô∏è Could not clean up test record (ID: ' + insertedData[0].id + ')');
        }
      }
    } else {
      console.log('‚ùå INSERT FAILED');
      console.log('   Error:', responseText);
      
      // Try to parse the error
      try {
        const errorData = JSON.parse(responseText);
        console.log('\nüîç DETAILED ERROR ANALYSIS:');
        console.log('   Code:', errorData.code);
        console.log('   Message:', errorData.message);
        console.log('   Details:', errorData.details);
        console.log('   Hint:', errorData.hint);
        
        if (errorData.code === '42501') {
          console.log('\nüí° DIAGNOSIS: Insufficient privileges (RLS policy issue)');
        } else if (errorData.code === '23505') {
          console.log('\nüí° DIAGNOSIS: Duplicate key constraint violation');
        } else if (errorData.code === '23502') {
          console.log('\nüí° DIAGNOSIS: Not null constraint violation');
        } else if (errorData.code === '23503') {
          console.log('\nüí° DIAGNOSIS: Foreign key constraint violation');
        }
      } catch (parseError) {
        console.log('   Raw response:', responseText);
      }
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// Run the test
testQuizAttemptInsert();