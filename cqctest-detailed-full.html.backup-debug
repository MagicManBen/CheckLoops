<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>CQC GP Surgery Search — Detailed</title>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
      color: #222;
    }
    a { color: #4a5bdc; text-decoration: none; }
    a:hover { text-decoration: underline; }

    .container { max-width: 1200px; margin: 0 auto; }

    .header, .search-section {
      background: white;
      border-radius: 12px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .header h1 { margin: 0 0 10px; color: #333; }
    .header p { margin: 0; color: #666; }

    .search-input {
      width: 100%; padding: 15px; font-size: 16px;
      border: 2px solid #e0e0e0; border-radius: 8px;
    }
    .search-input:focus { outline: none; border-color: #667eea; }

    .results-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 20px; margin-top: 20px;
    }
    .surgery-card {
      background: white; border-radius: 12px; padding: 20px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      cursor: pointer; transition: transform .3s, box-shadow .3s;
    }
    .surgery-card:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(0,0,0,0.15); }
    .surgery-card h3 { margin: 0 0 8px; color: #333; }
    .surgery-card p { margin: 4px 0; color: #666; font-size: 14px; }

    .rating-badge {
      display: inline-block; padding: 4px 8px; border-radius: 4px;
      font-size: 12px; font-weight: 700; margin-top: 10px;
      background: #e9ecef; color: #333;
    }
    .rating-outstanding { background: #4CAF50; color: white; }
    .rating-good { background: #8BC34A; color: white; }
    .rating-requires-improvement { background: #FF9800; color: white; }
    .rating-inadequate { background: #f44336; color: white; }

    .modal {
      display: none; position: fixed; z-index: 1000; inset: 0;
      background: rgba(0,0,0,0.5); animation: fadeIn .2s;
    }
    @keyframes fadeIn { from {opacity:0} to {opacity:1} }
    .modal-content {
      background: white; margin: 50px auto; padding: 30px; width: 90%;
      max-width: 1000px; max-height: 80vh; overflow-y: auto; border-radius: 12px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }
    .modal-header {
      display: flex; justify-content: space-between; align-items: center;
      margin-bottom: 16px; padding-bottom: 12px; border-bottom: 2px solid #f0f0f0;
    }
    .close-btn { background: none; border: none; font-size: 30px; cursor: pointer; color: #999; }

    .fetch-details-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white; border: none; padding: 12px 24px; border-radius: 6px;
      font-size: 16px; cursor: pointer; transition: transform .15s;
    }
    .fetch-details-btn:hover { transform: scale(1.03); }
    .fetch-details-btn:disabled { opacity: .5; cursor: not-allowed; }

    .loading { text-align: center; padding: 20px; color: #666; }
    .spinner {
      border: 3px solid #f3f3f3; border-top: 3px solid #667eea; border-radius: 50%;
      width: 40px; height: 40px; animation: spin 1s linear infinite; margin: 20px auto;
    }
    @keyframes spin { to { transform: rotate(360deg); } }
    .error { background: #fee; color: #a40000; padding: 12px 14px; border-radius: 8px; }

    /* Interactive details/accordion */
    details { background: #fff; border: 1px solid #e6e6e6; border-radius: 8px; margin: 10px 0; overflow: hidden; }
    details > summary {
      list-style: none; cursor: pointer; padding: 12px 14px; font-weight: 600; color: #333; outline: none;
    }
    details > summary::-webkit-details-marker { display: none; }
    details[open] > summary { border-bottom: 1px solid #eee; }
    .section-body { padding: 12px 14px; }

    .api-toolbar { display: flex; gap: 8px; justify-content: flex-end; align-items: center; margin-bottom: 10px; }
    .btn {
      background: #e9ecef; border: 1px solid #dee2e6; color: #333;
      border-radius: 6px; padding: 6px 10px; font-size: 12px; cursor: pointer;
    }
    .btn:hover { background: #dee2e6; }
    .btn.primary { background: #28a745; color: #fff; border-color: #28a745; }
    .btn.primary:hover { filter: brightness(.95); }
    .small { font-size: 12px; color: #666; }

    /* Tree view */
    .tree { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; font-size: 13px; }
    .node { padding-left: 14px; border-left: 2px solid #f0f0f0; margin: 6px 0 6px 6px; }
    .node-header { display: flex; align-items: center; gap: 8px; }
    .node-key { font-weight: 600; color: #333; }
    .node-type { font-size: 11px; padding: 2px 6px; border-radius: 999px; background: #f1f3f5; color: #555; }
    .node-value { white-space: pre-wrap; word-wrap: break-word; color: #1f2937; }
    .null { color: #6b7280; font-style: italic; }
    .boolean { color: #0d9488; }
    .number { color: #7c3aed; }
    .string { color: #1d4ed8; }
    .controls { display:flex; gap: 8px; align-items:center; }
    .filter-wrap { display:flex; align-items:center; gap:8px; margin-left:auto; }
    .filter-input {
      border: 1px solid #ccc; padding: 6px 8px; border-radius: 6px; font-size: 12px; width: 220px;
    }
    mark { background: #fff3bf; padding: 0 2px; }

    .detail-item {
      background: #f8f9fa; padding: 12px; border-radius: 6px; margin: 6px 0;
    }
    .grid-2 { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 12px; }
    .muted { color: #666; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>CQC GP Surgery Search</h1>
      <p>Search for GP surgeries and view their CQC inspection details.</p>
    </div>

    <div class="search-section">
      <input id="searchInput" class="search-input" placeholder="Search by surgery name, postcode, or location..."/>
      <div id="searchResults" class="results-grid"></div>
    </div>
  </div>

  <div id="detailsModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle">Surgery Details</h2>
        <button class="close-btn" onclick="closeModal()">&times;</button>
      </div>
      <div id="modalBody"></div>
    </div>
  </div>

  <script>
    const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';
    const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    let searchTimeout;
    let currentSurgery = null;
    document.getElementById('searchInput').addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => searchGPSurgeries(e.target.value), 300);
    });

    async function searchGPSurgeries(searchTerm) {
      const resultsDiv = document.getElementById('searchResults');
      if (!searchTerm || searchTerm.length < 2) { resultsDiv.innerHTML = ''; return; }
      resultsDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Searching...</div>';
      try {
        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('*')
          .or(\`location_name.ilike.%\${searchTerm}%,postcode.ilike.%\${searchTerm}%,town_city.ilike.%\${searchTerm}%\`)
          .limit(20);
        if (error) throw error;
        if (!data || data.length === 0) { resultsDiv.innerHTML = '<div class="loading">No results found</div>'; return; }
        resultsDiv.innerHTML = data.map(s => \`
          <div class="surgery-card" onclick="showSurgeryDetails('\${s.location_id}')">
            <h3>\${s.location_name || 'Unknown Surgery'}</h3>
            <p><strong>Location ID:</strong> \${s.location_id}</p>
            \${s.address_line_1 ? \`<p>\${s.address_line_1}</p>\` : ''}
            \${s.town_city ? \`<p>\${s.town_city}</p>\` : ''}
            \${s.postcode ? \`<p><strong>\${s.postcode}</strong></p>\` : ''}
            \${s.overall_rating ? \`<span class="rating-badge rating-\${s.overall_rating.toLowerCase().replace(/\\s+/g, '-')}">\${s.overall_rating}</span>\` : ''}
          </div>\`
        ).join('');
      } catch (err) {
        resultsDiv.innerHTML = \`<div class="error">Error searching: \${err.message}</div>\`;
      }
    }

    async function showSurgeryDetails(locationId) {
      const modal = document.getElementById('detailsModal');
      const modalBody = document.getElementById('modalBody');
      const modalTitle = document.getElementById('modalTitle');
      modal.style.display = 'block';
      modalBody.innerHTML = '<div class="spinner"></div>';
      try {
        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', locationId)
          .single();
        if (error) throw error;
        currentSurgery = data;
        modalTitle.textContent = data.location_name || 'Surgery Details';
        modalBody.innerHTML = \`
          <div style="text-align:center;margin-bottom:20px;">
            <button id="fetchDetailsBtn" class="fetch-details-btn" onclick="fetchCQCDetails()">Fetch More Details from CQC API</button>
          </div>
          <div id="apiResult"></div>
          <div id="rawApiResponse" class="section-body" style="display:none;">
            <div class="api-toolbar">
              <button class="btn" onclick="toggleRawJson(this)">Hide raw JSON</button>
              <button class="btn primary" id="copyRawBtn" onclick="copyRawResponse()">Copy JSON</button>
            </div>
            <div class="api-response-content"><pre id="rawResponseContent"></pre></div>
          </div>
        \`;
      } catch (err) {
        modalBody.innerHTML = \`<div class="error">\${err.message}</div>\`;
      }
    }

    // ========= FULL COVERAGE RENDERER (renders 100% of payload) =========
    const esc = (v) => String(v).replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
    const isUrl = (s) => typeof s === 'string' && /^https?:\\/\\//i.test(s);

    function typeOf(v) {
      if (v === null) return 'null';
      if (Array.isArray(v)) return 'array';
      return typeof v;
    }

    function renderPrimitive(value) {
      const t = typeOf(value);
      if (value === null) return '<span class="node-value null">null</span>';
      if (t === 'string') {
        const safe = esc(value);
        return isUrl(value)
          ? \`<span class="node-value string"><a href="\${safe}" target="_blank" rel="noopener">\${safe}</a></span>\`
          : \`<span class="node-value string">"\${safe}"</span>\`;
      }
      if (t === 'number') return \`<span class="node-value number">\${value}</span>\`;
      if (t === 'boolean') return \`<span class="node-value boolean">\${value}</span>\`;
      return \`<span class="node-value">\${esc(String(value))}</span>\`;
    }

    function makeSummaryLabel(key, value) {
      const t = typeOf(value);
      if (t === 'array') return \`\${key} [\${value.length}]\`;
      if (t === 'object') return \`\${key} {\${Object.keys(value).length}}\`;
      return key;
    }

    function renderNode(key, value, path) {
      const t = typeOf(value);
      const kHtml = key !== null ? \`<span class="node-key">\${esc(key)}</span>\` : '';
      const typeBadge = \`<span class="node-type">\${t}</span>\`;

      if (t === 'object') {
        const keys = Object.keys(value);
        const children = keys.map(k => renderNode(k, value[k], path.concat(k))).join('');
        return \`
          <details class="node" open data-path="\${esc(path.join('.'))}" data-type="object">
            <summary class="node-header">
              \${kHtml} \${typeBadge} <span class="small">(\${keys.length} key\${keys.length===1?'':'s'})</span>
            </summary>
            <div class="section-body tree">\${children}</div>
          </details>
        \`;
      } else if (t === 'array') {
        const children = value.map((v, i) => renderNode(String(i), v, path.concat(i)));
        return \`
          <details class="node" open data-path="\${esc(path.join('.'))}" data-type="array">
            <summary class="node-header">
              \${kHtml} \${typeBadge} <span class="small">(\${value.length} item\${value.length===1?'':'s'})</span>
            </summary>
            <div class="section-body tree">\${children.join('')}</div>
          </details>
        \`;
      } else {
        return \`
          <div class="node" data-path="\${esc(path.join('.'))}" data-type="\${t}">
            <div class="node-header">\${kHtml} \${typeBadge}</div>
            <div class="node-value-wrap">\${renderPrimitive(value)}</div>
          </div>
        \`;
      }
    }

    function renderFullTree(payload) {
      // Always render root; never hide anything. 100% coverage.
      const root = renderNode('(root)', payload, ['(root)']);
      return \`
        <div class="api-toolbar">
          <div class="controls">
            <button class="btn" onclick="expandAll()">Expand all</button>
            <button class="btn" onclick="collapseAll()">Collapse all</button>
            <button class="btn" onclick="toggleRawJson(this)">Show raw JSON</button>
          </div>
          <div class="filter-wrap">
            <input id="treeFilter" class="filter-input" placeholder="Filter key/value..."
                   oninput="filterTree(this.value)" />
          </div>
        </div>
        <div class="tree" id="fullTree">\${root}</div>
      \`;
    }

    function expandAll() {
      document.querySelectorAll('#fullTree details').forEach(d => d.open = true);
    }
    function collapseAll() {
      document.querySelectorAll('#fullTree details').forEach(d => d.open = false);
    }
    function toggleRawJson(btn) {
      const raw = document.getElementById('rawApiResponse');
      if (!raw) return;
      const visible = raw.style.display !== 'none';
      raw.style.display = visible ? 'none' : 'block';
      if (btn) btn.textContent = visible ? 'Show raw JSON' : 'Hide raw JSON';
    }

    function copyRawResponse() {
      try {
        const jsonString = JSON.stringify(window.currentRawApiResponse || {}, null, 2);
        navigator.clipboard.writeText(jsonString).then(() => {
          const btn = document.getElementById('copyRawBtn');
          if (!btn) return;
          const t = btn.textContent;
          btn.textContent = 'Copied!';
          setTimeout(() => btn.textContent = t, 1500);
        });
      } catch (e) { console.error(e); }
    }

    function highlight(text, q) {
      if (!q) return esc(text);
      const re = new RegExp('(' + q.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + ')', 'ig');
      return esc(text).replace(re, '<mark>$1</mark>');
    }

    function filterTree(query) {
      const q = (query || '').trim();
      const root = document.getElementById('fullTree');
      if (!root) return;
      // Reset all nodes visible and remove previous highlights
      root.querySelectorAll('.node').forEach(n => { n.style.display = ''; });
      root.querySelectorAll('.node-key').forEach(k => { k.innerHTML = esc(k.textContent); });
      root.querySelectorAll('.node-value').forEach(v => { v.innerHTML = esc(v.textContent); });

      if (!q) return;

      // Hide nodes that do not match in key or value text; keep ancestors of matches visible
      const nodes = Array.from(root.querySelectorAll('.node'));
      const matches = new Set();

      nodes.forEach(n => {
        const text = n.textContent || '';
        if (text.toLowerCase().includes(q.toLowerCase())) {
          matches.add(n);
          // bubble up to keep parents visible
          let p = n.parentElement;
          while (p && p !== root) {
            if (p.classList && p.classList.contains('node')) matches.add(p);
            p = p.parentElement;
          }
        }
      });

      nodes.forEach(n => {
        if (!matches.has(n)) n.style.display = 'none';
      });

      // Open all matched branches
      root.querySelectorAll('details').forEach(d => { if (matches.has(d)) d.open = true; });

      // Highlight in keys/values
      root.querySelectorAll('.node-key').forEach(k => k.innerHTML = highlight(k.textContent, q));
      root.querySelectorAll('.node-value').forEach(v => v.innerHTML = highlight(v.textContent, q));
    }

    // ===== Optional "nice summary" (adds context but not required for 100% coverage) =====
    function safeDate(s) {
      if (!s) return '';
      const d = new Date(s);
      return isNaN(d.getTime()) ? String(s) : d.toLocaleDateString('en-GB', {year:'numeric',month:'long',day:'numeric'});
    }
    function ratingToClass(r) {
      if (!r) return 'rating-badge';
      return 'rating-badge rating-' + String(r).toLowerCase().replace(/\\s+/g, '-');
    }
    function renderSummary(api) {
      const success = !!api?.success;
      const msg = api?.message || '';
      const updateType = api?.updateType || '';
      const loc = api?.data?.location;
      const prov = api?.data?.provider;

      let top = '<div class="grid-2">';
      top += \`<div class="detail-item"><strong>Status</strong><div>\${success ? '✅ Success' : '⚠️'}</div></div>\`;
      top += \`<div class="detail-item"><strong>Update Type</strong><div>\${esc(updateType) || '—'}</div></div>\`;
      top += \`<div class="detail-item" style="grid-column:1/-1;"><strong>Message</strong><div>\${esc(msg) || '—'}</div></div>\`;
      top += '</div>';

      let locBlock = '';
      if (loc) {
        const overall = loc?.currentRatings?.overall;
        locBlock += '<div class="detail-item"><strong>Location</strong><div>' + esc(loc.name || '—') + '</div>';
        if (overall?.rating) locBlock += \`<div style="margin-top:6px;">Overall: <span class="\${ratingToClass(overall.rating)}">\${esc(overall.rating)}</span></div>\`;
        locBlock += '</div>';
      }

      let provBlock = '';
      if (prov) {
        provBlock += '<div class="detail-item"><strong>Provider</strong><div>' + esc(prov.name || '—') + '</div></div>';
      }

      return \`
        <details open>
          <summary>Summary</summary>
          <div class="section-body">
            \${top}
            <div class="grid-2" style="margin-top:10px;">
              \${locBlock}
              \${provBlock}
            </div>
          </div>
        </details>
      \`;
    }

    async function fetchCQCDetails() {
      const btn = document.getElementById('fetchDetailsBtn');
      const resultDiv = document.getElementById('apiResult');
      btn.disabled = true; btn.textContent = 'Fetching from CQC...';
      resultDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Fetching from CQC API...</div>';
      try {
        const { data, error } = await supabase.functions.invoke('fetch-cqc-details', {
          body: { location_id: currentSurgery.location_id, provider_id: currentSurgery.provider_id }
        });
        if (error) throw error;

        window.currentRawApiResponse = data;
        const rawDiv = document.getElementById('rawApiResponse');
        const rawPre = document.getElementById('rawResponseContent');
        rawPre.textContent = JSON.stringify(data, null, 2);
        rawDiv.style.display = 'none'; // hidden by default; toggle available

        // Render: a concise summary + the FULL tree (100% coverage)
        const summaryHtml = renderSummary(data);
        const fullHtml = renderFullTree(data);
        resultDiv.innerHTML = summaryHtml + fullHtml;
      } catch (err) {
        window.currentRawApiResponse = { error: err.message, stack: err.stack };
        const rawDiv = document.getElementById('rawApiResponse');
        const rawPre = document.getElementById('rawResponseContent');
        rawPre.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
        rawDiv.style.display = 'block';
        resultDiv.innerHTML = '<div class="error">' + esc(err.message || String(err)) + '</div>';
      } finally {
        btn.disabled = false; btn.textContent = 'Fetch More Details from CQC API';
      }
    }

    function closeModal(){ document.getElementById('detailsModal').style.display = 'none'; }
    window.onclick = function(e){ const m = document.getElementById('detailsModal'); if (e.target === m) m.style.display = 'none'; };
  </script>
</body>
</html>
