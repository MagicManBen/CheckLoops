<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CheckLoop — Staffing Calendar</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://img.icons8.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;900&display=swap" rel="stylesheet">
  <script src="config.js"></script>
  <link rel="stylesheet" href="staff.css">
  <style>
    /* Page theme aligned with my-holidays */
    .filters {
      display: flex; gap: 10px; flex-wrap: wrap; align-items: center;
      margin: 10px 0 6px 0;
    }
    .filter-chip {
      padding: 8px 12px; border-radius: 999px; font-weight: 700; font-size: 12px;
      border: 1px solid var(--border-color); background: rgba(255,255,255,0.06); color: var(--white);
      cursor: pointer; user-select: none;
    }
    .filter-chip.active { background: linear-gradient(135deg, #4338ca, #3b82f6); border-color: transparent; }
    .calendar-grid {
      display: grid; grid-template-columns: 220px repeat(7, 1fr); gap: 8px; margin-top: 12px;
    }
    .cal-header { position: sticky; top: 0; z-index: 2; background: rgba(255,255,255,0.06); border:1px solid var(--border-color); border-radius: 10px; padding: 10px; text-align:center; font-weight:800; }
    .cal-cell { background: rgba(255,255,255,0.05); border:1px solid var(--border-color); border-radius: 10px; min-height: 74px; padding: 8px; position: relative; overflow: hidden; }
    .person-cell { display:flex; align-items:center; gap:10px; background: rgba(255,255,255,0.06); border:1px solid var(--border-color); border-radius: 10px; padding:8px; }
    .person-avatar { width:36px; height:36px; border-radius:50%; background:#fff; background-size:cover; background-position:center; box-shadow:0 4px 10px rgba(2,6,23,.10); border:1px solid var(--border-color); }
    .person-name { font-weight:800; color:var(--white); }
    .badge { position:absolute; right:8px; top:8px; padding:4px 8px; border-radius:999px; font-size:11px; font-weight:800; }
    .badge.in { background: rgba(34,197,94,.18); color:#86efac; border:1px solid rgba(34,197,94,.35); }
    .badge.off { background: rgba(239,68,68,.18); color:#fca5a5; border:1px solid rgba(239,68,68,.35); }
    .badge.holiday { background: rgba(59,130,246,.18); color:#93c5fd; border:1px solid rgba(59,130,246,.35); }
    .day-label { font-size:12px; color:var(--muted); font-weight:700; }
    .day-num { font-weight:900; color:var(--white); }
    .legend { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
    .legend .chip { padding:6px 10px; border-radius:999px; font-size:12px; font-weight:800; border:1px solid var(--border-color); background: rgba(255,255,255,0.06); }
    .legend .in { background: rgba(34,197,94,.18); border-color: rgba(34,197,94,.35); color:#86efac; }
    .legend .off { background: rgba(239,68,68,.18); border-color: rgba(239,68,68,.35); color:#fca5a5; }
    .legend .holiday { background: rgba(59,130,246,.18); border-color: rgba(59,130,246,.35); color:#93c5fd; }
    .team-pill { padding: 2px 8px; border-radius: 999px; font-size: 11px; background: rgba(255,255,255,0.08); border: 1px solid var(--border-color); color:#e2e8f0; }
    .team-filter { min-width: 180px; padding: 10px 12px; border-radius: 10px; border:1px solid var(--border-color); background: rgba(255,255,255,0.05); color: var(--white); }
    .week-switch { display:flex; gap:8px; align-items:center; }
    .week-btn { padding:8px 12px; border-radius:10px; border:1px solid var(--border-color); background: rgba(255,255,255,0.06); color:var(--white); font-weight:800; cursor:pointer; }
  </style>
</head>
<body>
  <div class="bg"><div class="wave"></div><div class="wave wave2"></div></div>
  <div class="mesh"><div class="m1"></div><div class="m2"></div><div class="m3"></div></div>
  <main class="content">
    <div class="topbar panel" style="position:relative;">
      <div class="halo"></div>
      <div class="nav seg-nav"></div>
      <div class="spacer"></div>
      <div class="pill" id="site-pill">Site: —</div>
      <div class="pill" id="email-pill">—</div>
      <div class="pill" id="role-pill">—</div>
      <button class="btn" id="logout-btn">Sign Out</button>
    </div>

    <section class="panel g-12" style="margin:0; position:relative; overflow:hidden;">
      <div class="halo"></div>
      <div class="hero" style="margin-bottom: 12px; display:flex; align-items:center; gap:14px;">
        <div class="illus-circle" style="width:56px;height:56px; display:grid; place-items:center;"><img src="https://img.icons8.com/fluency/48/calendar.png" alt="Calendar" style="width:36px;height:36px;"/></div>
        <div>
          <div class="h1" style="font-size:28px;">Staffing Calendar</div>
          <div class="subtitle">See who is in, off, or on holiday</div>
        </div>
        <div class="spacer"></div>
        <div class="week-switch">
          <button id="prev-week" class="week-btn">← Previous</button>
          <div id="week-label" class="pill">—</div>
          <button id="next-week" class="week-btn">Next →</button>
        </div>
      </div>

      <div class="panel" style="margin-top: 6px;">
        <div class="panel-header" style="align-items:center; gap:10px; flex-wrap:wrap;">
          <div class="legend">
            <span class="chip in">In</span>
            <span class="chip off">Off</span>
            <span class="chip holiday">Holiday</span>
          </div>
          <div class="spacer"></div>
          <select id="team-filter" class="team-filter" aria-label="Filter by team">
            <option value="">All teams</option>
          </select>
          <div id="status-filters" class="filters" aria-label="Filter by status">
            <button class="filter-chip active" data-status="in" title="Show people who are in">In</button>
            <button class="filter-chip active" data-status="off" title="Show people who are off">Off</button>
            <button class="filter-chip active" data-status="holiday" title="Show people on holiday">Holiday</button>
          </div>
          <div class="filters" id="people-filters" aria-label="Filter by people"></div>
        </div>

        <div id="calendar" style="margin-top: 10px;">
          <!-- Grid renders here -->
        </div>
      </div>
    </section>

    <div class="muted" style="text-align:center; font-size:12px; padding:10px 0;">© CheckLoop • Staff</div>
  </main>

  <script type="module">
    import { initSupabase, requireStaffSession, getSiteText, setTopbar, handleAuthState, navActivate, attachLogout } from './staff-common.js';

    function startOfWeek(d){ const c=new Date(d); const day=c.getDay(); c.setDate(c.getDate()-day); c.setHours(0,0,0,0); return c; }
    function endOfWeek(d){ const s=startOfWeek(d); const e=new Date(s.getTime()+6*24*60*60*1000); e.setHours(23,59,59,999); return e; }
    function fmtDay(d){ return d.toLocaleDateString(undefined,{weekday:'short', month:'short', day:'numeric'}); }

    (async function(){
      const supabase = await initSupabase();
      window.supabase = supabase;
      handleAuthState(supabase);
      navActivate('calendar');
      attachLogout(supabase);

      try{
        const { session, profileRow } = await requireStaffSession(supabase);
        const user = session.user;
        let siteId = profileRow?.site_id || user?.raw_user_meta_data?.site_id || null;
        if (!siteId) {
          const { data: meRow } = await supabase
            .from('master_users')
            .select('site_id')
            .eq('auth_user_id', user.id)
            .single();
          siteId = meRow?.site_id || null;
        }
        setTopbar({ siteText: await getSiteText(supabase, siteId), email: user.email, role: (profileRow?.role || 'Staff') });

        // Load teams
        const { data: teams } = await supabase.from('teams').select('id,name').eq('site_id', siteId);
        const teamSel = document.getElementById('team-filter');
        (teams||[]).forEach(t=>{ const o=document.createElement('option'); o.value=String(t.id); o.textContent=t.name; teamSel.appendChild(o); });

        // Build staff list by site using master_users only (master_users table not required)
        const { data: muRows } = await supabase
          .from('master_users')
          .select(`
            auth_user_id, full_name, email, site_id, role, team_id, team_name, avatar_url, is_gp,
            monday_hours, tuesday_hours, wednesday_hours, thursday_hours, friday_hours, saturday_hours, sunday_hours,
            monday_sessions, tuesday_sessions, wednesday_sessions, thursday_sessions, friday_sessions, saturday_sessions, sunday_sessions
          `)
          .eq('site_id', siteId);

        const people = (muRows||[]).map((m, idx)=>({
          id: m.auth_user_id,
          key: String(m.auth_user_id || m.email || m.full_name || `user-${idx}`),
          name: m.full_name || m.email || 'Unknown',
          email: m.email,
          teamId: m.team_id || null,
          teamName: m.team_name || null,
          avatar: m.avatar_url || null,
          isGP: !!m.is_gp,
          wpHours: {
            0: Number(m.sunday_hours||0),
            1: Number(m.monday_hours||0),
            2: Number(m.tuesday_hours||0),
            3: Number(m.wednesday_hours||0),
            4: Number(m.thursday_hours||0),
            5: Number(m.friday_hours||0),
            6: Number(m.saturday_hours||0)
          },
          wpSessions: {
            0: Number(m.sunday_sessions||0),
            1: Number(m.monday_sessions||0),
            2: Number(m.tuesday_sessions||0),
            3: Number(m.wednesday_sessions||0),
            4: Number(m.thursday_sessions||0),
            5: Number(m.friday_sessions||0),
            6: Number(m.saturday_sessions||0)
          }
        }));

        // Build people filter chips
        const peopleFilters = document.getElementById('people-filters');
        people.forEach(p=>{
          const chip = document.createElement('button');
          chip.className = 'filter-chip active';
          chip.dataset.personKey = p.key;
          chip.textContent = p.name.split(' ')[0];
          chip.title = p.name;
          chip.addEventListener('click', ()=>{
            chip.classList.toggle('active');
            render();
          });
          peopleFilters.appendChild(chip);
        });

        // Wire status filter toggles
        document.getElementById('status-filters').addEventListener('click', (e)=>{
          const btn = e.target.closest('.filter-chip');
          if (!btn) return;
          btn.classList.toggle('active');
          // Ensure at least one status stays active
          const activeCount = document.querySelectorAll('#status-filters .filter-chip.active').length;
          if (activeCount === 0) btn.classList.add('active');
          render();
        });

        // Week state
        let cursor = startOfWeek(new Date());
        document.getElementById('prev-week').addEventListener('click', ()=>{ cursor = new Date(cursor.getTime()-7*86400000); render(); });
        document.getElementById('next-week').addEventListener('click', ()=>{ cursor = new Date(cursor.getTime()+7*86400000); render(); });

        teamSel.addEventListener('change', render);

        async function loadStatuses(fromISO, toISO){
          // Load holiday requests overlapping window
          const { data: reqs } = await supabase
            .from('4_holiday_requests')
            .select('auth_user_id,start_date,end_date,status')
            .eq('site_id', siteId)
            .in('status', ['approved','pending'])
            .lte('start_date', toISO)
            .gte('end_date', fromISO);

          const byUser = new Map();
          (reqs||[]).forEach(r=>{
            const arr = byUser.get(r.user_id) || [];
            arr.push(r);
            byUser.set(r.user_id, arr);
          });
          return byUser;
        }

        function dayKey(d){ return d.toISOString().slice(0,10); }
        function dateOnly(d){ const x=new Date(d); x.setHours(0,0,0,0); return x; }

        async function render(){
          const weekStart = startOfWeek(cursor);
          const weekEnd   = endOfWeek(cursor);
          const fromISO = weekStart.toISOString().slice(0,10);
          const toISO   = weekEnd.toISOString().slice(0,10);
          document.getElementById('week-label').textContent = `${fmtDay(weekStart)} — ${fmtDay(weekEnd)}`;

          // Active people filter
          const activeKeys = new Set(Array.from(document.querySelectorAll('#people-filters .filter-chip.active'))
            .map(c=>c.dataset.personKey));

          // Team filter
          const teamFilterVal = teamSel.value;

          const statusesByUser = await loadStatuses(fromISO, toISO);

          const days = Array.from({length:7}, (_,i)=> new Date(weekStart.getTime()+i*86400000));

          // Selected statuses
          const selectedStatuses = new Set(Array.from(document.querySelectorAll('#status-filters .filter-chip.active')).map(b=>b.dataset.status));

          // Helper to compute daily status for a user/day
          function statusFor(p, userReqs, d){
            const day = dateOnly(d);
            const inHoliday = (userReqs||[]).some(r=>{
              const a = dateOnly(r.start_date);
              const b = dateOnly(r.end_date);
              return a <= day && day <= b;
            });
            if (inHoliday) return 'holiday';
            const wd = d.getDay();
            const hasHours = Number(p.wpHours?.[wd]||0) > 0;
            const hasSessions = Number(p.wpSessions?.[wd]||0) > 0;
            return (hasHours || hasSessions) ? 'in' : 'off';
          }

          // Compute visibility considering team, people and status filters
          const visiblePeople = people.filter(p => {
            if (activeKeys.size && !activeKeys.has(p.key)) return false;
            if (teamFilterVal && String(p.teamId||'') !== teamFilterVal) return false;
            const userReqs = statusesByUser.get(p.id) || [];
            // If all statuses are selected, no need to check
            if (selectedStatuses.size >= 3) return true;
            return days.some(d => selectedStatuses.has(statusFor(p, userReqs, d)));
          });

          // Build grid
          const container = document.getElementById('calendar');
          const grid = document.createElement('div');
          grid.className = 'calendar-grid';

          // Header row
          const hCorner = document.createElement('div'); hCorner.className = 'cal-header'; hCorner.textContent = 'Staff'; grid.appendChild(hCorner);
          days.forEach(d=>{
            const h = document.createElement('div');
            h.className = 'cal-header';
            h.innerHTML = `<div class="day-label">${d.toLocaleDateString(undefined,{ weekday:'short'})}</div><div class="day-num">${d.getDate()}</div>`;
            grid.appendChild(h);
          });

          // Rows per person
          visiblePeople.forEach(p=>{
            const personCol = document.createElement('div');
            personCol.className = 'person-cell';
            personCol.innerHTML = `
              <div class="person-avatar" style="background-image:url('${p.avatar || ''}')">${p.avatar ? '' : (p.name||'?').charAt(0).toUpperCase()}</div>
              <div style="display:flex; flex-direction:column; gap:2px;">
                <div class="person-name">${p.name}</div>
                ${p.teamName ? `<div class="team-pill">${p.teamName}</div>` : ''}
              </div>
            `;
            grid.appendChild(personCol);

            const userReqs = statusesByUser.get(p.id) || [];

            days.forEach(d=>{
              const cell = document.createElement('div');
              cell.className = 'cal-cell';
              const st = statusFor(p, userReqs, d);
              const b = document.createElement('div');
              b.className = `badge ${st}`;
              b.textContent = st.charAt(0).toUpperCase()+st.slice(1);
              cell.appendChild(b);
              grid.appendChild(cell);
            });
          });

          container.innerHTML = '';
          container.appendChild(grid);
        }

        await render();
      }catch(e){
        console.error(e);
        if (String(e.message).includes('NO_SESSION') || String(e.message).includes('NOT_STAFF')) {
          window.location.replace('home.html');
        }
      }
    })();
  </script>

  <script>
    (function(){
      function i8(name, opts = {}) {
        var base  = 'https://img.icons8.com';
        var style = opts.style || 'cute-color';
        var size  = opts.size  || 48;
        var path  = [style, String(size), encodeURIComponent(name) + '.png'].join('/');
        return base + '/' + path;
      }
      function setIcon(el){
        var name  = el.getAttribute('data-i8');
        var size  = el.getAttribute('data-i8-size');
        var style = el.getAttribute('data-i8-style') || 'fluency';
        var fallback = (el.getAttribute('data-i8-fallback') || '').toLowerCase();
        if (fallback === 'auto') {
          var stylesToTry = [style, 'fluency', 'color'];
          var idx = 0;
          function tryNext(){
            if (idx >= stylesToTry.length) { el.onerror = null; return; }
            var url = i8(name, {style: stylesToTry[idx++], size: size ? parseInt(size,10) : undefined});
            if (el.src !== url) el.src = url; else tryNext();
          }
          el.onerror = tryNext; tryNext();
        } else {
          el.src = i8(name, {style: style, size: size ? parseInt(size,10) : undefined});
        }
      }
      function wireIcons(){ document.querySelectorAll('img[data-i8]').forEach(setIcon); }
      if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', wireIcons); else wireIcons();
      window.i8 = i8; window.setIcon = setIcon; window.wireIcons = wireIcons;
    })();
  </script>

  <script src="debug-console.js"></script>
</body>
</html>
