// Fix for holiday display issue in admin dashboard
// This script calculates the total holidays used from the 4_holiday_requests table
// and updates the staff entitlement cards correctly

console.log('Holiday Display Fix loaded - v1.0');

// Patch the loadStaffEntitlementCards function to include holiday usage calculation
document.addEventListener('DOMContentLoaded', function() {
  // Store the original function if it exists
  const originalLoadFunc = window.loadStaffEntitlementCards;
  
  if (typeof originalLoadFunc !== 'function') {
    console.error('Holiday Fix: Could not find loadStaffEntitlementCards function');
    return;
  }
  
  // Override with our enhanced version
  window.loadStaffEntitlementCards = async function() {
    console.log('Enhanced loadStaffEntitlementCards called (with holiday calculation)');
    
    // Load the holiday usage data first
    const holidayUsageMap = await loadHolidayUsage();
    
    // Store the map in a global variable for debugging
    window.holidayUsageMap = holidayUsageMap;
    console.log('Holiday usage data loaded:', holidayUsageMap);
    
    // Call the original function, which will use our hook
    return originalLoadFunc.apply(this, arguments);
  };
  
  // Hook into the card rendering process
  const originalProfileMap = new WeakMap();
  
  // Override the profile object's property access
  Object.defineProperty(Object.prototype, 'holidays_used_hours', {
    get: function() {
      // Only intercept for profile objects
      if (this.id && this.auth_user_id && window.holidayUsageMap) {
        const usage = window.holidayUsageMap[this.auth_user_id];
        if (usage) {
          console.log(`Providing holiday hours for ${this.full_name}: ${usage.hours}`);
          return usage.hours;
        }
      }
      return this._holidays_used_hours || 0;
    },
    set: function(val) {
      this._holidays_used_hours = val;
    },
    configurable: true
  });
  
  Object.defineProperty(Object.prototype, 'holidays_used_sessions', {
    get: function() {
      // Only intercept for profile objects
      if (this.id && this.auth_user_id && window.holidayUsageMap) {
        const usage = window.holidayUsageMap[this.auth_user_id];
        if (usage) {
          console.log(`Providing holiday sessions for ${this.full_name}: ${usage.sessions}`);
          return usage.sessions;
        }
      }
      return this._holidays_used_sessions || 0;
    },
    set: function(val) {
      this._holidays_used_sessions = val;
    },
    configurable: true
  });
  
  console.log('Holiday fix applied: Enhanced property accessors for holidays_used_hours and holidays_used_sessions');
});

// Function to load holiday usage data from the 4_holiday_requests table
async function loadHolidayUsage() {
  if (!window.supabase) {
    console.error('Holiday Fix: Supabase not available');
    return {};
  }
  
  try {
    console.log('Loading holiday usage from 4_holiday_requests table...');
    
    // Get approved holiday requests
    const { data: holidays, error } = await window.supabase
      .from('4_holiday_requests')
      .select('user_id, start_date, end_date, booking_type, hours_per_day, sessions_per_day, status')
      .eq('status', 'approved');
      
    if (error) {
      console.error('Error loading holiday requests:', error);
      return {};
    }
    
    if (!holidays || holidays.length === 0) {
      console.log('No approved holidays found in database');
      return {};
    }
    
    console.log(`Found ${holidays.length} approved holiday requests`);
    
    // Calculate total usage per user
    const usageMap = {};
    
    holidays.forEach(holiday => {
      const userId = holiday.user_id;
      if (!userId) return;
      
      // Initialize user in map if not exists
      if (!usageMap[userId]) {
        usageMap[userId] = { hours: 0, sessions: 0 };
      }
      
      // Calculate days (end date - start date + 1)
      const startDate = new Date(holiday.start_date);
      const endDate = new Date(holiday.end_date);
      const days = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
      
      // Add to totals based on booking type
      const hoursPerDay = parseFloat(holiday.hours_per_day || 0);
      const sessionsPerDay = parseFloat(holiday.sessions_per_day || 0);
      
      if (hoursPerDay > 0) {
        usageMap[userId].hours += hoursPerDay * days;
      }
      
      if (sessionsPerDay > 0) {
        usageMap[userId].sessions += sessionsPerDay * days;
      }
    });
    
    console.log('Holiday usage calculated:', usageMap);
    return usageMap;
  } catch (err) {
    console.error('Error calculating holiday usage:', err);
    return {};
  }
}

// Force refresh holiday display if loaded after page init
setTimeout(() => {
  if (document.querySelector('#entitlement-management.view.active') && 
      typeof loadStaffEntitlementCards === 'function') {
    console.log('Holiday fix: Force refreshing entitlement cards');
    loadStaffEntitlementCards();
  }
}, 2000);