import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { destination, avatarUrl, requestId } = await req.json()

    // Get the OpenAI API key from environment variables
    const openaiApiKey = Deno.env.get('CheckLoopsAI')
    if (!openaiApiKey) {
      throw new Error('CheckLoopsAI key not configured')
    }

    // Parse destination from the reason text
    let location = destination || 'tropical paradise'
    if (destination) {
      // Extract location from common patterns
      const patterns = [
        /(?:going to|trip to|visiting|heading to|flying to)\s+([^,\.]+)/i,
        /([^,\.]+)\s+(?:vacation|holiday|trip|travel)/i,
        /(?:holiday|vacation|trip)\s+(?:in|at|to)\s+([^,\.]+)/i
      ]

      for (const pattern of patterns) {
        const match = destination.match(pattern)
        if (match && match[1]) {
          location = match[1].trim()
          break
        }
      }

      // If no pattern matched but destination has text, use it as-is
      if (location === destination && destination.length > 30) {
        location = destination.split(' ').slice(0, 3).join(' ')
      }
    }

    // Extract avatar seed if it's a Dicebear URL
    const seedMatch = avatarUrl?.match(/seed=([^&]+)/)
    const avatarSeed = seedMatch ? seedMatch[1] : 'person'

    // ULTRA-SIMPLIFIED: Maximum emphasis on flat, minimal Dicebear style
    const prompt = `Minimalist flat vector avatar illustration. STRICT REQUIREMENTS:

    STYLE (MOST IMPORTANT):
    - EXACTLY like Dicebear.com Adventurer avatars
    - 2D flat design, NO depth, NO 3D
    - Only solid flat colors: #${Math.random() > 0.5 ? 'F4D1AE' : 'F9C9B6'} (skin), #8B7355 (brown hair), #000000 (sunglasses)
    - Simple geometric shapes ONLY
    - NO gradients, NO shadows, NO textures
    - NO realistic features

    CHARACTER:
    - Round/oval head like Dicebear
    - Brown geometric hair (angular shapes)
    - Black rectangle sunglasses
    - Simple line for mouth
    - Minimal geometric body

    VACATION SETTING:
    - ${location} background in same flat style
    - Maximum 3-4 colors total
    - Geometric shapes only

    Reference: Dicebear.com adventurer style, seed: ${avatarSeed}

    OUTPUT: Must look like a Dicebear avatar, not a cartoon. Ultra-minimal, flat, geometric.`

    console.log('Generating with simplified Dicebear-style prompt')

    // Use DALL-E-2 as it might be better for simple, flat styles
    const openaiResponse = await fetch('https://api.openai.com/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "dall-e-2",        // DALL-E-2 often better for simple styles
        prompt: prompt,
        n: 1,
        size: "512x512"           // Smaller size sufficient for avatars
      })
    })

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text()
      console.error('OpenAI API error:', errorText)
      throw new Error(`OpenAI API error: ${openaiResponse.status}`)
    }

    const openaiData = await openaiResponse.json()

    if (!openaiData.data || !openaiData.data[0] || !openaiData.data[0].url) {
      throw new Error('No image generated by OpenAI')
    }

    const imageUrl = openaiData.data[0].url

    // If a requestId was provided, update the database with the image URL
    if (requestId) {
      try {
        // Import Supabase client
        const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2')

        // Get Supabase configuration
        const supabaseUrl = Deno.env.get('SUPABASE_URL')
        const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

        if (supabaseUrl && supabaseServiceKey) {
          const supabase = createClient(supabaseUrl, supabaseServiceKey)

          // Update the holiday request with the generated image URL
          const { error: updateError } = await supabase
            .from('4_holiday_requests')
            .update({ holiday_image_url: imageUrl })
            .eq('id', requestId)

          if (updateError) {
            console.error('Error updating holiday request with image URL:', updateError)
          } else {
            console.log(`Successfully updated holiday request ${requestId} with image URL`)
          }
        }
      } catch (dbError) {
        console.error('Error updating database:', dbError)
        // Continue even if DB update fails - we still return the image URL
      }
    }

    // Cost for DALL-E-2 512x512
    const costEstimate = {
      dalle2: "$0.016",
      total_per_request: "$0.016"
    }

    return new Response(
      JSON.stringify({
        imageUrl: imageUrl,
        prompt: prompt,
        location: location,
        avatarSeed: avatarSeed,
        costEstimate: costEstimate
      }),
      {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200,
      }
    )

  } catch (error) {
    console.error('Error in generate-holiday-avatar function:', error)

    return new Response(
      JSON.stringify({
        error: error.message || 'Failed to generate holiday avatar',
        details: error.toString()
      }),
      {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500,
      }
    )
  }
})