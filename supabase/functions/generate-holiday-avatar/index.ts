import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { destination, avatarUrl } = await req.json()

    // Get the OpenAI API key from environment variables
    const openaiApiKey = Deno.env.get('CheckLoopsAI')
    if (!openaiApiKey) {
      throw new Error('CheckLoopsAI key not configured')
    }

    // Create a prompt for DALL-E to generate a holiday avatar
    const prompt = `Create a fun, cartoon-style image of a person on holiday in ${destination}. The person should be happy and relaxed, wearing holiday attire appropriate for ${destination}. Include recognizable landmarks or scenery from ${destination} in the background. Style: friendly, colorful, vacation vibes, digital illustration.`

    // Call OpenAI DALL-E API
    const openaiResponse = await fetch('https://api.openai.com/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: prompt,
        n: 1,
        size: "1024x1024",
        quality: "standard",
        style: "vivid"
      })
    })

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text()
      console.error('OpenAI API error:', errorText)
      throw new Error(`OpenAI API error: ${openaiResponse.status}`)
    }

    const openaiData = await openaiResponse.json()
    
    if (!openaiData.data || !openaiData.data[0] || !openaiData.data[0].url) {
      throw new Error('No image generated by OpenAI')
    }

    const imageUrl = openaiData.data[0].url

    return new Response(
      JSON.stringify({ 
        imageUrl: imageUrl,
        prompt: prompt 
      }),
      {
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        },
        status: 200,
      }
    )

  } catch (error) {
    console.error('Error in generate-holiday-avatar function:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to generate holiday avatar',
        details: error.toString()
      }),
      {
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        },
        status: 500,
      }
    )
  }
})