<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NHS + CQC Integration Test</title>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.45.4/dist/umd/supabase.js"></script>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, sans-serif;
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h1 { margin-bottom: 20px; color: #003087; }
    .info-box {
      background: #f0f4f8;
      border-left: 4px solid #003087;
      padding: 15px;
      margin: 20px 0;
    }
    button {
      background: #005eb8;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      margin: 5px;
    }
    button:hover { background: #003087; }
    button:disabled { background: #ccc; cursor: not-allowed; }
    input, select {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin: 5px;
      width: 300px;
    }
    .results {
      background: #fff;
      border: 1px solid #ddd;
      padding: 20px;
      margin-top: 20px;
      border-radius: 4px;
      overflow-x: auto;
    }
    .tabs {
      display: flex;
      margin-top: 20px;
      border-bottom: 1px solid #ddd;
    }
    .tab {
      padding: 10px 20px;
      cursor: pointer;
      background: #f5f5f5;
      margin-right: 5px;
      border: 1px solid #ddd;
      border-bottom: none;
      border-radius: 4px 4px 0 0;
    }
    .tab.active {
      background: #fff;
      border-bottom: 1px solid #fff;
      margin-bottom: -1px;
    }
    .tab-content {
      display: none;
      padding: 20px;
      background: #fff;
      border: 1px solid #ddd;
      border-top: none;
    }
    .tab-content.active { display: block; }
    pre {
      background: #f5f5f5;
      padding: 10px;
      border-radius: 4px;
      overflow-x: auto;
      white-space: pre-wrap;
    }
    .log-entry {
      padding: 5px;
      border-bottom: 1px solid #eee;
      font-family: monospace;
    }
    .log-error { color: #d32f2f; }
    .log-success { color: #388e3c; }
    .log-info { color: #1976d2; }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    table, th, td {
      border: 1px solid #ddd;
    }
    th, td {
      padding: 10px;
      text-align: left;
    }
    th { background: #f5f5f5; }
  </style>
</head>
<body>
  <h1>NHS + CQC Integration Test</h1>
  
  <div class="info-box">
    <p>This tool tests the fixed NHS + CQC integration. It implements the sequential flow:</p>
    <ol>
      <li>Fetch CQC data only</li>
      <li>Save to database</li>
      <li>Extract ODS code</li>
      <li>Fetch NHS ODS data using the ODS code</li>
      <li>Save to database</li>
      <li>Verify both raw JSON and flattened fields</li>
    </ol>
  </div>
  
  <div>
    <h3>Test Options</h3>
    <div style="margin: 10px 0;">
      <select id="testType">
        <option value="location">Test with CQC Location ID</option>
        <option value="ods">Test with ODS Code</option>
        <option value="search">Search by Name</option>
      </select>
    </div>
    
    <div id="locationInput" style="margin: 10px 0;">
      <input type="text" id="locationIdInput" placeholder="CQC Location ID (e.g., 1-10288346453)">
      <button id="runLocationTest">Run Test</button>
    </div>
    
    <div id="odsInput" style="margin: 10px 0; display: none;">
      <input type="text" id="odsCodeInput" placeholder="ODS Code (e.g., B86030)">
      <button id="runOdsTest">Run Test</button>
    </div>
    
    <div id="searchInput" style="margin: 10px 0; display: none;">
      <input type="text" id="searchNameInput" placeholder="Surgery/Practice Name">
      <button id="runSearch">Search</button>
      <div id="searchResults" style="margin-top: 10px;"></div>
    </div>
  </div>
  
  <div class="tabs">
    <div class="tab active" data-tab="log">Log</div>
    <div class="tab" data-tab="results">Results</div>
    <div class="tab" data-tab="raw">Raw Data</div>
  </div>
  
  <div class="tab-content active" data-tab-content="log">
    <div id="log"></div>
  </div>
  
  <div class="tab-content" data-tab-content="results">
    <div id="testResults"></div>
  </div>
  
  <div class="tab-content" data-tab-content="raw">
    <div id="rawData"></div>
  </div>
  
  <script>
    // Initialize Supabase client
    const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
    const SUPABASE_ANON_KEY = 'sb_publishable_wpy7lxfbI2HwvsznlWJVKg_Zx7HnAc4';
    const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    let testResults = {
      cqcPhase: null,
      odsPhase: null,
      originalRow: null,
      finalRow: null
    };
    
    // Logging function
    function log(message, type = 'info') {
      const logEl = document.getElementById('log');
      const entry = document.createElement('div');
      entry.className = `log-entry log-${type}`;
      entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      logEl.appendChild(entry);
      console.log(`[${type}]`, message);
    }
    
    // Display JSON
    function displayJson(data, elementId) {
      const el = document.getElementById(elementId);
      el.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    }
    
    // Tab switching
    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.dataset.tab;
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        document.querySelector(`.tab-content[data-tab-content="${tabId}"]`).classList.add('active');
      });
    });
    
    // Test type switching
    document.getElementById('testType').addEventListener('change', (e) => {
      const value = e.target.value;
      document.getElementById('locationInput').style.display = value === 'location' ? 'block' : 'none';
      document.getElementById('odsInput').style.display = value === 'ods' ? 'block' : 'none';
      document.getElementById('searchInput').style.display = value === 'search' ? 'block' : 'none';
    });
    
    // Run test with location ID
    document.getElementById('runLocationTest').addEventListener('click', async () => {
      const locationId = document.getElementById('locationIdInput').value.trim();
      if (!locationId) {
        log('Please enter a CQC Location ID', 'error');
        return;
      }
      await runIntegrationTest(locationId);
    });
    
    // Run test with ODS code
    document.getElementById('runOdsTest').addEventListener('click', async () => {
      const odsCode = document.getElementById('odsCodeInput').value.trim();
      if (!odsCode) {
        log('Please enter an ODS code', 'error');
        return;
      }
      
      try {
        log(`Looking up location ID for ODS code: ${odsCode}`);
        
        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('location_id')
          .eq('ods_code', odsCode)
          .limit(1);
        
        if (error) throw error;
        
        if (data && data.length > 0) {
          const locationId = data[0].location_id;
          log(`Found location ID ${locationId} for ODS code ${odsCode}`, 'success');
          await runIntegrationTest(locationId, odsCode);
        } else {
          log(`No location found for ODS code ${odsCode}`, 'error');
        }
      } catch (e) {
        log(`Error looking up ODS code: ${e.message}`, 'error');
      }
    });
    
    // Run search
    document.getElementById('runSearch').addEventListener('click', async () => {
      const searchTerm = document.getElementById('searchNameInput').value.trim();
      if (!searchTerm) {
        log('Please enter a surgery/practice name', 'error');
        return;
      }
      
      try {
        log(`Searching for: ${searchTerm}`);
        
        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('location_id, location_name, ods_code, postcode')
          .ilike('location_name', `%${searchTerm}%`)
          .limit(10);
        
        if (error) throw error;
        
        if (data && data.length > 0) {
          log(`Found ${data.length} results`, 'success');
          
          const resultsEl = document.getElementById('searchResults');
          resultsEl.innerHTML = `
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>ODS Code</th>
                  <th>Postcode</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                ${data.map(item => `
                  <tr>
                    <td>${item.location_name || '-'}</td>
                    <td>${item.ods_code || '-'}</td>
                    <td>${item.postcode || '-'}</td>
                    <td>
                      <button onclick="runIntegrationTest('${item.location_id}', '${item.ods_code || ''}')">
                        Test
                      </button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          `;
        } else {
          log(`No results found for: ${searchTerm}`, 'error');
          document.getElementById('searchResults').innerHTML = 'No results found';
        }
      } catch (e) {
        log(`Search error: ${e.message}`, 'error');
      }
    });
    
    // Main test function
    async function runIntegrationTest(locationId, odsCode = null) {
      try {
        log(`Starting integration test for location ID: ${locationId}`);
        
        // Reset test results
        testResults = {
          cqcPhase: null,
          odsPhase: null,
          originalRow: null,
          finalRow: null
        };
        
        // Display active tab as log
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        document.querySelector('.tab[data-tab="log"]').classList.add('active');
        document.querySelector('.tab-content[data-tab-content="log"]').classList.add('active');
        
        // Get original database state
        log('Fetching original database state...');
        const { data: originalRow, error: originalError } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', locationId)
          .single();
          
        if (originalError) {
          log(`Error fetching original state: ${originalError.message}`, 'error');
        } else {
          testResults.originalRow = originalRow;
          log('Original state loaded', 'success');
          log(`Location name: ${originalRow.location_name || 'Unknown'}`);
          log(`Has CQC data: ${!!originalRow.location_source}`);
          log(`Has NHS data: ${!!originalRow.nhs_ods_data}`);
          
          if (originalRow.ods_code && !odsCode) {
            odsCode = originalRow.ods_code;
            log(`Using ODS code from database: ${odsCode}`);
          }
        }
        
        // Phase 1: Fetch CQC data only
        log('PHASE 1: Fetching CQC data only...');
        
        const cqcResult = await supabase.functions.invoke('fetch-nhs-data-complete', {
          body: {
            location_id: locationId,
            ods_code: odsCode,
            data_sources: ['cqc']
          }
        });
        
        testResults.cqcPhase = cqcResult.data;
        
        if (cqcResult.error) {
          log(`CQC phase error: ${cqcResult.error.message}`, 'error');
        } else {
          log(`CQC phase complete, status: ${cqcResult.data?.status}`, 'success');
          log(`Database updated: ${cqcResult.data?.database_updated}`);
          
          // Try to extract ODS code if not provided
          if (!odsCode) {
            const cqcData = cqcResult.data?.data?.cqc_data || cqcResult.data?.data || null;
            if (cqcData) {
              const extractedOds = extractOdsCodeFromCqc(cqcData);
              if (extractedOds) {
                odsCode = extractedOds;
                log(`ODS code extracted from CQC response: ${odsCode}`, 'success');
              }
            }
            
            if (!odsCode) {
              log('Checking database for updated ODS code after CQC phase');
              const { data: updatedRow } = await supabase
                .from('CQC All GPs')
                .select('ods_code')
                .eq('location_id', locationId)
                .single();
                
              if (updatedRow?.ods_code) {
                odsCode = updatedRow.ods_code;
                log(`ODS code found in database after CQC phase: ${odsCode}`, 'success');
              }
            }
          }
        }
        
        // Wait for database update
        log('Waiting for database to update...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // If no ODS code, we can't continue to phase 2
        if (!odsCode) {
          log('No ODS code available after CQC phase, cannot proceed with NHS phase', 'error');
          await finalizeTest(locationId);
          return;
        }
        
        // Phase 2: Fetch NHS ODS data
        log('PHASE 2: Fetching NHS ODS data...');
        
        const nhsResult = await supabase.functions.invoke('fetch-nhs-data-complete', {
          body: {
            location_id: locationId,
            ods_code: odsCode,
            data_sources: ['ods']
          }
        });
        
        testResults.odsPhase = nhsResult.data;
        
        if (nhsResult.error) {
          log(`NHS phase error: ${nhsResult.error.message}`, 'error');
        } else {
          log(`NHS phase complete, status: ${nhsResult.data?.status}`, 'success');
          log(`Database updated: ${nhsResult.data?.database_updated}`);
        }
        
        // Wait for database update
        log('Waiting for final database update...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Finalize test
        await finalizeTest(locationId);
        
      } catch (e) {
        log(`Test error: ${e.message}`, 'error');
        console.error(e);
      }
    }
    
    // Finalize test and display results
    async function finalizeTest(locationId) {
      try {
        // Fetch final database state
        log('Fetching final database state...');
        const { data: finalRow, error: finalError } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', locationId)
          .single();
          
        if (finalError) {
          log(`Error fetching final state: ${finalError.message}`, 'error');
        } else {
          testResults.finalRow = finalRow;
          log('Final state loaded', 'success');
          
          // Analyze changes
          const original = testResults.originalRow || {};
          const final = finalRow || {};
          
          const changes = analyzeChanges(original, final);
          
          // Log changes
          log(`Total fields changed: ${changes.changedFields.length}`);
          log(`CQC data present: ${!!final.location_source}`);
          log(`NHS data present: ${!!final.nhs_ods_data}`);
          
          // Display results
          displayResults();
          
          // Switch to results tab
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
          document.querySelector('.tab[data-tab="results"]').classList.add('active');
          document.querySelector('.tab-content[data-tab-content="results"]').classList.add('active');
        }
      } catch (e) {
        log(`Finalization error: ${e.message}`, 'error');
        console.error(e);
      }
    }
    
    // Analyze changes between original and final state
    function analyzeChanges(original, final) {
      const changes = {
        changedFields: [],
        addedFields: [],
        removedFields: []
      };
      
      const allKeys = new Set([
        ...Object.keys(original || {}),
        ...Object.keys(final || {})
      ]);
      
      allKeys.forEach(key => {
        if (!original || !(key in original)) {
          changes.addedFields.push(key);
        } else if (!final || !(key in final)) {
          changes.removedFields.push(key);
        } else if (JSON.stringify(original[key]) !== JSON.stringify(final[key])) {
          changes.changedFields.push(key);
        }
      });
      
      return changes;
    }
    
    // Display test results
    function displayResults() {
      const original = testResults.originalRow || {};
      const final = testResults.finalRow || {};
      
      const changes = analyzeChanges(original, final);
      const cqcSuccess = testResults.cqcPhase?.data_sources_fetched?.includes('cqc') || false;
      const odsSuccess = testResults.odsPhase?.data_sources_fetched?.includes('ods') || false;
      
      const resultsEl = document.getElementById('testResults');
      const rawEl = document.getElementById('rawData');
      
      // Prepare summary HTML
      resultsEl.innerHTML = `
        <h3>Test Results</h3>
        
        <h4>Summary</h4>
        <table>
          <tr>
            <th>Metric</th>
            <th>Before</th>
            <th>After</th>
          </tr>
          <tr>
            <td>Location Name</td>
            <td>${original.location_name || '-'}</td>
            <td>${final.location_name || '-'}</td>
          </tr>
          <tr>
            <td>ODS Code</td>
            <td>${original.ods_code || '-'}</td>
            <td>${final.ods_code || '-'}</td>
          </tr>
          <tr>
            <td>CQC Raw JSON</td>
            <td>${original.location_source ? '✅' : '❌'}</td>
            <td>${final.location_source ? '✅' : '❌'}</td>
          </tr>
          <tr>
            <td>NHS Raw JSON</td>
            <td>${original.nhs_ods_data ? '✅' : '❌'}</td>
            <td>${final.nhs_ods_data ? '✅' : '❌'}</td>
          </tr>
          <tr>
            <td>Phone Number</td>
            <td>${original.main_phone_number || '-'}</td>
            <td>${final.main_phone_number || '-'}</td>
          </tr>
          <tr>
            <td>Website</td>
            <td>${original.website || '-'}</td>
            <td>${final.website || '-'}</td>
          </tr>
          <tr>
            <td>Address</td>
            <td>${(original.address_line_1 || '') + ' ' + (original.postcode || '') || '-'}</td>
            <td>${(final.address_line_1 || '') + ' ' + (final.postcode || '') || '-'}</td>
          </tr>
          <tr>
            <td>Last NHS Update</td>
            <td>${original.last_nhs_update || '-'}</td>
            <td>${final.last_nhs_update || '-'}</td>
          </tr>
          <tr>
            <td>Fields Changed</td>
            <td colspan="2">${changes.changedFields.length}</td>
          </tr>
        </table>
        
        <h4>CQC Phase</h4>
        <p>Status: ${cqcSuccess ? '✅ Success' : '❌ Failed'}</p>
        <p>Database Updated: ${testResults.cqcPhase?.database_updated ? '✅ Yes' : '❌ No'}</p>
        
        <h4>NHS Phase</h4>
        <p>Status: ${odsSuccess ? '✅ Success' : '❌ Failed'}</p>
        <p>Database Updated: ${testResults.odsPhase?.database_updated ? '✅ Yes' : '❌ No'}</p>
        
        <h4>Changed Fields</h4>
        <ul>
          ${changes.changedFields.map(field => `<li>${field}</li>`).join('')}
        </ul>
      `;
      
      // Display raw data
      rawEl.innerHTML = `
        <h3>Raw Data</h3>
        <div class="tabs" id="rawTabs">
          <div class="tab active" data-raw-tab="finalState">Final DB State</div>
          <div class="tab" data-raw-tab="cqcPhase">CQC Phase</div>
          <div class="tab" data-raw-tab="odsPhase">ODS Phase</div>
        </div>
        
        <div class="tab-content active" data-raw-content="finalState">
          <pre>${JSON.stringify(final, null, 2)}</pre>
        </div>
        
        <div class="tab-content" data-raw-content="cqcPhase">
          <pre>${JSON.stringify(testResults.cqcPhase, null, 2)}</pre>
        </div>
        
        <div class="tab-content" data-raw-content="odsPhase">
          <pre>${JSON.stringify(testResults.odsPhase, null, 2)}</pre>
        </div>
      `;
      
      // Set up raw tabs
      document.querySelectorAll('#rawTabs .tab').forEach(tab => {
        tab.addEventListener('click', () => {
          const tabId = tab.dataset.rawTab;
          document.querySelectorAll('#rawTabs .tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('[data-raw-content]').forEach(c => c.classList.remove('active'));
          tab.classList.add('active');
          document.querySelector(`[data-raw-content="${tabId}"]`).classList.add('active');
        });
      });
    }
    
    // Extract ODS code from CQC data
    function extractOdsCodeFromCqc(data) {
      try {
        // Check all possible locations in the response
        const candidates = [
          data.odsCode,
          data.ods_code,
          data.location?.odsCode,
          data.location?.ods_code,
          data.provider?.odsCode,
          data.provider?.ods_code
        ].filter(Boolean);
        
        // Return the first valid ODS code
        for (const code of candidates) {
          const normalized = normalizeOdsCode(code);
          if (normalized) return normalized;
        }
      } catch (_) {}
      
      return null;
    }
    
    // Normalize ODS code format
    function normalizeOdsCode(code) {
      if (!code) return null;
      const c = String(code).trim().toUpperCase();
      // Accept typical practice/organisation codes: letters+digits, 3–8 chars
      if (/^[A-Z0-9]{3,8}$/.test(c)) return c;
      return null;
    }
    
    // Make runIntegrationTest globally available for the search results
    window.runIntegrationTest = runIntegrationTest;
  </script>
</body>
</html>