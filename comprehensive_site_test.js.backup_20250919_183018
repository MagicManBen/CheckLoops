// Comprehensive site test for CheckLoop
import { chromium } from 'playwright';
import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client for backend verification
const supabaseUrl = 'https://unveoqnlqnobufhublyw.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Test credentials
const TEST_EMAIL = 'ben.howard@stoke.nhs.uk';
const TEST_PASSWORD = 'Hello1!';
const BASE_URL = 'http://127.0.0.1:58156';

// Test report
let testReport = {
  timestamp: new Date().toISOString(),
  summary: {
    totalTests: 0,
    passed: 0,
    failed: 0,
    warnings: 0
  },
  sections: [],
  issues: []
};

// Helper function to add test result
function addTestResult(section, test, status, details = '') {
  testReport.totalTests++;
  if (status === 'pass') testReport.summary.passed++;
  else if (status === 'fail') {
    testReport.summary.failed++;
    testReport.issues.push({
      section,
      test,
      details
    });
  } else if (status === 'warning') testReport.summary.warnings++;

  const sectionObj = testReport.sections.find(s => s.name === section);
  if (sectionObj) {
    sectionObj.tests.push({ test, status, details });
  } else {
    testReport.sections.push({
      name: section,
      tests: [{ test, status, details }]
    });
  }
}

async function comprehensiveSiteTest() {
  console.log('=== COMPREHENSIVE SITE TEST STARTING ===\n');
  console.log(`Testing at: ${BASE_URL}`);
  console.log(`Time: ${new Date().toLocaleString()}\n`);

  const browser = await chromium.launch({
    headless: false,
    slowMo: 500 // Slow down for visibility
  });
  const context = await browser.newContext();
  const page = await context.newPage();

  // Enable console logging
  page.on('console', msg => {
    if (msg.type() === 'error') {
      console.log('❌ Browser Error:', msg.text());
      addTestResult('Browser Errors', msg.text(), 'fail', 'Console error detected');
    }
  });

  // Track network failures
  page.on('requestfailed', request => {
    console.log(`❌ Request failed: ${request.url()}`);
    addTestResult('Network', request.url(), 'fail', `Request failed: ${request.failure()?.errorText}`);
  });

  try {
    // ====================
    // 1. HOMEPAGE TEST
    // ====================
    console.log('📋 Testing Homepage (index.html)...\n');

    await page.goto(`${BASE_URL}/index.html`);
    await page.waitForTimeout(2000);

    // Check if login form exists
    const loginForm = await page.locator('#loginForm').isVisible().catch(() => false);
    addTestResult('Homepage', 'Login form visibility', loginForm ? 'pass' : 'fail',
      loginForm ? 'Login form is visible' : 'Login form not found');

    // Check for email and password fields
    const emailField = await page.locator('#email').isVisible().catch(() => false);
    const passwordField = await page.locator('input[type="password"]').first().isVisible().catch(() => false);
    addTestResult('Homepage', 'Login fields', emailField && passwordField ? 'pass' : 'fail');

    await page.screenshot({ path: 'test_1_homepage.png' });

    // ====================
    // 2. LOGIN TEST
    // ====================
    console.log('📋 Testing Login...\n');

    if (emailField && passwordField) {
      await page.fill('#email', TEST_EMAIL);
      await page.fill('input[type="password"]', TEST_PASSWORD);
      await page.click('button:has-text("Sign In")');
      await page.waitForTimeout(3000);

      // Check if we're redirected to home.html
      const currentUrl = page.url();
      const loginSuccess = currentUrl.includes('home.html');
      addTestResult('Authentication', 'Login', loginSuccess ? 'pass' : 'fail',
        loginSuccess ? 'Successfully logged in' : 'Login failed or no redirect');

      await page.screenshot({ path: 'test_2_after_login.png' });
    } else {
      addTestResult('Authentication', 'Login', 'fail', 'Could not find login fields');
    }

    // ====================
    // 3. HOME PAGE TEST
    // ====================
    console.log('📋 Testing Home Page...\n');

    if (!page.url().includes('home.html')) {
      await page.goto(`${BASE_URL}/home.html`);
      await page.waitForTimeout(2000);
    }

    // Check navigation buttons
    const navButtons = [
      { selector: 'button[data-section="staff"]', name: 'Staff Portal' },
      { selector: 'button[data-section="quiz"]', name: 'Staff Quiz' },
      { selector: 'button[data-section="achievements"]', name: 'Achievements' },
      { selector: 'button[data-section="myHolidays"]', name: 'My Holidays' },
      { selector: 'button[data-section="admin"]', name: 'Admin' }
    ];

    for (const nav of navButtons) {
      const isVisible = await page.locator(nav.selector).isVisible().catch(() => false);
      addTestResult('Home Navigation', nav.name, isVisible ? 'pass' : 'warning',
        isVisible ? 'Button visible' : 'Button not found');
    }

    await page.screenshot({ path: 'test_3_home_page.png' });

    // ====================
    // 4. STAFF PORTAL TEST
    // ====================
    console.log('📋 Testing Staff Portal...\n');

    await page.goto(`${BASE_URL}/staff.html`);
    await page.waitForTimeout(2000);

    // Check main staff navigation
    const staffSections = [
      'Welcome',
      'Meetings',
      'Scans',
      'Training'
    ];

    for (const section of staffSections) {
      const sectionExists = await page.locator(`text=${section}`).isVisible().catch(() => false);
      addTestResult('Staff Portal', `${section} section`, sectionExists ? 'pass' : 'fail');
    }

    await page.screenshot({ path: 'test_4_staff_portal.png' });

    // ====================
    // 5. STAFF WELCOME TEST
    // ====================
    console.log('📋 Testing Staff Welcome...\n');

    await page.goto(`${BASE_URL}/staff-welcome.html`);
    await page.waitForTimeout(2000);

    // Check onboarding elements
    const welcomeElements = [
      { selector: '#nickname', name: 'Nickname field' },
      { selector: '#role', name: 'Role dropdown' },
      { selector: '#team', name: 'Team dropdown' },
      { selector: '#workingHours', name: 'Working hours section' },
      { selector: '#avatarSelection', name: 'Avatar selection' }
    ];

    for (const element of welcomeElements) {
      const exists = await page.locator(element.selector).count() > 0;
      addTestResult('Staff Welcome', element.name, exists ? 'pass' : 'fail',
        exists ? 'Element found' : 'Element missing');
    }

    // Check if profile data loads
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', TEST_EMAIL)
      .single();

    if (profile) {
      addTestResult('Backend', 'Profile exists', 'pass', `Profile ID: ${profile.id}`);
      console.log('✅ Profile found:', profile.full_name);
    } else {
      addTestResult('Backend', 'Profile exists', 'fail', 'No profile found for test user');
    }

    await page.screenshot({ path: 'test_5_staff_welcome.png' });

    // ====================
    // 6. STAFF MEETINGS TEST
    // ====================
    console.log('📋 Testing Staff Meetings...\n');

    await page.goto(`${BASE_URL}/staff-meetings.html`);
    await page.waitForTimeout(2000);

    // Check meeting elements
    const meetingElements = await page.locator('.meeting-card').count();
    addTestResult('Staff Meetings', 'Meeting cards', meetingElements > 0 ? 'pass' : 'warning',
      `Found ${meetingElements} meeting cards`);

    // Check video/resource links
    const videoLinks = await page.locator('a[href*="youtube"], a[href*="video"]').count();
    addTestResult('Staff Meetings', 'Video resources', videoLinks > 0 ? 'pass' : 'warning',
      `Found ${videoLinks} video links`);

    await page.screenshot({ path: 'test_6_staff_meetings.png' });

    // ====================
    // 7. ACHIEVEMENTS TEST
    // ====================
    console.log('📋 Testing Achievements...\n');

    await page.goto(`${BASE_URL}/achievements.html`);
    await page.waitForTimeout(2000);

    // Check achievement system
    const achievementCards = await page.locator('.achievement-item, .achievement-card').count();
    addTestResult('Achievements', 'Achievement cards', achievementCards > 0 ? 'pass' : 'warning',
      `Found ${achievementCards} achievement cards`);

    // Check if achievements load from backend
    const { data: achievements } = await supabase
      .from('achievements')
      .select('*')
      .limit(5);

    addTestResult('Backend', 'Achievements data', achievements ? 'pass' : 'fail',
      achievements ? `${achievements.length} achievements in database` : 'Failed to fetch achievements');

    await page.screenshot({ path: 'test_7_achievements.png' });

    // ====================
    // 8. ADMIN DASHBOARD TEST
    // ====================
    console.log('📋 Testing Admin Dashboard...\n');

    await page.goto(`${BASE_URL}/admin-dashboard.html`);
    await page.waitForTimeout(3000);

    // Check if admin access is granted
    const adminAccessDenied = await page.locator('text=/access denied|not authorized|admin only/i').isVisible().catch(() => false);
    if (adminAccessDenied) {
      addTestResult('Admin Dashboard', 'Access', 'warning', 'Admin access may be restricted');
    }

    // Check admin sections
    const adminSections = [
      { selector: '#userCreationForm', name: 'User creation form' },
      { selector: '#userManagementSection', name: 'User management' },
      { selector: '#pendingInvitations', name: 'Pending invitations' },
      { selector: '#completedUsers', name: 'Completed users' }
    ];

    for (const section of adminSections) {
      const exists = await page.locator(section.selector).count() > 0;
      addTestResult('Admin Dashboard', section.name, exists ? 'pass' : 'fail',
        exists ? 'Section found' : 'Section missing');
    }

    // Check if Edge Functions are configured
    const edgeFunctionTest = await page.evaluate(async () => {
      try {
        const testResponse = await fetch('https://unveoqnlqnobufhublyw.supabase.co/functions/v1/create-user', {
          method: 'OPTIONS'
        });
        return testResponse.ok;
      } catch {
        return false;
      }
    });

    addTestResult('Admin Dashboard', 'Edge Functions', edgeFunctionTest ? 'pass' : 'warning',
      edgeFunctionTest ? 'Edge Functions responding' : 'Edge Functions may not be deployed');

    await page.screenshot({ path: 'test_8_admin_dashboard.png' });

    // ====================
    // 9. IPAD KIOSK TEST
    // ====================
    console.log('📋 Testing iPad Kiosk Interface...\n');

    await page.goto(`${BASE_URL}/indexIpad.html`);
    await page.waitForTimeout(2000);

    // Check kiosk interface
    const kioskLogin = await page.locator('#screen-login, #loginEmail').isVisible().catch(() => false);
    addTestResult('iPad Kiosk', 'Login screen', kioskLogin ? 'pass' : 'fail');

    // Check for PIN setup
    const pinSetup = await page.locator('#btnPinSetup, #screen-pin-setup').count() > 0;
    addTestResult('iPad Kiosk', 'PIN setup', pinSetup ? 'pass' : 'warning',
      pinSetup ? 'PIN setup available' : 'PIN setup not found');

    await page.screenshot({ path: 'test_9_ipad_kiosk.png' });

    // ====================
    // 10. FORM SUBMISSION TEST
    // ====================
    console.log('📋 Testing Form Submissions...\n');

    // Test a simple profile update
    await page.goto(`${BASE_URL}/staff-welcome.html`);
    await page.waitForTimeout(2000);

    // Try to update nickname
    const nicknameField = await page.locator('#nickname');
    if (await nicknameField.isVisible()) {
      const currentNickname = await nicknameField.inputValue();
      await nicknameField.fill('TestNick' + Date.now());

      // Look for save button
      const saveButton = await page.locator('button:has-text("Save"), button:has-text("Continue"), button:has-text("Next")').first();
      if (await saveButton.isVisible()) {
        await saveButton.click();
        await page.waitForTimeout(2000);
        addTestResult('Forms', 'Profile update', 'pass', 'Form submission attempted');
      } else {
        addTestResult('Forms', 'Profile update', 'warning', 'Save button not found');
      }
    } else {
      addTestResult('Forms', 'Profile update', 'fail', 'Nickname field not visible');
    }

    // ====================
    // 11. NAVIGATION TEST
    // ====================
    console.log('📋 Testing Navigation Links...\n');

    const pagesToTest = [
      { url: '/home.html', name: 'Home' },
      { url: '/staff.html', name: 'Staff Portal' },
      { url: '/staff-welcome.html', name: 'Staff Welcome' },
      { url: '/staff-meetings.html', name: 'Staff Meetings' },
      { url: '/achievements.html', name: 'Achievements' },
      { url: '/admin-dashboard.html', name: 'Admin Dashboard' }
    ];

    for (const pageTest of pagesToTest) {
      await page.goto(`${BASE_URL}${pageTest.url}`);
      await page.waitForTimeout(1000);

      // Check if page loads without 404
      const pageTitle = await page.title();
      const hasContent = await page.locator('body').textContent();

      addTestResult('Navigation', pageTest.name, hasContent && hasContent.length > 100 ? 'pass' : 'fail',
        `Page loaded with ${hasContent ? hasContent.length : 0} characters`);
    }

    // ====================
    // 12. RESPONSIVE TEST
    // ====================
    console.log('📋 Testing Responsive Design...\n');

    // Test mobile view
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto(`${BASE_URL}/home.html`);
    await page.waitForTimeout(1000);

    const mobileMenuVisible = await page.locator('.mobile-menu, .hamburger, [class*="mobile"]').count() > 0;
    addTestResult('Responsive', 'Mobile view', 'pass', `Mobile viewport tested`);

    await page.screenshot({ path: 'test_10_mobile_view.png' });

    // Reset to desktop
    await page.setViewportSize({ width: 1280, height: 720 });

    // ====================
    // 13. DATA INTEGRITY TEST
    // ====================
    console.log('📋 Testing Data Integrity...\n');

    // Check various database tables
    const tablesToCheck = [
      'profiles',
      'achievements',
      'sites',
      'kiosk_users'
    ];

    for (const table of tablesToCheck) {
      try {
        const { data, error } = await supabase.from(table).select('*').limit(1);
        if (!error) {
          addTestResult('Database', `Table: ${table}`, 'pass', 'Table accessible');
        } else {
          addTestResult('Database', `Table: ${table}`, 'fail', error.message);
        }
      } catch (e) {
        addTestResult('Database', `Table: ${table}`, 'fail', e.message);
      }
    }

    // ====================
    // 14. SESSION MANAGEMENT TEST
    // ====================
    console.log('📋 Testing Session Management...\n');

    // Check if session persists
    await page.reload();
    await page.waitForTimeout(2000);

    const stillLoggedIn = !page.url().includes('index.html');
    addTestResult('Session', 'Session persistence', stillLoggedIn ? 'pass' : 'fail',
      stillLoggedIn ? 'Session maintained after reload' : 'Session lost on reload');

    // ====================
    // 15. ERROR HANDLING TEST
    // ====================
    console.log('📋 Testing Error Handling...\n');

    // Try to access a non-existent page
    await page.goto(`${BASE_URL}/nonexistent.html`);
    await page.waitForTimeout(1000);

    const has404 = await page.locator('text=/404|not found/i').count() > 0;
    addTestResult('Error Handling', '404 page', has404 ? 'pass' : 'warning',
      has404 ? '404 error shown' : 'No 404 handling detected');

  } catch (error) {
    console.error('❌ Test suite error:', error);
    addTestResult('Test Suite', 'Execution', 'fail', error.message);
  } finally {
    // Generate final report
    console.log('\n' + '='.repeat(60));
    console.log('📊 TEST REPORT SUMMARY');
    console.log('='.repeat(60));
    console.log(`Total Tests: ${testReport.summary.totalTests}`);
    console.log(`✅ Passed: ${testReport.summary.passed}`);
    console.log(`❌ Failed: ${testReport.summary.failed}`);
    console.log(`⚠️  Warnings: ${testReport.summary.warnings}`);
    console.log(`Pass Rate: ${((testReport.summary.passed / testReport.summary.totalTests) * 100).toFixed(1)}%`);

    if (testReport.issues.length > 0) {
      console.log('\n' + '='.repeat(60));
      console.log('❌ ISSUES FOUND:');
      console.log('='.repeat(60));
      testReport.issues.forEach((issue, index) => {
        console.log(`\n${index + 1}. ${issue.section} - ${issue.test}`);
        console.log(`   Details: ${issue.details}`);
      });
    }

    // Save detailed report
    const fs = await import('fs');
    fs.writeFileSync('comprehensive_test_report.json', JSON.stringify(testReport, null, 2));
    console.log('\n📄 Detailed report saved to: comprehensive_test_report.json');

    await browser.close();
    console.log('\n✅ Test suite completed');
  }
}

// Run the comprehensive test
comprehensiveSiteTest().catch(console.error);