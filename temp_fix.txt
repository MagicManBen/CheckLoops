            calculateBtn.addEventListener('click', () => {
              const fromDate = new Date(document.getElementById('from-date').value);
              const toDate = new Date(document.getElementById('to-date').value);

              if (!fromDate || !toDate || isNaN(fromDate) || isNaN(toDate)) {
                alert('Please select valid dates');
                return;
              }

              if (fromDate > toDate) {
                alert('End date must be after start date');
                return;
              }

              const pattern = window.workingPattern;
              if (!pattern) {
                alert('Working pattern not found. Please complete your setup first.');
                return;
              }

              let totalHours = 0;
              let totalSessions = 0;
              let totalMinutes = 0;
              let details = [];

              // Loop through each day
              const currentDate = new Date(fromDate);
              while (currentDate <= toDate) {
                const dayName = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][currentDate.getDay()];
                const dateStr = currentDate.toLocaleDateString();

                if (window.isGP) {
                const sessions = parseFloat(pattern[`${dayName}_sessions`] || 0);
                if (sessions > 0) {
                  totalSessions += sessions;
                  details.push(`${dateStr}: ${sessions} ${sessions === 1 ? 'session' : 'sessions'}`);
                }
              } else {
                const hours = parseFloat(pattern[`${dayName}_hours`] || 0);
                if (hours > 0) {
                  totalHours += Math.floor(hours);
                  totalMinutes += Math.round((hours % 1) * 60);
                  const displayHours = Math.floor(hours);
                  const displayMinutes = Math.round((hours % 1) * 60);
                  const timeStr = displayMinutes > 0 ?
                    `${displayHours}h ${displayMinutes}m` :
                    `${displayHours}h`;
                  details.push(`${dateStr}: ${timeStr}`);
                }
              }

              currentDate.setDate(currentDate.getDate() + 1);
            }

            // Calculate total time for staff
            if (!window.isGP) {
              // Handle minute overflow
              totalHours += Math.floor(totalMinutes / 60);
              totalMinutes = totalMinutes % 60;
            }

            // Display result
            const resultDiv = document.getElementById('calculation-result');
            resultDiv.style.display = 'block';
            document.getElementById('calc-details').innerHTML = details.join('<br>');

            if (window.isGP) {
              document.getElementById('calc-total').textContent = totalSessions;
              document.getElementById('calc-unit').textContent = totalSessions === 1 ? 'session' : 'sessions';
              // Store total sessions for submission
              window.holidayRequestTotal = totalSessions;
            } else {
              const totalTimeStr = totalMinutes > 0 ?
                `${totalHours}:${totalMinutes.toString().padStart(2, '0')}` :
                `${totalHours}:00`;
              document.getElementById('calc-total').textContent = totalTimeStr;
              document.getElementById('calc-unit').textContent = '';
              // Store total as decimal hours for submission
              window.holidayRequestTotal = totalHours + (totalMinutes / 60);
            }

            document.getElementById('submit-request').style.display = 'block';
        });
        }
