<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>CQC - PIN Portal (Supabase)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta name="apple-mobile-web-app-capable" content="yes">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    /* --- Demon Style Dark Theme --- */
    :root {
      /* === Dark Theme Design Tokens === */
      /* Main color scheme - demon inspired */
      --bg1: #0b4fb3; 
      --bg2: #062b6f; 
      --glass: #ffffff12; 
      --glass-2: #ffffff1a;
      --white: #e6f0ff; 
      --muted: #b8c7e8; 
      --ink: #eaf1ff;
      --accent: #76a7ff; 
      --accent-2: #5f96ff; 
      --success: #2bd4a7; 
      --danger: #ff6b6b;
      --warning: #ffca28;
      --shadow: 0 10px 30px rgba(6,43,111,.35);
      --round: 18px;
      --panel-bg: linear-gradient(145deg, #133b8a, #0c275e);
      --border-color: #ffffff1f;

      /* Legacy mappings for compatibility */
      --primary: var(--accent);
      --primary-600: var(--accent);
      --primary-700: var(--accent-2);
      --text-primary: var(--white);
      --text-secondary: var(--muted);
      --surface-opaque: var(--bg2);
      --glass-bg: var(--glass);
      --glass-bg-strong: var(--glass-2);
      --divider-color: var(--border-color);

      /* Elevation */
      --shadow-1: 0 4px 12px rgba(6,43,111,.2);
      --shadow-2: var(--shadow);
      --shadow-3: 0 16px 50px rgba(6,43,111,.45);

      /* Blur / glass */
      --blur-1: 12px;
      --blur-2: 20px;
      --blur-3: 30px;

      /* Radius */
      --radius-sm: 10px;
      --radius-md: 12px;
      --radius-lg: 16px;
      --radius-xl: 24px;

      /* Spacing scale */
      --space-1: 4px;
      --space-2: 8px;
      --space-3: 12px;
      --space-4: 16px;
      --space-5: 24px;
      --space-6: 32px;

      /* Motion */
      --easing-standard: cubic-bezier(0.4, 0, 0.2, 1);
      --dur-fast: 120ms;
      --dur-med: 180ms;
      --dur-slow: 240ms;

      /* Focus */
      --ring-color: rgba(118, 167, 255, 0.25);
      --ring: 0 0 0 4px var(--ring-color);

      --font-main: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    }

    * { 
      box-sizing: border-box; 
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease, transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    }

    html, body {
      margin:0;
      padding:0;
      height:100%;
      color: var(--white);
      font-family: var(--font-main);
      position: relative;
      overflow-x: hidden;
      /* Dark demon theme base background */
      background: #0b3a86;
    }

    /* Silky animated background - matching main site */
    body::before {
      content: '';
      position: fixed;
      inset: 0;
      z-index: -1;
      overflow: hidden;
      background: radial-gradient(1200px 700px at 20% -10%, #6aa0ff33, transparent),
        radial-gradient(900px 600px at 90% 10%, #3566ff2e, transparent),
        linear-gradient(180deg, #0e3f93 0%, #082a69 100%);
    }

    /* Moving wave effect */
    body::after {
      content: '';
      position: fixed;
      inset: 0;
      background: conic-gradient(from 180deg at 50% 50%, #2c63ff22, #143a9622, #2c63ff22);
      filter: blur(60px);
      animation: drift 22s ease-in-out infinite alternate;
      transform-origin: 50% 50%;
      z-index: -1;
      pointer-events: none;
    }

    @keyframes drift {
      0% { transform: rotate(0deg) scale(1.0); }
      100% { transform: rotate(25deg) scale(1.08); }
    }

    .wrap {
      min-height:100%;
      display:flex;
      align-items:center;
      justify-content:center;
      padding: calc(var(--space-4) + env(safe-area-inset-top, 12px));
    }

    .panel {
      width: min(520px, 95vw);
      /* Dark demon glass styling */
      background: var(--panel-bg);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(var(--blur-2)) saturate(180%);
      -webkit-backdrop-filter: blur(var(--blur-2)) saturate(180%);
      box-shadow: var(--shadow);
      border-radius: var(--radius-xl);
      padding: 32px;
      transition: box-shadow var(--dur-med) var(--easing-standard), transform var(--dur-med) var(--easing-standard);
    }

    h1,h2,h3 { margin:0 0 12px; font-weight: 700; color: var(--white); }
    h1 { font-size: 28px; }
    h2 { font-size: 24px; }
    .muted { color: var(--muted); font-size:14px; }
    .center { text-align:center; }
    .hidden { display:none !important; }

    .btn { 
      display:inline-flex; 
      justify-content:center; 
      align-items:center; 
      padding:14px; 
      border-radius:12px; 
      background: var(--glass); 
      border: 1px solid var(--border-color); 
      color: var(--white); 
      cursor:pointer; 
      font-weight: 600;
      font-size: 16px;
    }
    .btn:hover {
      transform: translateY(-2px);
      border-color: var(--accent-2);
      background: var(--glass-2);
    }
    .btn:active { transform: translateY(0px) scale(0.98); }
    .btn.primary {
      background: linear-gradient(135deg, var(--accent), var(--accent-2));
      border-color: transparent;
      color: #fff;
      box-shadow: var(--shadow-1);
    }
    .btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-2);
    }
    .btn.danger { 
      background: var(--danger); 
      border-color: transparent; 
      color: #fff;
    }

    .grid { display:grid; grid-template-columns: repeat(3, 1fr); gap:12px; width:min(360px, 92%); margin:8px auto 0; }
    .pad { margin-top:14px; }

    .key {
      height: 72px;
      padding: 0;
      border-radius: var(--radius-lg);
      background: var(--glass);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(6px) saturate(125%);
      -webkit-backdrop-filter: blur(6px) saturate(125%);
      box-shadow: var(--shadow-1);
      text-align: center;
      font-weight: 600;
      font-size: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: var(--white);
    }
    .key:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-2);
      background: var(--glass-2);
    }
    .key:active { transform: scale(.98) translateY(0); }

    .pin-dots { display:flex; gap:12px; justify-content:center; margin:16px 0 12px; }
    .dot { width:16px; height:16px; border-radius:50%; background: var(--glass); transition: all 0.3s ease; }
    .dot.filled {
      background: var(--success);
      box-shadow: 0 0 6px rgba(43,212,167,0.45);
      transform: scale(1.05);
    }

    .dot.flash-success {
      animation: pinSuccessNeon 1s ease-in-out both;
      background: rgba(0, 255, 120, 0.95);
      box-shadow: 0 0 18px rgba(0,255,120,0.9), 0 0 40px rgba(0,255,120,0.45);
    }

    @keyframes pinSuccessNeon {
      0% { transform: scale(1); box-shadow: 0 0 8px rgba(0,255,120,0.6); }
      40% { transform: scale(1.25); box-shadow: 0 0 28px rgba(0,255,120,0.95), 0 0 60px rgba(0,255,120,0.45); }
      100% { transform: scale(1); box-shadow: 0 0 10px rgba(0,255,120,0.6); }
    }

    .dot.flash-error {
      animation: pinErrorPulse 0.33s ease-in-out both;
      animation-iteration-count: 3;
      background: var(--danger);
      box-shadow: 0 0 12px rgba(233,90,90,0.7);
    }

    @keyframes pinErrorPulse {
      0% { transform: scale(1); box-shadow: 0 0 6px rgba(233,90,90,0.5); }
      50% { transform: scale(1.2); box-shadow: 0 0 18px rgba(233,90,90,0.9); }
      100% { transform: scale(1); box-shadow: 0 0 6px rgba(233,90,90,0.5); }
    }

    .row { display:flex; gap:10px; }
    input[type=text], input[type=password], select {
      background: var(--glass);
      border: 1px solid var(--border-color);
      color: var(--white);
      border-radius: var(--radius-md);
      padding: 14px;
      width: 100%;
      font: inherit;
      font-size: 15px;
      outline: none;
      backdrop-filter: blur(8px) saturate(130%);
      -webkit-backdrop-filter: blur(8px) saturate(130%);
      box-shadow: var(--shadow-1);
    }
    input::placeholder { color: var(--muted); }
    input:focus, select:focus {
      border-color: var(--accent);
      box-shadow: var(--ring);
    }

    table { width:100%; border-collapse: separate; border-spacing: 0; margin-top:10px; }
    th, td { border-bottom:1px solid var(--border-color); padding:14px; text-align:left; }
    th { font-size: 12px; text-align: left; font-weight: 600; color: var(--muted); background: var(--glass); text-transform: uppercase; letter-spacing: 0.05em; }
    tr:last-child td { border-bottom: none; }
    tr:hover { background: var(--glass); }

    th {
      font-size: 12px;
      text-align: left;
      font-weight: 600;
      color: var(--muted);
      background: var(--glass);
      backdrop-filter: blur(6px) saturate(120%);
      -webkit-backdrop-filter: blur(6px) saturate(120%);
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    table.review-table thead, table.review-table tbody, table.review-table tr { display:table; width:100%; table-layout:fixed; }
    table.review-table thead { position:sticky; top:0; z-index:1; }

    select.rowType{
      min-height: 48px;
      padding: 10px 12px;
      font-size: 16px;
      border-radius: 12px;
      line-height: 1.2;
      background: var(--glass);
      border: 1px solid var(--border-color);
      color: var(--white);
    }
    select.rowType:focus{
      outline: none;
      box-shadow: var(--ring);
      border-color: var(--accent);
    }

    #screen-review .panel {
      width: min(820px, 96vw);
      display: flex;
      flex-direction: column;
      min-height: calc(100vh - 72px);
    }
    #screen-review h2.glow {
      color: var(--accent);
      text-shadow: 0 0 12px rgba(118, 167, 255, 0.4), 0 0 24px rgba(118, 167, 255, 0.2);
    }

    #screen-review #reviewTable {
      flex: 1 1 auto;
      display: block;
      height: 100%;
      min-height: 0;
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 16px;
      backdrop-filter: blur(8px) saturate(130%);
      -webkit-backdrop-filter: blur(8px) saturate(130%);
      box-shadow: var(--shadow-1);
    }
    #screen-review #reviewTable tbody { display: block; overflow: auto; height: 100%; min-height: 100%; }
    #screen-review #reviewTable thead, #screen-review #reviewTable tr { width: 100%; table-layout: fixed; display: table; }
    #screen-review .review-actions{ margin-top:auto; display:flex; justify-content:center; align-items:center; gap:12px; }
    #btnSubmit.big{ padding:16px 28px; font-size:1.15rem; border-radius:14px; }
    .btn.icon { padding: 6px 10px; min-width: 36px; height: 36px; font-size: 20px; line-height: 1; border-radius: 10px; }

    .topbar {
      position: fixed;
      left: 0; right: 0; top: 0;
      /* minimise/remove visual chrome */
      padding: 6px 12px;
      height: 40px;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      background: transparent;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      border-bottom: none;
      box-shadow: none;
      z-index: 100;
    }

    /* hide the logout/exit button to remove the large control */
    .topbar .row { display: none; }
    .pill {
      padding: 4px 10px;
      background: var(--glass);
      backdrop-filter: blur(6px) saturate(120%);
      -webkit-backdrop-filter: blur(6px) saturate(120%);
      border: 1px solid var(--border-color);
      border-radius: 999px;
      font-size: 13px;
      font-weight: 600;
      color: var(--white);
      box-shadow: none;
      position: fixed;
      left: 14px;
      top: 10px;
      z-index: 110;
    }
    .toast { 
      position:fixed; 
      left:50%; 
      transform:translateX(-50%); 
      bottom:28px; 
      background: var(--bg2);
      border:1px solid var(--border-color); 
      padding:12px 16px; 
      border-radius:10px; 
      color: var(--white); 
      box-shadow: var(--shadow);
      font-weight: 500;
    }

    .welcome-popup {
      position: fixed;
      left: 50%; top: 40%;
      transform: translate(-50%, -50%) scale(1);
      background: linear-gradient(135deg, #00ff99, #00ccff);
      color: #fff;
      padding: 24px 38px;
      border-radius: 20px;
      font-size: 1.4rem;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 0 20px rgba(0, 255, 153, 0.8), 0 0 40px rgba(0, 204, 255, 0.6);
      z-index: 9999;
      opacity: 0;
      transform-origin: center center;
      text-shadow: 0 2px 12px rgba(0,255,153,0.4), 0 0 8px #00ccff;
      transition: opacity 220ms ease, transform 220ms ease;
      animation: welcomeScaleUp 0.42s cubic-bezier(0.45, 1.4, 0.55, 1) both;
      pointer-events: none;
    }
    .welcome-popup.show {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
      animation: welcomeScaleUp 0.42s cubic-bezier(0.45, 1.4, 0.55, 1) both;
    }
    @keyframes welcomeScaleUp {
      0% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.95);
        box-shadow: 0 0 6px rgba(0, 255, 153, 0.25), 0 0 8px rgba(0,204,255,0.15);
      }
      60% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
        box-shadow: 0 0 28px rgba(0, 255, 153, 0.8), 0 0 56px rgba(0, 204, 255, 0.6);
      }
      100% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
        box-shadow: 0 0 20px rgba(0, 255, 153, 0.8), 0 0 40px rgba(0, 204, 255, 0.6);
      }
    }
    .hr { border-top:1px solid var(--border-color); margin:14px 0; }
    .list {
      max-height: 260px;
      overflow:auto;
      border:1px solid var(--border-color);
      border-radius:12px;
      padding:10px;
      background: var(--glass);
      backdrop-filter: blur(8px) saturate(120%);
    }
    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }
    .art { margin: 16px auto 4px; display:flex; justify-content:center; gap:12px; flex-wrap:wrap; }
    .art img {
      max-width: 360px;
      width: 90%;
      height: auto;
      border-radius: 20px;
      padding: 24px;
      background: linear-gradient(180deg, #0f2b55 0%, #10366b 100%);
      border: 1px solid rgba(255,255,255,0.08);
      box-shadow: 0 12px 32px rgba(0,0,0,0.20);
      filter: brightness(1) contrast(1.05);
    }

    /* Upload screen layout tweaks */
    #screen-upload .twocol { grid-template-columns: 1fr; justify-items: center; }
    #screen-upload #imgIpadScan { display: none; }

    /* Bigger centred QR */
    #qrUploadWrap {
      max-width: 320px;
      width: 90%;
      margin: 0 auto;
    }
    #qrUpload canvas, #qrUpload img { width: 100% !important; height: 100% !important; }
    .twocol { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; align-items: center; }
    @media (max-width: 720px) { .twocol { grid-template-columns: 1fr; } }

    #screen-upload h2 {
      font-size: clamp(1.6rem, 4vw, 2.2rem);
      color: var(--accent);
      animation: pulseTitle 2s ease-in-out infinite;
    }
    @keyframes pulseTitle {
      0%,100% { text-shadow: 0 0 8px rgba(118, 167, 255, 0.4); }
      50% { text-shadow: 0 0 18px rgba(118, 167, 255, 0.6); }
    }
    #qrUploadWrap {
      position: relative;
      padding: 14px;
      border-radius: 16px;
      background: var(--glass);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(6px) saturate(130%);
      -webkit-backdrop-filter: blur(6px) saturate(130%);
      box-shadow: var(--shadow-1);
      animation: glowQR 3.2s ease-in-out infinite;
    }
    @keyframes glowQR {
      0%, 100% { box-shadow: 0 0 14px rgba(118,167,255,.22), inset 0 0 12px rgba(118,167,255,.14); }
      50% { box-shadow: 0 0 20px rgba(118,167,255,.28), inset 0 0 18px rgba(118,167,255,.18); }
    }
    #screen-upload .muted {
      font-size: 1.05rem;
      animation: fadeHint 3.2s ease-in-out infinite;
    }
    @keyframes fadeHint {
      0%,100% { opacity: 0.8; }
      50% { opacity: 1; }
    }
    .glow {
      color: var(--accent);
      text-shadow: 0 0 8px rgba(118,167,255,0.25);
    }

    #btnBegin, #btnSubmit {
      position: relative;
      background: linear-gradient(135deg, var(--accent), var(--accent-2)) !important;
      border-color: transparent !important;
      color: #fff !important;
      font-weight: 700;
      padding: 16px 22px;
      font-size: 1.1rem;
      border-radius: 14px;
      box-shadow: var(--shadow-2);
      transition: transform var(--dur-med) var(--easing-standard), box-shadow var(--dur-med) var(--easing-standard);
    }
#btnBegin::after, #btnSubmit::after {
  content: none !important;
}
    @keyframes btnPulse {
      /* animation disabled */
    }
    .fab { position: fixed; right: 22px; bottom: 22px; width:56px; height:56px; border-radius:50%; background: var(--accent); border: none; color:#fff; font-size:28px; display:flex; justify-content:center; align-items:center; box-shadow: 0 10px 26px rgba(118, 167, 255, 0.3); }
    .fab.fab-add {
      left: 22px;
      right: auto;
      background: var(--success);
      box-shadow: 0 10px 26px rgba(43, 212, 167, 0.3);
      font-size: 32px;
      line-height: 1;
      cursor: pointer;
    }
    .footer {
      position: fixed;
      bottom: 14px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--glass);
      backdrop-filter: blur(6px) saturate(120%);
      -webkit-backdrop-filter: blur(6px) saturate(120%);
      padding: 4px 14px;
      border-radius: 999px;
      font-size: 13px;
      font-weight: 600;
      color: var(--white);
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      z-index: 120;
    }

    .audit-hero{
      position:relative;
      height:100vh;
      width:100%;
      display:grid;
      grid-template-rows: 1fr 1fr;
      align-items:center;
      justify-items:center;
      overflow:hidden;
      padding-top:40px;
    }
    .audit-center{
      position:relative;
      z-index:200;
      display:flex;
      flex-direction:column;
      align-items:center;
      justify-content:center;
      gap:18px;
      padding:32px 16px;
      text-align:center;
      width:100%;
      max-width:780px;
    }
    .audit-top{ display:flex; align-items:center; justify-content:center; width:100%; height:100%; }
    .audit-bottom{ display:flex; align-items:center; justify-content:center; width:100%; height:100%; padding: 8px 0 24px; }
    .audit-ring{ position:relative; width:min(78vw,380px); height:min(78vw,380px); border-radius:50%; display:flex; align-items:center; justify-content:center; z-index:180; }
    .audit-ring:before, .audit-ring:after{ content:""; position:absolute; inset:0; border-radius:50%; }
    .audit-ring:before{
      border:4px solid var(--accent-2);
      box-shadow:inset 0 0 24px rgba(118,167,255,0.18), 0 0 20px rgba(118,167,255,0.12);
      animation:pulseExpand 1.8s ease-in-out infinite;
    }
    .audit-ring:after{
      content:"";
      position:absolute; inset:-12px; border-radius:50%;
      box-shadow:0 0 0 0 rgba(118,167,255,.25);
      animation:ripple 1.8s ease-out infinite;
    }
    .audit-title{ position:absolute; text-align:center; padding:0 24px; z-index:220; }
    .audit-title .big{ font-size:clamp(1.6rem, 3.8vw, 2.2rem); font-weight:700; letter-spacing:.3px; text-shadow:0 1px 4px rgba(0,0,0,.1); color: var(--white); }
    .audit-title .sub{ margin-top:8px; font-size:clamp(1rem, 2.4vw, 1.15rem); color: var(--muted); line-height:1.35; }

    .upload-counter{ position:relative; width:220px; height:220px; border-radius:50%; display:flex; align-items:center; justify-content:center; background: var(--glass); }
    .upload-counter:before{
      content:"";
      position:absolute; inset:0; border-radius:50%;
      border:4px solid var(--accent-2);
      box-shadow:inset 0 0 24px rgba(118,167,255,0.18), 0 0 20px rgba(118,167,255,0.12);
      animation:pulseExpand 1.8s ease-in-out infinite;
    }
    .upload-counter:after{
      content:"";
      position:absolute; inset:-12px; border-radius:50%;
      box-shadow:0 0 0 0 rgba(118,167,255,.25);
      animation:ripple 1.8s ease-out infinite;
    }
    .upload-title{ position:absolute; text-align:center; padding:0 12px; z-index:5; }
    .upload-title .num{ font-size:clamp(1.8rem, 5vw, 2.8rem); font-weight:700; color: var(--white); }
    .upload-title .sub{ margin-top:4px; font-size:clamp(.9rem, 2.2vw, 1rem); color: var(--muted); }

    @keyframes pulseExpand{ 0%{ transform:scale(.95) } 50%{ transform:scale(1.05) } 100%{ transform:scale(.95) } }
    @keyframes ripple{ 0%{ box-shadow:0 0 0 0 rgba(118, 167, 255, .3); opacity:1 } 100%{ box-shadow:0 0 0 24px rgba(118, 167, 255, 0); opacity:0 } }
    .scan-bottom{
      display:block;
      max-width:min(70vw,420px);
      width:90%;
      height:auto;
      padding:24px;
      border-radius:20px;
      background:linear-gradient(180deg,#0f2b55 0%, #10366b 100%);
      border:1px solid rgba(255,255,255,0.08);
      box-shadow:0 12px 32px rgba(0,0,0,0.20);
      opacity:1;
      pointer-events:auto;
      margin:0 auto;
    }
    /* ensure the white‑line sketch fills the card */
    .scan-bottom img{ width:100%; height:auto; display:block; }

    #screen-reset h2 { font-size: clamp(2rem, 6vw, 2.6rem); color: var(--accent); }
    #screen-reset #resetInstruction { font-size: clamp(1.2rem, 4vw, 1.6rem); }
    #screen-reset #resetCountdown { font-size: clamp(1.1rem, 3.6vw, 1.4rem); }
    #screen-reset #btnResetDone { font-size: 1.15rem; padding: 14px 22px; }
    #screen-reset #qrReset canvas, #screen-reset #qrReset img { width: 220px !important; height: 220px !important; }

    .review-shell{ display:flex; flex-direction:column; gap:14px; }
    .review-header{ display:flex; align-items:center; justify-content:space-between; gap:12px; }
    .review-header .title{ display:flex; align-items:center; gap:10px; }
    .review-header .pulse-dot{ width:10px; height:10px; border-radius:50%; background: var(--accent);
      box-shadow: 0 0 10px var(--accent), 0 0 22px rgba(118, 167, 255, 0.4); animation:pulseTiny 1.6s ease-in-out infinite; }
    @keyframes pulseTiny{ 0%,100%{ transform:scale(.9); opacity:.9 } 50%{ transform:scale(1.15); opacity:1 } }
    .count-pill{
      padding:6px 10px;
      background: var(--glass);
      backdrop-filter: blur(8px) saturate(130%);
      -webkit-backdrop-filter: blur(8px) saturate(130%);
      border:1px solid var(--border-color);
      border-radius:999px;
      font-size:12px;
      font-weight: 600;
      color: var(--white);
      box-shadow: var(--shadow-1);
    }

    #reviewGroups{ flex:1 1 auto; min-height:0; overflow:auto; display:grid; gap:12px; padding-bottom: 8px; }

    .room-group{
      margin: 4px 0;
      border:1px solid var(--border-color);
      border-radius:14px;
      background: var(--glass);
      overflow:clip;
      backdrop-filter: blur(8px) saturate(140%);
      box-shadow: 0 8px 26px rgba(6,43,111,0.06);
    }
    .room-group[open]{
      box-shadow: 0 10px 28px rgba(6,43,111,0.08), 0 0 0 1px rgba(118, 167, 255, 0.06);
    }
    .room-group summary{
      list-style:none; cursor:pointer; display:grid; grid-template-columns: 1fr auto; align-items:center; gap:12px;
      padding:12px 14px; position:sticky; top:0; z-index:1;
      background: var(--glass-2); border-bottom:1px solid var(--border-color); backdrop-filter: blur(4px);
    }
    .room-group summary::-webkit-details-marker{ display:none; }
    .room-badge{ display:flex; align-items:center; gap:10px; font-weight:700; letter-spacing:.2px; color: var(--white); }
    .room-dot{ width:10px; height:10px; border-radius:50%; background: var(--accent); box-shadow: 0 0 10px var(--accent), 0 0 22px rgba(118, 167, 255, 0.4); }
    .room-name{ font-weight:700; }
    .room-count{ font-size:12px; color: var(--muted); padding:2px 8px; border:1px solid var(--border-color); border-radius:9999px; }

    .group-items{ display:grid; gap:8px; padding:10px; }
    .item-card{
      position: relative;
      display:grid;
      grid-template-columns: 1fr minmax(180px, 260px) 40px;
      align-items:center;
      gap:12px;
      padding:12px;
      border-radius: 14px;
      background: var(--glass);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(8px) saturate(130%);
      box-shadow: 0 2px 10px rgba(6,43,111,0.06);
      transition: box-shadow .18s var(--easing-standard), transform .18s var(--easing-standard);
    }
    .item-card::before{
      content:""; position:absolute; left:0; top:8px; bottom:8px; width:4px; border-radius:4px;
      background: linear-gradient(180deg, var(--accent-2), rgba(118,167,255,0)); opacity:.22;
    }
    .item-card:hover{ box-shadow:0 8px 22px rgba(118, 167, 255, 0.12); transform:translateY(-1px); }
    .group-items .item-card:nth-child(even){ background: var(--glass-2); }
    .item-main .item-name{ font-weight:650; letter-spacing:.2px; color: var(--white); }
    .item-main .item-sub{ font-size:12px; color: var(--muted); }
    .item-type select.rowType{
      width:100%; min-height: 44px;
      -webkit-appearance: none; appearance: none;
      padding: 10px 36px 10px 12px;
      border-radius: 12px;
      background: var(--glass);
      border:1px solid var(--border-color);
      box-shadow: inset 0 1px 0 rgba(255,255,255,0.1), 0 1px 3px rgba(6,43,111,0.06);
      font-weight:600;
      color: var(--white);
      background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23b8c7e8\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"6 9 12 15 18 9\"/></svg>');
      background-repeat: no-repeat;
      background-position: right 10px center;
    }
    .item-type select.rowType:focus{ outline:none; border-color: var(--accent); box-shadow: var(--ring); }
    .btn-remove{
      justify-self:end; display:inline-flex; align-items:center; justify-content:center; width:36px; height:36px;
      border-radius:10px; border:1px solid rgba(255,107,107,0.25); background: rgba(255,107,107,0.06); color: var(--danger);
      font-weight:700; font-size:18px; line-height:1;
    }
    .btn-remove:hover{ background: rgba(255,107,107,0.1); transform: translateY(-1px); }

    @keyframes itemIn{ from{ opacity:0; transform: translateY(6px) } to{ opacity:1; transform:none } }
    .pop-out{ animation: popOut .22s ease forwards; }
    @keyframes popOut{ to{ opacity:0; transform: scale(.98); filter: blur(1px) } }

    .review-dock{
      position: sticky;
      bottom: 0;
      /* make dock visually minimal so the submit button stands alone */
      background: transparent;
      padding: 10px 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      border-top: none;
      box-shadow: none;
    }
    .review-dock .btn.primary.big{ padding:16px 28px; font-size:1.15rem; border-radius:14px; }

    #screen-review .panel{ width:min(1000px, 96vw); }
    #reviewGroups::-webkit-scrollbar{ height:12px; width:12px; }
    #reviewGroups::-webkit-scrollbar-thumb{ background: rgba(16,24,40,0.2); border-radius:10px; border: 3px solid transparent; background-clip: content-box; }
    #reviewGroups::-webkit-scrollbar-track{ background: transparent; }
  </style>
  <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
</head>
<body>
  <div class="topbar">
    <div class="pill" id="status">Not signed in</div>
    <div class="row">
      <button class="btn" id="btnLogout" style="display: none; position: fixed; top: 6px; right: 12px; z-index: 120;">Logout</button>
    </div>
  </div>

  <div class="wrap" id="screen-login">
    <div class="panel center">
      <h1>Staff Portal</h1>
      <p class="muted">Sign in (one-time) with your email & password. Then staff use a 4‑digit PIN.</p>
      <div class="pad">
        <input id="loginEmail" type="text" placeholder="you@company.com">
      </div>
      <div class="pad">
        <input id="loginPass" type="password" placeholder="••••••••">
      </div>
      <div class="pad">
        <button class="btn primary" id="doLogin">Sign in</button>
      </div>
      <p id="loginMsg" class="muted"></p>
    </div>
  </div>

  <div class="wrap hidden" id="screen-pin">
    <div class="panel center">
      <h2>Enter 4 digit PIN</h2>
      <div class="pin-dots">
        <div class="dot" id="d1"></div><div class="dot" id="d2"></div><div class="dot" id="d3"></div><div class="dot" id="d4"></div>
      </div>
      <div class="grid pad" id="pad">
        <div class="key">1</div><div class="key">2</div><div class="key">3</div>
        <div class="key">4</div><div class="key">5</div><div class="key">6</div>
        <div class="key">7</div><div class="key">8</div><div class="key">9</div>
        <div class="key" style="grid-column:2">0</div>
      </div>
      <div class="pad"><button class="btn" id="btnClearPin">Clear</button></div>
      <div class="art"><img src="WristBand.png" alt="Wrist band / safety reminder"></div>
      <p id="pinMsg" class="muted"></p>
      <p class="muted center" style="margin-top: 10px; font-size: 0.9em;">
        Need to set or reset your PIN? Click the + button below
      </p>
    </div>
    <button class="fab fab-add" id="btnPinSetup" aria-label="Set or Reset PIN" style="background: linear-gradient(135deg, #76a7ff, #5f96ff); box-shadow: 0 4px 12px rgba(118,167,255,0.4);">+</button>
  </div>

  <div class="wrap hidden" id="screen-pin-setup">
    <div class="panel">
      <h2 class="center">Set/Reset PIN</h2>
      <p class="muted center">Select a staff member and enter a new 4-digit PIN.</p>
      <div class="pad">
        <select id="pinSetupUser" class="rowType"></select>
      </div>
      <div class="pad">
        <input id="pinSetupNew" type="password" inputmode="numeric" pattern="[0-9]*" maxlength="4" placeholder="New 4-digit PIN">
      </div>
      <div class="pad">
        <input id="pinSetupConfirm" type="password" inputmode="numeric" pattern="[0-9]*" maxlength="4" placeholder="Confirm PIN">
      </div>
      <div class="pad row" style="justify-content:center; gap:12px;">
        <button class="btn" id="btnPinSetupCancel">Cancel</button>
        <button class="btn primary" id="btnPinSetupSave">Save PIN</button>
      </div>
      <p id="pinSetupMsg" class="muted center"></p>
    </div>
  </div>

  <div class="wrap hidden" id="screen-begin">
    <div class="panel center">
      <h2 class="glow">Press the circle button on the scanner once and wait for 2 beeps</h2>
      <p class="muted">After 2 beeps, click the BEGIN button below</p>
      <div class="art"><img id="imgDoubleDeep" src="DoubleDeep.png" alt="Press the handheld once"></div>
      <div class="pad"><button class="btn" id="btnBegin">Begin</button></div>
    </div>
  </div>


  <div class="wrap hidden" id="screen-scanning">
    <div class="panel center" style="background:transparent; box-shadow:none; width:100%; padding:0;">
      <div class="audit-hero">
        <div class="audit-top">
          <div class="audit-center">
            <div class="audit-ring" aria-hidden="true">
              <div class="audit-title">
                <div class="big">Audit in progress</div>
                <div class="sub">Scan the QR on each item as you check it.<br>When finished, return to this iPad.</div>
              </div>
            </div>
          </div>
        </div>
        <div class="audit-bottom">
          <img id="imgScanTrolly" src="ScanTrolly2.png" alt="Scan items during your round" class="scan-bottom">
        </div>
      </div>
    </div>
  </div>

  <div class="wrap hidden" id="screen-review">
    <div class="panel">
      <div class="review-shell">
        <div class="review-header">
          <div class="title">
            <span class="pulse-dot" aria-hidden="true"></span>
            <h2 class="glow" style="margin:0">Review & Submit</h2>
          </div>
          <span class="count-pill" id="reviewCount">0</span>
        </div>
        <div id="reviewGroups" aria-live="polite"></div>
        <div class="review-dock">
          <button class="btn primary big" id="btnSubmit">Submit</button>
          <span id="submitMsg" class="muted"></span>
        </div>
        <!-- Debug Panel -->
        <div style="margin-top: 20px;">
          <button onclick="updateDebugPanel()" style="margin-bottom: 10px; padding: 8px 16px; background: rgba(255,255,0,0.2); color: white; border: 1px solid yellow; border-radius: 4px; cursor: pointer;">🔄 Refresh Debug Info</button>
          <div id="debugPanel" style="padding: 15px; background: rgba(255,255,0,0.1); border: 2px dashed yellow; border-radius: 8px; font-family: monospace; font-size: 12px; white-space: pre-wrap; max-height: 300px; overflow-y: auto; color: white;"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="wrap hidden" id="screen-upload">
    <div class="panel center">
      <h2>When you have finished...</h2>
      <p class="muted">Scan this QR code.</p>
      <div class="twocol">
        <div class="art"><img src="IPADSCAN.png" alt="Use the iPad to upload from handheld" id="imgIpadScan"></div>
        <div>
          <div class="art" id="qrUploadWrap"><div id="qrUpload"></div></div>
          <p id="uploadStatus" class="muted hidden">Captured: <span id="capCount">0</span></p>
        </div>
      </div>
      <input
  id="uploadInput"
  autocomplete="off"
  autocapitalize="off"
  spellcheck="false"
  inputmode="none"
  style="position:absolute; left:-9999px; width:1px; height:1px; opacity:0;"
/>
    </div>
  </div>

  <div class="wrap hidden" id="screen-reset">
    <div class="panel center">
      <h2 class="glow">Final reset</h2>
      <p class="muted" id="resetInstruction">Scan this QR to finish.</p>
      <div class="art"><div id="qrReset" aria-label="Final reset QR code"></div></div>
      <p class="muted" id="resetCountdown"></p>
      <div class="pad"><button class="btn primary" id="btnResetDone">Done</button></div>
    </div>
  </div>


  <div class="footer">User: <span id="footerWho">—</span></div>
  <div id="toast" class="toast hidden"></div>

  <script>
    const SUPABASE_URL = "https://unveoqnlqnobufhublyw.supabase.co";
    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME";
    const sb = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // Production: always use authenticated client for reads
    function readClient(){ return sb; }

    // State
    const S = { siteId: null, user: null, staff: null, scans: [], itemsById: new Map(), types: [], typesByCategory: {} };

    // Debug logging function
    function debugLog(message, data = null) {
      const timestamp = new Date().toLocaleTimeString();
      const logEntry = `[${timestamp}] ${message}${data ? '\n' + JSON.stringify(data, null, 2) : ''}`;
      console.log(message, data);

      // Also display in debug panel if on review screen
      const debugPanel = document.getElementById('debugPanel');
      if (debugPanel) {
        const existingContent = debugPanel.textContent;
        debugPanel.textContent = existingContent + (existingContent ? '\n' : '') + logEntry;
        debugPanel.scrollTop = debugPanel.scrollHeight;
      }
    }

    // Update debug panel with current state
    function updateDebugPanel() {
      const debugPanel = document.getElementById('debugPanel');
      if (!debugPanel) return;

      const debugInfo = {
        '=== CURRENT STATE ===': '',
        'User ID': S.user?.id || 'Not logged in',
        'User Email': S.user?.email || 'N/A',
        'Site ID': S.siteId || 'Not set',
        'Staff Authenticated': S.staff ? 'YES' : 'NO',
        'Staff Name': S.staff?.name || 'N/A',
        'Staff master_user_id': S.staff?.master_user_id || 'N/A',
        'Staff user_id': S.staff?.user_id || 'N/A',
        'Items Scanned': S.scans.length,
        'Scan IDs': S.scans.join(', ') || 'None'
      };

      let debugText = '';
      for (const [key, value] of Object.entries(debugInfo)) {
        debugText += `${key}: ${value}\n`;
      }

      debugPanel.textContent = debugText;
    }

    // Helpers
    function $(id) { return document.getElementById(id); }
    let currentScreen = 'screen-login';
    function setTopbarFor(id){
      if (id === 'screen-begin') startDoubleDeepCycle(); else stopDoubleDeepCycle();
      if (id === 'screen-scanning') startScanTrollyCycle(); else stopScanTrollyCycle();
      currentScreen = id;
      // Hide the footer only on the login screen
      const footer = document.querySelector('.footer');
      if (footer) {
        const hideFooter = (id === 'screen-login');
        footer.style.display = hideFooter ? 'none' : 'block';
      }
      const btn = $('btnLogout');
      if (!btn) return;

      const isAuditScreen = ['screen-begin', 'screen-scanning', 'screen-upload', 'screen-review'].includes(id);
      const isPinScreen = (id === 'screen-pin');

      if (isAuditScreen) {
        btn.style.display = 'inline-flex';
        btn.textContent = 'Exit Audit';
      } else if (isPinScreen) {
        btn.style.display = 'inline-flex';
        btn.textContent = 'Logout';
      } else {
        btn.style.display = 'none';
      }

      // Manage persistent focus for the hidden upload input
      if (id === 'screen-upload') {
        startUploadFocusLoop();
      } else {
        stopUploadFocusLoop();
        // Ensure the hidden upload input cannot steal focus on other screens (iPad keyboard issue)
        const u = $('uploadInput');
        if (u) u.blur();
      }
    }

    function show(id) {
      ['screen-login','screen-pin','screen-begin','screen-scanning','screen-upload','screen-review','screen-reset','screen-pin-setup']
        .forEach(x => $(x).classList.add('hidden'));
      $(id).classList.remove('hidden');
      setTopbarFor(id);
    }
    function toast(msg) { const t=$('toast'); t.textContent=msg; t.classList.remove('hidden'); setTimeout(()=>t.classList.add('hidden'), 1600); }
    // Disable Submit when no check types are available
    function guardSubmitForTypes(){
      const b = document.getElementById('btnSubmit');
      const m = document.getElementById('submitMsg');
      if (!b) return;
      const ok = Array.isArray(S.types) && S.types.length > 0;
      b.disabled = !ok;
      if (!ok && m) m.textContent = 'No check types available for this site. Please contact an admin.';
      else if (m) m.textContent = '';
    }
    const sleep = (ms)=> new Promise(r=>setTimeout(r,ms));
    async function glowPinSuccess(duration = 2000) {
      // Make all dots filled and neon pulse, then show a welcome popup and navigate
      for (let i = 1; i <= 4; i++) {
        const d = document.getElementById('d' + i);
        if (!d) continue;
        d.classList.add('filled');
      }
      // add the neon pulse class
      for (let i = 1; i <= 4; i++) {
        const d = document.getElementById('d' + i);
        if (!d) continue;
        d.classList.add('flash-success');
      }

      // Create welcome popup
      const name = (S.staff && S.staff.name) ? S.staff.name : (S.user && S.user.email) ? S.user.email : 'Welcome';
      const popup = document.createElement('div');
      popup.className = 'welcome-popup';
      popup.textContent = `Welcome — ${name}`;
      document.body.appendChild(popup);
      // trigger show
      requestAnimationFrame(()=> popup.classList.add('show'));

      await sleep(duration);

      // remove neon pulse class but keep dots filled
      for (let i = 1; i <= 4; i++) {
        const d = document.getElementById('d' + i);
        if (!d) continue;
        d.classList.remove('flash-success');
      }

      // hide popup
      popup.classList.remove('show');
      setTimeout(()=> popup.remove(), 250);

      // navigate to begin screen
      show('screen-begin');
    }
    async function glowPinError(duration = 140) {
      // Flash red 3 times then clear (quick pulses)
      for (let rep = 0; rep < 3; rep++) {
        for (let i = 1; i <= 4; i++) {
          const d = document.getElementById('d' + i);
          if (!d) continue;
          d.classList.add('filled', 'flash-error');
        }
        await sleep(duration);
        for (let i = 1; i <= 4; i++) {
          const d = document.getElementById('d' + i);
          if (!d) continue;
          d.classList.remove('flash-error', 'filled');
        }
        await sleep(80);
      }
    }
    function pinDots(n) { for (let i=1;i<=4;i++) { const d=$('d'+i); if(!d) continue; d.classList.toggle('filled', i<=n); } }

    // Simple keypad click using WebAudio (works on iOS after first tap)
    let AC = null;
    function playClick(freq = 420, dur = 0.07) {
      try {
        AC = AC || new (window.AudioContext || window.webkitAudioContext)();
        const o = AC.createOscillator();
        const g = AC.createGain();
        o.type = 'sine';
        o.frequency.value = freq;
        o.connect(g);
        g.connect(AC.destination);
        const now = AC.currentTime;
        g.gain.setValueAtTime(0, now);
        g.gain.linearRampToValueAtTime(0.14, now + 0.005);
        g.gain.exponentialRampToValueAtTime(0.00001, now + dur);
        o.start();
        o.stop(now + dur + 0.02);
      } catch(e) { /* no-op */ }
    }

    // QR code rendering helpers
    function renderQR(elId, text) {
      const el = $(elId); if (!el) return;
      el.innerHTML = '';
      if (typeof QRCode !== 'undefined') {
        new QRCode(el, { text, width: 220, height: 220, correctLevel: QRCode.CorrectLevel.M });
      } else {
        el.textContent = text;
      }
    }
    function showUploadQR() { renderQR('qrUpload', '^&032&^'); }
    function showResetQR() { renderQR('qrReset', '^&030&^'); }
    function showUploadCounter(){
      const el = $('qrUpload'); if(!el) return;
      el.innerHTML = `
        <div class="upload-counter" aria-hidden="true">
          <div class="upload-title">
            <div class="num mono" id="uploadCount">0</div>
            <div class="sub">captured</div>
          </div>
        </div>`;
    }
    function updateUploadCounter(){
      const n = $('uploadCount'); if(n) n.textContent = String(S.scans.length);
    }
    let uploadQuietTimer = null;
    let resetInterval = null;
    let doubleDeepTimer = null;
    let uploadFocusTimer = null;
    let scanTrollyTimer = null;
    function startUploadFocusLoop(){
      if (uploadFocusTimer) clearInterval(uploadFocusTimer);
      // initial focus
      focusUploadInput();
      // aggressively keep focus while on the upload screen
      uploadFocusTimer = setInterval(()=>{
        if (currentScreen !== 'screen-upload') { clearInterval(uploadFocusTimer); uploadFocusTimer = null; return; }
        const el = $('uploadInput');
        if (el && document.activeElement !== el) { el.focus(); }
      }, 250);
      // if the input ever blurs while we're on this screen, refocus immediately
      const el = $('uploadInput');
      if (el) {
        el.onblur = () => { if (currentScreen === 'screen-upload') setTimeout(focusUploadInput, 0); };
      }
    }
    function stopUploadFocusLoop(){
      if (uploadFocusTimer) { clearInterval(uploadFocusTimer); uploadFocusTimer = null; }
    }
    // Also refocus if the tab/app regains visibility while on the upload screen
    document.addEventListener('visibilitychange', ()=>{
      if (document.visibilityState === 'visible' && currentScreen === 'screen-upload') {
        focusUploadInput();
      }
    });
    // Aggressively re-assert focus on the hidden input when the page/tab regains focus, after navigations, and on any pointer/focus events while on the upload screen
    window.addEventListener('pageshow', ()=>{
      if (currentScreen === 'screen-upload') focusUploadInput();
    });
    window.addEventListener('focus', ()=>{
      if (currentScreen === 'screen-upload') focusUploadInput();
    });
    // Capture any taps/clicks and re-assert focus on the hidden input
    document.addEventListener('pointerdown', ()=>{
      if (currentScreen === 'screen-upload') focusUploadInput();
    }, true);
    // If focus drifts to any other element while on the upload screen, pull it back
    document.addEventListener('focusin', (e)=>{
      if (currentScreen === 'screen-upload') {
        const el = $('uploadInput');
        if (el && e.target !== el) { el.focus(); }
      }
    }, true);
    function startResetCountdown(seconds = 30) {
      if (resetInterval) { clearInterval(resetInterval); resetInterval = null; }
      const el = $('resetCountdown');
      let t = seconds;
      const tick = () => {
        if (el) el.textContent = `Auto return in ${t}s`;
        if (t <= 0) {
          clearInterval(resetInterval);
          resetInterval = null;
          show('screen-pin');
          return;
        }
        t -= 1;
      };
      tick();
      resetInterval = setInterval(tick, 1000);
    }
    function focusUploadInput(){ const u=$('uploadInput'); if(!u) return; u.value=''; u.focus(); }
    function scheduleUploadAutoContinue(){ if(uploadQuietTimer) clearTimeout(uploadQuietTimer); uploadQuietTimer = setTimeout(async ()=>{ await refreshReview(); show('screen-review'); updateDebugPanel(); }, 2000); }
    function startDoubleDeepCycle(){
  const img = $('imgDoubleDeep');
  if (!img) return;
  stopDoubleDeepCycle(); // ensure only one timer
  let alt = false;
  doubleDeepTimer = setInterval(()=>{
    alt = !alt;
    img.src = alt ? 'DoubleDeep2.png' : 'DoubleDeep.png';
  }, 1000);
}
function stopDoubleDeepCycle(){
  if (doubleDeepTimer) { clearInterval(doubleDeepTimer); doubleDeepTimer = null; }
  const img = $('imgDoubleDeep');
  if (img) img.src = 'DoubleDeep.png';
}
function startScanTrollyCycle(){
  const img = $('imgScanTrolly');
  if (!img) return;
  stopScanTrollyCycle(); // ensure only one timer
  let alt = false;
  scanTrollyTimer = setInterval(()=>{
    alt = !alt;
    img.src = alt ? 'ScanTrolly2.png' : 'ScanTrolly.png';
  }, 1000);
}

function stopScanTrollyCycle(){
  if (scanTrollyTimer) { clearInterval(scanTrollyTimer); scanTrollyTimer = null; }
  const img = $('imgScanTrolly');
  if (img) img.src = 'ScanTrolly.png';
}
    // Helper to reset upload screen UI state
    function resetUploadUI(){
      if(uploadQuietTimer) { clearTimeout(uploadQuietTimer); uploadQuietTimer=null; }
      const wrap=$('qrUploadWrap'); if(wrap) wrap.classList.remove('hidden');
      const st=$('uploadStatus'); if(st) st.classList.add('hidden');
      const cnt=$('capCount'); if(cnt) cnt.textContent='0';
      const inp=$('uploadInput'); if(inp){ inp.value=''; }
    }

    // Ensure session -> get site -> show PIN

    // Lookup helper: fetch items by scanned IDs using Supabase client only (no REST fallback)
    async function fetchItemsByIds(siteId, codes){
      // Normalise to unique trimmed strings
      const ids = Array.from(new Set((codes||[]).map(c => String(c).trim())));
      if (!ids.length) return [];

      // --- 1) JS client: straightforward .in() with strings ---
      try{
        const { data, error } = await readClient()
          .from('items')
          .select('item_id, item_name, room, default_check_type, category')
          .eq('site_id', siteId)
          .in('item_id', ids);
        if (!error && Array.isArray(data) && data.length) return data;
      }catch(_){}

      return [];
    }

    // New helper: fetch next-due check type per scanned item
    async function fetchNextDueMap(siteId, codes){
      const ids = Array.from(new Set((codes||[]).map(c => String(c).trim())));
      const map = new Map();
      if (!ids.length) return map;
      try{
        const { data, error } = await readClient()
          .from('v_item_check_status')
          .select('item_code, check_type, next_due_at')
          .eq('site_id', siteId)
          .in('item_code', ids);
        if (error || !Array.isArray(data)) return map;
        const byCode = {};
        for (const r of data){
          const code = String(r.item_code || '').trim();
          if (!code) continue;
          (byCode[code] ||= []).push(r);
        }
        for (const code of Object.keys(byCode)){
          let best = null; let bestTs = Number.POSITIVE_INFINITY;
          for (const r of byCode[code]){
            const ts = r.next_due_at ? new Date(r.next_due_at).getTime() : Number.POSITIVE_INFINITY;
            if (ts < bestTs){ bestTs = ts; best = r; }
          }
          if (best && isFinite(bestTs)) map.set(code, best.check_type);
        }
      }catch(_){ /* noop */ }
      return map;
    }

    async function init() {
      debugLog('=== INIT STARTED ===');
      const { data: { session } } = await sb.auth.getSession();
      if (!session) {
        debugLog('No session found, showing login screen');
        show('screen-login');
        $('status').textContent = 'Not signed in';
        return;
      }
      S.user = session.user;
      debugLog('User session found', { userId: S.user.id, email: S.user.email });

      // CRITICAL: Clear any previous staff authentication to prevent cross-session contamination
      S.staff = null;
      debugLog('Cleared staff authentication');

      // Fetch profile -> site id
      const { data: prof, error } = await sb.from('master_users').select('site_id, full_name, role').eq('auth_user_id', session.user.id).limit(1);
      if (error || !prof || !prof.length) {
        debugLog('Profile error or no profile found', { error, prof });
        show('screen-login');
        $('loginMsg').textContent = 'No profile/site. Please onboard first.';
        return;
      }
      S.siteId = prof[0].site_id;
      debugLog('Profile loaded', { siteId: S.siteId, fullName: prof[0].full_name });
      $('footerWho').textContent = prof[0].full_name || session.user.email || '—';

      // Lookup site name and display it in the top-left pill (replace email + site id)
      try {
        const { data: site, error: siteErr } = await readClient().from('sites').select('name').eq('id', S.siteId).limit(1).single();
        if (!siteErr && site && site.name) {
          $('status').textContent = site.name;
        } else {
          $('status').textContent = `Site ${S.siteId}`;
        }
      } catch (e) {
        $('status').textContent = `Site ${S.siteId}`;
      }

      await preloadCache();
      debugLog('Init complete, showing PIN screen');
      show('screen-pin');
    }

    // Preload items and types for fast lookup
    async function preloadCache() {
      const i = await readClient().from('items').select('item_id, item_name, room, default_check_type, category').eq('site_id', S.siteId).order('item_name');
      if (!i.error) { S.itemsById.clear(); (i.data||[]).forEach(r=>S.itemsById.set(r.item_id, r)); }
      // Load all active check types for this site
      const t = await readClient().from('check_types').select('name, category').eq('site_id', S.siteId).order('name');
      if (!t.error) {
        S.types = (t.data || []).map(r => r.name);
        // keep grouped map available if needed elsewhere
        S.typesByCategory = {};
        (t.data || []).forEach(r => {
          if (!S.typesByCategory[r.category]) S.typesByCategory[r.category] = [];
          S.typesByCategory[r.category].push(r.name);
        });
      }
      guardSubmitForTypes();
    }

    // Login
    $('doLogin').addEventListener('click', async ()=>{
      $('loginMsg').textContent = 'Signing in…';
      const email = $('loginEmail').value.trim();
      const password = $('loginPass').value;
      const { data, error } = await sb.auth.signInWithPassword({ email, password });
      if (error) { $('loginMsg').textContent = error.message; return; }
      await init();
    });

    $('btnLogout').addEventListener('click', onTopbarButton);

    // PIN keypad
    let pin = '';
    function onTopbarButton(){
      const isAuditing = ['screen-begin', 'screen-scanning', 'screen-upload', 'screen-review'].includes(currentScreen);
      if (isAuditing) {
        if (!confirm('Are you sure? All progress will be lost.')) return;
        // Reset audit state
        S.scans = [];
        S.staff = null;  // Clear staff authentication when exiting audit
        pin = '';
        pinDots(0);
        resetUploadUI();
        if (resetInterval) { clearInterval(resetInterval); resetInterval = null; }
        show('screen-pin');
        return;
      }
      // Full sign-out when not in an audit (e.g., on PIN screen)
      sb.auth.signOut().then(()=>{ 
        $('footerWho').textContent = '—';
        // Use location.reload() to ensure a clean state after logout
        location.reload(); 
      });
    }
    $('pad').addEventListener('click', async (e)=>{
      const k = e.target.closest('.key'); if (!k) return;
      const v = k.textContent.trim();
      if (/^\d$/.test(v)) { playClick(); if (pin.length<4) pin+=v; pinDots(pin.length); }
      if (pin.length === 4) { await tryPin(pin); }
    });
    $('btnClearPin').addEventListener('click', ()=>{ playClick(300, 0.08); pin=''; pinDots(0); });

    async function tryPin(p) {
      $('pinMsg').textContent = 'Checking…';
      console.log(`=== PIN AUTHENTICATION ATTEMPT ===`);
      console.log(`Site ID: ${S.siteId}, PIN entered: ${p}`);
      console.log(`Current user: ${S.user?.email}`);

      try {
        // Direct authentication using master_users table
        console.log('Attempting PIN authentication with master_users...');
        const { data, error } = await sb
          .from('master_users')
          .select('id, auth_auth_user_id, full_name, access_type, role_detail, pin_hash')
          .eq('site_id', S.siteId)
          .eq('pin_hash', p)  // Direct PIN comparison (consider proper hashing in production)
          .eq('active', true)  // Only active users
          .single();

        console.log('master_users PIN check response:', { data, error });

        if (error || !data) {
          console.log('Invalid PIN - no matching user found');
          $('pinMsg').textContent = 'Invalid PIN. Click + to reset.';
          await glowPinError(500);
          pin='';
          pinDots(0);
          return;
        }

        // Store the complete staff information
        console.log('Authentication successful, storing staff data...');
        S.staff = {
          name: data.full_name,
          role: data.access_type || 'staff',
          master_user_id: data.id,  // Store the master_users ID instead of kiosk_user_id
          user_id: data.auth_user_id  // The actual auth user ID
        };

        console.log('Staff authenticated:', S.staff);

        $('footerWho').textContent = S.staff.name;
        $('pinMsg').textContent = '';
        console.log('PIN authentication complete, proceeding...');
        // Flash bright green, show welcome popup, then navigate
        await glowPinSuccess(2000);
        pin = '';
        pinDots(0);
        // glowPinSuccess will navigate after showing the welcome popup
      } catch (e) {
        console.error('PIN authentication error:', e);
        $('pinMsg').textContent = e.message || String(e);
        await glowPinError(500);
        pin=''; pinDots(0);
      }
    }

    // Begin -> scanning, auto-advance to upload after 10 seconds
    $('btnBegin').addEventListener('click', ()=>{
      S.scans = [];
      show('screen-scanning');
      setTimeout(()=>{
        resetUploadUI();
        show('screen-upload');
        showUploadQR();
        focusUploadInput();
      }, 10000);
    });

    function addScan(code) {
      if (S.scans.includes(code)) return;
      S.scans.push(code);
      // No on-page list during audit; items are reviewed later.
    }

    // Finish -> upload
    $('uploadInput').addEventListener('keydown', (e)=>{
      if(e.key==='Enter'){
        e.preventDefault();
        const raw=e.target.value.trim();
        e.target.value='';
        const m=raw.match(/^\d{10}$/);
        if(!m){
          debugLog('Invalid scan format', { input: raw });
          scheduleUploadAutoContinue();
          return;
        }
        const code=m[0];
        if(!S.scans.includes(code)){
          const wasEmpty = S.scans.length === 0;
          S.scans.push(code);
          debugLog('Item scanned', { code, totalScans: S.scans.length });
          if (wasEmpty) {
            showUploadCounter();
          }
          updateUploadCounter();
        } else {
          debugLog('Duplicate scan ignored', { code });
        }
        scheduleUploadAutoContinue();
      }
    });
    $('btnResetDone').addEventListener('click', () => { if (resetInterval) { clearInterval(resetInterval); resetInterval = null; } show('screen-pin'); });

    // --- PIN Setup Screen Logic ---
    async function populateKioskUsers() {
  const selectEl = $('pinSetupUser');
  selectEl.innerHTML = '<option value="">Select Staff Member...</option>';
  if (!S.siteId) {
      $('pinSetupMsg').textContent = 'Error: Site not loaded.';
      return;
  }
  
  // Get ALL staff from master_users for this site
  console.log('Loading staff from master_users for site:', S.siteId);
  const { data: users, error } = await readClient()
      .from('master_users')
      .select('auth_auth_user_id, full_name, email')
      .eq('site_id', S.siteId)
      .not('full_name', 'is', null)  // Only get users with names
      .eq('active', true)  // Only active users
      .order('full_name');

  console.log('Loaded master_users:', users);
  if (error) {
      console.error('Error loading master_users:', error);
      $('pinSetupMsg').textContent = 'Could not load staff list.';
      return;
  }

  if (users && users.length > 0) {
      users.forEach(user => {
          const option = document.createElement('option');
          option.value = user.auth_user_id;  // Use auth_user_id as the identifier
          option.textContent = user.full_name;
          selectEl.appendChild(option);
      });
  } else {
      $('pinSetupMsg').textContent = 'No staff found for this site.';
  }
}

    $('btnPinSetup').addEventListener('click', () => {
      populateKioskUsers();
      show('screen-pin-setup');
    });

    $('btnPinSetupCancel').addEventListener('click', () => {
      $('pinSetupUser').selectedIndex = 0;
      $('pinSetupNew').value = '';
      $('pinSetupConfirm').value = '';
      $('pinSetupMsg').textContent = '';
      show('screen-pin');
    });

    $('btnPinSetupSave').addEventListener('click', async () => {
  const msgEl = $('pinSetupMsg');
  msgEl.textContent = 'Saving...';
  const userId = $('pinSetupUser').value;  // This is the auth_user_id from master_users
  const newPin = $('pinSetupNew').value;
  const confirmPin = $('pinSetupConfirm').value;

  if (!userId) {
      msgEl.textContent = 'Please select a staff member.';
      return;
  }
  if (!/^\d{4}$/.test(newPin)) {
      msgEl.textContent = 'PIN must be exactly 4 digits.';
      return;
  }
  if (newPin !== confirmPin) {
      msgEl.textContent = 'PINs do not match.';
      return;
  }

  // Update the PIN directly in master_users table
  const { error: pinError } = await sb
      .from('master_users')
      .update({
          pin_hash: newPin,  // Store PIN in pin_hash column (consider hashing in production)
          updated_at: new Date().toISOString()
      })
      .eq('auth_user_id', userId)
      .eq('site_id', S.siteId);

  if (pinError) {
      console.error('PIN save error:', pinError);
      msgEl.textContent = `Error: ${pinError.message}`;
  } else {
      console.log('PIN saved successfully for user:', userId);
      msgEl.textContent = 'PIN updated successfully!';
      toast('PIN Saved!');
      setTimeout(() => {
          $('pinSetupUser').selectedIndex = 0;
          $('pinSetupNew').value = '';
          $('pinSetupConfirm').value = '';
          msgEl.textContent = '';
          show('screen-pin');
      }, 1500);
  }
});

    async function refreshReview() {
      // Normalise scanned codes (strings, trimmed, unique)
      const codes = Array.from(new Set((S.scans || []).map(c => String(c).trim())));

      const container = $('reviewGroups');
      const countEl = $('reviewCount');
      const submitBtn = document.getElementById('btnSubmit');
      const msg = document.getElementById('submitMsg');

      if (!container) return;
      // start fresh
      container.innerHTML = '';
      if (countEl) countEl.textContent = String(codes.length);

      // If nothing scanned, short-circuit and disable submit
      if (!codes.length) {
        if (submitBtn) submitBtn.disabled = true;
        if (msg) msg.textContent = 'No items to submit.';
        return;
      } else if (msg) { msg.textContent = ''; }

      // Use siteId; hard-fail if not initialised
      const siteId = S.siteId;
      if (siteId == null) { toast('No site configured. Please sign out and sign in again.'); return; }

      // Fetch ONLY the scanned items for this site
      const rows = await fetchItemsByIds(siteId, codes);
      // Also fetch what is due next for each item
      const dueMap = await fetchNextDueMap(siteId, codes);

      // Build a quick lookup map (string keys)
      const byId = new Map();
      for (const r of (rows||[])) byId.set(String(r.item_id).trim(), r);

      // Types guard (site mis-config)
      guardSubmitForTypes();

      // --- Render a single flat list (no room headers) ---
      const listWrap = document.createElement('div');
      listWrap.className = 'group-items';

      for (const code of codes) {
        const it = byId.get(code);

        const card = document.createElement('div');
        card.className = 'item-card';

        const main = document.createElement('div');
        main.className = 'item-main';
        const nameEl = document.createElement('div');
        nameEl.className = 'item-name';
        nameEl.textContent = it ? it.item_name : '(Unknown)';
        const subEl = document.createElement('div');
        subEl.className = 'item-sub mono';
        // show room (subtle) instead of the raw ID
        subEl.textContent = it && it.room ? it.room : 'Unassigned';
        main.appendChild(nameEl);
        main.appendChild(subEl);

        const typeWrap = document.createElement('div');
        typeWrap.className = 'item-type';
        const sel = document.createElement('select');
        sel.className = 'rowType';
        sel.setAttribute('data-item-id', code);
        sel.setAttribute('aria-label', `Check type for ${nameEl.textContent}`);

        // List all check types for the site
        const types = Array.isArray(S.types) ? S.types : [];
        for (const n of types) {
          const o = document.createElement('option'); o.value = n; o.textContent = n; sel.appendChild(o);
        }
        // Defaults: next due for this item, else item default, else first option
        const due = dueMap.get(code);
        const def = it && it.default_check_type;
        if (due && types.includes(due)) sel.value = due;
        else if (def && types.includes(def)) sel.value = def;
        else if (types.length) sel.value = types[0];

        typeWrap.appendChild(sel);

        const removeBtn = document.createElement('button');
        removeBtn.className = 'btn danger icon btn-remove';
        removeBtn.type = 'button';
        removeBtn.textContent = '×';
        removeBtn.setAttribute('aria-label', 'Remove this item');
        removeBtn.addEventListener('click', () => {
          // Remove this scanned code from state
          S.scans = S.scans.filter(c => c !== code);

          // Animate and remove the card
          card.classList.add('pop-out');
          setTimeout(() => {
            card.remove();

            // Update global count + submit state
            if (countEl) countEl.textContent = String(S.scans.length);
            if (submitBtn) submitBtn.disabled = (S.scans.length === 0);
            if (S.scans.length === 0 && msg) msg.textContent = 'No items to submit.';
          }, 200);
        });

        card.appendChild(main);
        card.appendChild(typeWrap);
        card.appendChild(removeBtn);
        listWrap.appendChild(card);
      }

      container.appendChild(listWrap);

      // Ensure submit disabled if there are no items
      if (submitBtn) submitBtn.disabled = (S.scans.length === 0);
    }

    // Submit
    $('btnSubmit').addEventListener('click', async()=>{
      $('submitMsg').textContent='Submitting…';
      updateDebugPanel();
      debugLog('=== STARTING SUBMISSION PROCESS ===');
      debugLog('Current state before submission', {
        user: S.user,
        staff: S.staff,
        siteId: S.siteId,
        scans: S.scans
      });

      if (!S.scans.length) {
        $('submitMsg').textContent='No scans.';
        debugLog('Submission aborted: No items scanned');
        return;
      }
      // Scope selects to within the review list and require data-item-id
      const reviewContainer = document.getElementById('reviewGroups');
      const selects = reviewContainer ? Array.from(reviewContainer.querySelectorAll('.rowType[data-item-id]')) : [];
      const staffName = S.staff?.name || 'Staff';

      const sessionId = (crypto.randomUUID && crypto.randomUUID()) || String(Date.now());

      // Build submission object with proper user/staff linking
      const submissionData = {
        site_id: S.siteId,
        session_id: sessionId,
        staff_name: staffName
      };

      debugLog('Initial submission data', submissionData);

      // Handle staff_id and user_id based on PIN authentication
      if (S.staff && S.staff.master_user_id) {
        debugLog('Staff object found with master_user_id', S.staff);

        // Since we're using master_users as single source of truth, we can trust the ID
        // The master_user_id can be used directly as staff_id in submissions
        submissionData.staff_id = S.staff.master_user_id;
        debugLog(`Staff ID set from master_users: ${S.staff.master_user_id}`);

        if (S.staff.user_id) {
          submissionData.user_id = S.staff.user_id;
          debugLog(`User ID from staff set: ${S.staff.user_id}`);
        }
      } else {
        debugLog('No staff authenticated via PIN, staff_id will be NULL');
        // Don't set staff_id - it will be NULL in database
      }

      debugLog('Submission data after staff processing', submissionData);

      // ALWAYS add submitted_by_user_id from the logged-in user
      // This is critical for my-scans.html to find the submissions
      if (S.user && S.user.id) {
        submissionData.submitted_by_user_id = S.user.id;
        debugLog(`Submitted by user ID set: ${S.user.id}`);
      } else {
        debugLog('WARNING: No user ID available for submitted_by_user_id');
      }

      // FINAL SAFEGUARD: Clean up staff_id if invalid
      if ('staff_id' in submissionData) {
        const staffId = submissionData.staff_id;
        if (!staffId || staffId === '' ||
            (typeof staffId === 'number' && (isNaN(staffId) || staffId <= 0))) {
          delete submissionData.staff_id;
          debugLog(`Removed invalid staff_id: ${staffId}`);
        }
      }

      debugLog('FINAL submission data to be sent', submissionData);

      // Show final data in debug panel
      const debugPanel = document.getElementById('debugPanel');
      if (debugPanel) {
        debugPanel.textContent += '\n\n=== SUBMISSION DATA ===\n' + JSON.stringify(submissionData, null, 2);
        debugPanel.scrollTop = debugPanel.scrollHeight;
      }

      const { data: sub, error: e1 } = await sb.from('submissions')
        .insert(submissionData)
        .select('id').single();

      if (e1) {
        debugLog('SUBMISSION ERROR', { error: e1, dataSent: submissionData });
        $('submitMsg').textContent = `ERROR: ${e1.message}`;

        // Show detailed error in debug panel
        if (debugPanel) {
          debugPanel.style.background = 'rgba(255,0,0,0.1)';
          debugPanel.style.borderColor = 'red';
          debugPanel.textContent += '\n\n!!! ERROR !!!\n' + e1.message + '\n\nData sent:\n' + JSON.stringify(submissionData, null, 2);
        }
        return;
      }

      debugLog('Submission created successfully', { submissionId: sub.id });
      const sid = sub.id;
      const rows = [];
      for (const s of selects) {
        const itemId = s.getAttribute('data-item-id');
        if (!itemId) continue; // only submit rows that belong to the review list
        const type = (s.value || 'Working');
        const value = 'Done';
        rows.push({ site_id: S.siteId, submission_id: sid, item_id: itemId, check_type: type, check_value: value });
      }
      if (rows.length === 0) { $('submitMsg').textContent = 'No items to submit.'; return; }
      const { error: e2 } = await sb.from('submission_rows').insert(rows);
      if (e2) {
        debugLog('ERROR inserting submission rows', { error: e2, rows });
        $('submitMsg').textContent = e2.message;
        return;
      }

      debugLog('Submission rows inserted successfully', { rowCount: rows.length });
      $('submitMsg').textContent='Submitted!';
      toast('Submission uploaded');

      // Show success in debug panel
      if (debugPanel) {
        debugPanel.style.background = 'rgba(0,255,0,0.1)';
        debugPanel.style.borderColor = 'green';
        debugPanel.textContent += '\n\n✅ SUCCESS! Submission ID: ' + sid;
      }

      S.scans = [];
      debugLog('Submission complete, resetting state');
      show('screen-reset');
      showResetQR();
      startResetCountdown(30);
    });


    init();
</script>

    <!-- Debug Console - Persistent across all pages -->
    <script src="debug-console.js"></script>
</body>
</html>