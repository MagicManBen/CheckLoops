<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>CQC GP Surgery Search â€” Detailed (Fixed)</title>
  <!-- Use the UMD build so window.supabase is available in plain <script> pages -->
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.45.4/dist/umd/supabase.js"></script>
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
      color: #222;
    }
    a { color: #4a5bdc; text-decoration: none; }
    a:hover { text-decoration: underline; }

    .container { max-width: 1200px; margin: 0 auto; }

    .header, .search-section {
      background: white;
      border-radius: 12px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .header h1 { margin: 0 0 10px; color: #333; }
    .header p { margin: 0; color: #666; }

    .search-row { display: flex; gap: 10px; align-items: center; }
    .search-input {
      flex: 1;
      padding: 15px; font-size: 16px;
      border: 2px solid #e0e0e0; border-radius: 8px;
    }
    .search-input:focus { outline: none; border-color: #667eea; }
    .search-btn {
      padding: 12px 18px; border-radius: 8px; border: none; cursor: pointer;
      background: #4a5bdc; color: #fff; font-weight: 600;
    }

    .hint { font-size: 12px; color: #666; margin-top: 8px; }

    .results-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 20px; margin-top: 20px;
    }
    .surgery-card {
      background: white; border-radius: 12px; padding: 20px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      cursor: pointer; transition: transform .3s, box-shadow .3s;
    }
    .surgery-card:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(0,0,0,0.15); }
    .surgery-card h3 { margin: 0 0 8px; color: #333; }
    .surgery-card p { margin: 4px 0; color: #666; font-size: 14px; }

    .rating-badge {
      display: inline-block; padding: 4px 8px; border-radius: 4px;
      font-size: 12px; font-weight: 700; margin-top: 10px;
      background: #e9ecef; color: #333;
    }
    .rating-outstanding { background: #4CAF50; color: white; }
    .rating-good { background: #8BC34A; color: white; }
    .rating-requires-improvement { background: #FF9800; color: white; }
    .rating-inadequate { background: #f44336; color: white; }

    .modal {
      display: none; position: fixed; z-index: 1000; inset: 0;
      background: rgba(0,0,0,0.5); animation: fadeIn .2s;
    }
    @keyframes fadeIn { from {opacity:0} to {opacity:1} }
    .modal-content {
      background: white; margin: 50px auto; padding: 30px; width: 90%;
      max-width: 1000px; max-height: 80vh; overflow-y: auto; border-radius: 12px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }
    .modal-header {
      display: flex; justify-content: space-between; align-items: center;
      margin-bottom: 16px; padding-bottom: 12px; border-bottom: 2px solid #f0f0f0;
    }
    .close-btn { background: none; border: none; font-size: 30px; cursor: pointer; color: #999; }

    .fetch-details-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white; border: none; padding: 12px 24px; border-radius: 6px;
      font-size: 16px; cursor: pointer; transition: transform .15s;
    }
    .fetch-details-btn:hover { transform: scale(1.03); }
    .fetch-details-btn:disabled { opacity: .5; cursor: not-allowed; }

    .loading { text-align: center; padding: 20px; color: #666; }
    .spinner {
      border: 3px solid #f3f3f3; border-top: 3px solid #667eea; border-radius: 50%;
      width: 40px; height: 40px; animation: spin 1s linear infinite; margin: 20px auto;
    }
    @keyframes spin { to { transform: rotate(360deg); } }
    .error { background: #fee; color: #a40000; padding: 12px 14px; border-radius: 8px; }
    .info { background: #eef6ff; color: #1d4ed8; padding: 10px 12px; border-radius: 8px; margin-top: 10px; }

    /* Interactive details/accordion */
    details { background: #fff; border: 1px solid #e6e6e6; border-radius: 8px; margin: 10px 0; overflow: hidden; }
    details > summary {
      list-style: none; cursor: pointer; padding: 12px 14px; font-weight: 600; color: #333; outline: none;
    }
    details > summary::-webkit-details-marker { display: none; }
    details[open] > summary { border-bottom: 1px solid #eee; }
    .section-body { padding: 12px 14px; }

    .api-toolbar { display: flex; gap: 8px; justify-content: flex-end; align-items: center; margin-bottom: 10px; }
    .btn {
      background: #e9ecef; border: 1px solid #dee2e6; color: #333;
      border-radius: 6px; padding: 6px 10px; font-size: 12px; cursor: pointer;
    }
    .btn:hover { background: #dee2e6; }
    .btn.primary { background: #28a745; color: #fff; border-color: #28a745; }
    .btn.primary:hover { filter: brightness(.95); }
    .small { font-size: 12px; color: #666; }

    /* Tree view */
    .tree { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; font-size: 13px; }
    .node { padding-left: 14px; border-left: 2px solid #f0f0f0; margin: 6px 0 6px 6px; }
    .node-header { display: flex; align-items: center; gap: 8px; }
    .node-key { font-weight: 600; color: #333; }
    .node-type { font-size: 11px; padding: 2px 6px; border-radius: 999px; background: #f1f3f5; color: #555; }
    .node-value { white-space: pre-wrap; word-wrap: break-word; color: #1f2937; }
    .null { color: #6b7280; font-style: italic; }
    .boolean { color: #0d9488; }
    .number { color: #7c3aed; }
    .string { color: #1d4ed8; }
    .controls { display:flex; gap: 8px; align-items:center; }
    .filter-wrap { display:flex; align-items:center; gap:8px; margin-left:auto; }
    .filter-input {
      border: 1px solid #ccc; padding: 6px 8px; border-radius: 6px; font-size: 12px; width: 220px;
    }
    mark { background: #fff3bf; padding: 0 2px; }

    .detail-item {
      background: #f8f9fa; padding: 12px; border-radius: 6px; margin: 6px 0;
    }
    .grid-2 { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 12px; }
    .muted { color: #666; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>CQC GP Surgery Search</h1>
      <p>Search for GP surgeries and view their CQC inspection details.</p>
    </div>

    <div class="search-section">
      <div class="search-row">
        <input id="searchInput" class="search-input" placeholder="Search by surgery name, postcode, or location..."/>
        <button class="search-btn" onclick="manualSearch()">Search</button>
      </div>
      <div class="hint">Tip: type at least <strong>2 characters</strong> (e.g. <em>SK1</em>, <em>Staly</em>, <em>Andrews</em>).</div>
      <div id="searchResults" class="results-grid"></div>
      <div id="searchFeedback"></div>
    </div>
  </div>

  <div id="detailsModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle">Surgery Details</h2>
        <button class="close-btn" onclick="closeModal()">&times;</button>
      </div>
      <div id="modalBody"></div>
    </div>
  </div>

  <script>
    // Guard: ensure UMD build exposes window.supabase
    if (!window.supabase || !window.supabase.createClient) {
      const warn = document.createElement('div');
      warn.className = 'error';
      warn.textContent = 'Supabase library failed to load. Check your internet connection and that the script src points to the UMD build.';
      document.body.prepend(warn);
    }

    const SUPABASE_URL = 'https://unveoqnlqnobufhublyw.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVudmVvcW5scW5vYnVmaHVibHl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTcyNzYsImV4cCI6MjA3MDU5MzI3Nn0.g93OsXDpO3V9DToU7s-Z3SwBBnB84rBv0JMv-idgSME';
    const supabase = window.supabase ? window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY) : null;

    let searchTimeout;
    let currentSurgery = null;

    function manualSearch() {
      const val = document.getElementById('searchInput').value.trim();
      searchGPSurgeries(val);
    }

    document.getElementById('searchInput').addEventListener('input', (e) => {
      const val = e.target.value.trim();
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => searchGPSurgeries(val), 250);
    });

    document.getElementById('searchInput').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const val = e.target.value.trim();
        searchGPSurgeries(val);
      }
    });

    async function searchGPSurgeries(searchTerm) {
      const resultsDiv = document.getElementById('searchResults');
      const feedback = document.getElementById('searchFeedback');

      const q = (searchTerm || '').trim();
      if (q.length < 2) {
        resultsDiv.innerHTML = '';
        feedback.innerHTML = '<div class="info">Enter at least 2 characters to search.</div>';
        return;
      }
      feedback.innerHTML = '';

      if (!supabase) {
        resultsDiv.innerHTML = '<div class="error">Supabase not available on this page.</div>';
        return;
      }

      resultsDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Searching...</div>';

      try {
        // Build the OR filter safely
        const orFilter = [
          `location_name.ilike.%${q}%`,
          `postcode.ilike.%${q}%`,
          `town_city.ilike.%${q}%`
        ].join(',');

        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('*')
          .or(orFilter)
          .limit(30);

        if (error) throw error;

        if (!data || data.length === 0) {
          resultsDiv.innerHTML = `<div class="info">No results found for "<strong>${q}</strong>". Try a surgery name, town/city or postcode.</div>`;
          return;
        }

        resultsDiv.innerHTML = data.map(surgery => `
          <div class="surgery-card" onclick="showSurgeryDetails('${surgery.location_id}')">
            <h3>${surgery.location_name || 'Unknown Surgery'}</h3>
            <p><strong>Location ID:</strong> ${surgery.location_id}</p>
            ${surgery.address_line_1 ? `<p>${surgery.address_line_1}</p>` : ''}
            ${surgery.town_city ? `<p>${surgery.town_city}</p>` : ''}
            ${surgery.postcode ? `<p><strong>${surgery.postcode}</strong></p>` : ''}
            ${surgery.overall_rating ? `
              <span class="rating-badge rating-${String(surgery.overall_rating).toLowerCase().replace(/\s+/g, '-')}">
                ${surgery.overall_rating}
              </span>` : ''}
          </div>
        `).join('');
      } catch (err) {
        console.error(err);
        resultsDiv.innerHTML = `<div class="error">Error searching: ${err.message || err}</div>`;
      }
    }

    async function showSurgeryDetails(locationId) {
      const modal = document.getElementById('detailsModal');
      const modalBody = document.getElementById('modalBody');
      const modalTitle = document.getElementById('modalTitle');
      modal.style.display = 'block';
      modalBody.innerHTML = `
  <div style="text-align:center;margin-bottom:20px;">
    <button id="fetchDetailsBtn" class="fetch-details-btn" onclick="fetchCQCDetails()">Run CQC â†’ NHS (Sequential)</button>
    <div style="margin-top:10px;">
      <button class="btn primary" onclick="runCQCPhase()">Run CQC Phase Only</button>
      <button class="btn primary" onclick="runODSPhase()">Run ODS Phase Only</button>
      <button class="btn" id="showRawBtn" onclick="showRawJsonOnly()">Show raw JSON</button>
      <button class="btn" onclick="copyRawJson()">Copy JSON</button>
    </div>
  </div>
  <div id="apiResult" class="section-body" style="display:none;"></div>
  <div id="rawApiResponse" class="section-body" style="display:none;">
    <pre id="rawResponseContent" style="white-space:pre-wrap; word-wrap:break-word; margin:0;"></pre>
  </div>
`;
      try {
        const { data, error } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', locationId)
          .single();

        if (error) throw error;

        currentSurgery = data;
        modalTitle.textContent = data.location_name || 'Surgery Details';
      } catch (err) {
        modalBody.innerHTML = `<div class="error">${err.message}</div>`;
      }
    }


    async function fetchCQCDetails() {
      {
        const btn = document.getElementById('fetchDetailsBtn');
        const resultDiv = document.getElementById('apiResult');
        const rawDiv = document.getElementById('rawApiResponse');
        const rawPre = document.getElementById('rawResponseContent');

        btn.disabled = true;
        btn.textContent = 'Fetching CQCâ€¦';
        if (resultDiv) {
          resultDiv.style.display = 'block';
          resultDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Fetching CQC (phase 1)â€¦</div>';
        }

        const combined = {};

        // ===== PHASE 1: CQC (using fetch-nhs-data-complete) =====
        try {
          const { data: cqcResp, error: cqcErr } = await supabase.functions.invoke('fetch-nhs-data-complete', {
            body: {
              location_id: currentSurgery.location_id,
              data_sources: ['cqc']
            }
          });
          if (cqcErr) throw cqcErr;

          combined.phase1_cqc = cqcResp || null;

          // Reflect phase 1 response immediately
          window.currentRawApiResponse = combined;
          if (rawPre && rawDiv) {
            rawPre.textContent = JSON.stringify(combined, null, 2);
            rawDiv.style.display = 'block';
          }
        } catch (err) {
          const e = err && err.message ? err.message : String(err);
          combined.phase1_cqc_error = e;
          window.currentRawApiResponse = combined;
          if (rawPre && rawDiv) {
            rawPre.textContent = JSON.stringify(combined, null, 2);
            rawDiv.style.display = 'block';
          }
          if (resultDiv) resultDiv.innerHTML = '<div class="error">CQC phase failed: ' + e + '</div>';
          btn.disabled = false;
          btn.textContent = 'Run CQC â†’ NHS (Sequential)';
          return;
        }

        // Reload the saved row to capture any derived fields (e.g. ODS) saved by the edge function
        try {
          const { data: row1 } = await supabase
            .from('CQC All GPs')
            .select('*')
            .eq('location_id', currentSurgery.location_id)
            .single();

          if (row1) {
            combined.saved_row_after_cqc = row1;
            // refresh currentSurgery with any new values now present in DB
            currentSurgery = Object.assign({}, currentSurgery, {
              ods_code: row1.ods_code || currentSurgery.ods_code || '',
              ods_ccg_code: row1.ods_ccg_code || currentSurgery.ods_ccg_code || ''
            });
          }
        } catch (_) {
          // ignore row reload errors, continue
        }

        // Work out the best ODS code we can find
        const odsFromPhase1 = combined.phase1_cqc?.ods_code
                           || combined.phase1_cqc?.data?.cqc_location?.odsCode
                           || currentSurgery.ods_code
                           || '';

        // ===== PHASE 2: NHS (ODS) =====
        btn.textContent = 'Fetching NHS (ODS)â€¦';
        try {
          const payload2 = {
            location_id: currentSurgery.location_id,
            ods_code: odsFromPhase1 || '',
            ods_ccg_code: currentSurgery.ods_ccg_code || null,
            data_sources: ['ods']
          };

          const { data: odsResp, error: odsErr } = await supabase.functions.invoke('fetch-nhs-data-complete', {
            body: payload2
          });
          if (odsErr) throw odsErr;

          combined.phase2_ods = odsResp || null;

          // Reload final row after NHS save so we can show everything that landed in the table
          try {
            const { data: row2 } = await supabase
              .from('CQC All GPs')
              .select('*')
              .eq('location_id', currentSurgery.location_id)
              .single();
            if (row2) {
              combined.saved_row = row2;
            }
          } catch (_) {
            // ignore
          }

          window.currentRawApiResponse = combined;
          if (rawPre && rawDiv) {
            rawPre.textContent = JSON.stringify(combined, null, 2);
            rawDiv.style.display = 'block';
          }
          if (resultDiv) {
            resultDiv.style.display = 'none';
            resultDiv.innerHTML = '';
          }
        } catch (err) {
          const e = err && err.message ? err.message : String(err);
          combined.phase2_ods_error = e;
          window.currentRawApiResponse = combined;
          if (rawPre && rawDiv) {
            rawPre.textContent = JSON.stringify(combined, null, 2);
            rawDiv.style.display = 'block';
          }
          if (resultDiv) resultDiv.innerHTML = '<div class="error">NHS phase failed: ' + e + '</div>';
        } finally {
          btn.disabled = false;
          btn.textContent = 'Run CQC â†’ NHS (Sequential)';
        }
      }
    }

    function showRawJsonOnly(){
      const rawDiv = document.getElementById('rawApiResponse');
      const rawPre = document.getElementById('rawResponseContent');
      const resultDiv = document.getElementById('apiResult');
      if (resultDiv) { resultDiv.style.display = 'none'; resultDiv.innerHTML = ''; }
      const payload = window.currentRawApiResponse;
      if (!payload) {
        rawPre.textContent = 'No API response yet. Click "Fetch Raw CQC JSON" first.';
      } else {
        rawPre.textContent = JSON.stringify(payload, null, 2);
      }
      rawDiv.style.display = 'block';
    }

    function copyRawJson(){
      const payload = window.currentRawApiResponse;
      const text = payload ? JSON.stringify(payload, null, 2) : '';
      if (!text) { alert('No API response yet. Click "Fetch &amp; Save NHS + CQC" first.'); return; }
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text).then(() => {
          const resultDiv = document.getElementById('apiResult');
          if (resultDiv) {
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '<div class="info">Raw JSON copied to clipboard.</div>';
            setTimeout(() => { resultDiv.style.display = 'none'; }, 1800);
          }
        }).catch(() => alert('Copy failed. Your browser may block clipboard access.'));
      } else {
        // Fallback
        alert('Clipboard not available in this browser.');
      }
    }

    async function runCQCPhase() {
      const resultDiv = document.getElementById('apiResult');
      const rawDiv = document.getElementById('rawApiResponse');
      const rawPre = document.getElementById('rawResponseContent');

      if (resultDiv) {
        resultDiv.style.display = 'block';
        resultDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Running CQC phase only...</div>';
      }

      try {
        const { data: cqcResp, error: cqcErr } = await supabase.functions.invoke('fetch-nhs-data-complete', {
          body: {
            location_id: currentSurgery.location_id,
            data_sources: ['cqc']
          }
        });

        if (cqcErr) throw cqcErr;

        window.currentRawApiResponse = { cqc_phase_only: cqcResp };
        if (rawPre && rawDiv) {
          rawPre.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
          rawDiv.style.display = 'block';
        }

        if (resultDiv) {
          const updated = cqcResp?.database_updated ? 'Database updated successfully' : 'No database update';
          resultDiv.innerHTML = `<div class="info">CQC phase complete. ${updated}. ODS Code: ${cqcResp?.ods_code || 'not found'}</div>`;
        }

        // Reload the row to see updated data
        const { data: row } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', currentSurgery.location_id)
          .single();

        if (row && window.currentRawApiResponse) {
          window.currentRawApiResponse.updated_row = row;
          if (rawPre) rawPre.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
        }
      } catch (err) {
        const e = err && err.message ? err.message : String(err);
        if (resultDiv) resultDiv.innerHTML = '<div class="error">CQC phase failed: ' + e + '</div>';
      }
    }

    async function runODSPhase() {
      const resultDiv = document.getElementById('apiResult');
      const rawDiv = document.getElementById('rawApiResponse');
      const rawPre = document.getElementById('rawResponseContent');

      // Get ODS code from current surgery or ask user
      const odsCode = currentSurgery.ods_code || prompt('Enter ODS code:');
      if (!odsCode) {
        if (resultDiv) resultDiv.innerHTML = '<div class="error">ODS code is required</div>';
        return;
      }

      if (resultDiv) {
        resultDiv.style.display = 'block';
        resultDiv.innerHTML = '<div class="loading"><div class="spinner"></div>Running ODS phase only...</div>';
      }

      try {
        const { data: odsResp, error: odsErr } = await supabase.functions.invoke('fetch-nhs-data-complete', {
          body: {
            location_id: currentSurgery.location_id,
            ods_code: odsCode,
            data_sources: ['ods']
          }
        });

        if (odsErr) throw odsErr;

        window.currentRawApiResponse = { ods_phase_only: odsResp };
        if (rawPre && rawDiv) {
          rawPre.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
          rawDiv.style.display = 'block';
        }

        if (resultDiv) {
          const updated = odsResp?.database_updated ? 'Database updated successfully' : 'No database update';
          resultDiv.innerHTML = `<div class="info">ODS phase complete. ${updated}</div>`;
        }

        // Reload the row to see updated data
        const { data: row } = await supabase
          .from('CQC All GPs')
          .select('*')
          .eq('location_id', currentSurgery.location_id)
          .single();

        if (row && window.currentRawApiResponse) {
          window.currentRawApiResponse.updated_row = row;
          if (rawPre) rawPre.textContent = JSON.stringify(window.currentRawApiResponse, null, 2);
        }
      } catch (err) {
        const e = err && err.message ? err.message : String(err);
        if (resultDiv) resultDiv.innerHTML = '<div class="error">ODS phase failed: ' + e + '</div>';
      }
    }

    function closeModal(){ document.getElementById('detailsModal').style.display = 'none'; }
    window.onclick = function(e){ const m = document.getElementById('detailsModal'); if (e.target === m) m.style.display = 'none'; };
  </script>
</body>
</html>
