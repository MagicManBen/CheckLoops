// Admin authentication helper
// This file provides consistent Supabase initialization for admin pages

// Initialize Supabase with consistent auth settings
export async function initAdminSupabase() {
  try {
    // Import Supabase client
    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
    
    // Create client with settings matching staff-common.js
    const supabase = createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY, {
      auth: { 
        persistSession: true, 
        autoRefreshToken: true, 
        detectSessionInUrl: true, 
        flowType: 'pkce' 
      }
    });
    
    return supabase;
  } catch (err) {
    console.error('Failed to initialize admin Supabase client:', err);
    throw err;
  }
}

// Check if user has admin privileges
export async function checkAdminAccess(supabase) {
  try {
    // Get current session first
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error || !session) {
      console.log('❌ No active session found');
      return false;
    }
    
    // Normalize helper
    const isAdminRole = (val) => {
      const r = String(val || '').trim().toLowerCase();
      return r === 'admin' || r === 'owner';
    };

    // Try master_users table first
    const { data: profile, error: profileError } = await supabase
      .from('master_users')
      .select('role')
      .eq('user_id', session.user.id)
      .maybeSingle();

    if (!profileError && profile && isAdminRole(profile.role)) {
      console.log('✅ Admin access confirmed via profiles for', session.user.email);
      return true;
    }

    if (profileError) {
      console.warn('Profiles role check error, falling back:', profileError);
    } else {
      console.log('Profiles role not admin/owner, checking fallbacks…');
    }

    // Fallback 1: user metadata
    const metaRole = session.user.raw_user_meta_data?.role || session.user.user_metadata?.role;
    if (isAdminRole(metaRole)) {
      console.log('✅ Admin access confirmed via metadata for', session.user.email);
      return true;
    }

    // Fallback 2: site_invites (admin/owner invite present for user email)
    try {
      const { data: invite, error: inviteError } = await supabase
        .from('site_invites')
        .select('role')
        .eq('email', session.user.email)
        .in('role', ['admin', 'owner'])
        .maybeSingle();
      if (!inviteError && invite && isAdminRole(invite.role)) {
        console.log('✅ Admin access confirmed via site_invites for', session.user.email);
        return true;
      }
    } catch (e) {
      console.warn('site_invites fallback check failed:', e);
    }

    console.log('❌ User does not have admin privileges');
    return false;
  } catch (err) {
    console.error('Error checking admin access:', err);
    return false;
  }
}

// Require admin session or redirect
export async function requireAdminSession() {
  try {
    const supabase = await initAdminSupabase();
    const isAdmin = await checkAdminAccess(supabase);
    
    if (!isAdmin) {
      // Sign out and redirect to admin login
      await supabase.auth.signOut();
      alert('Admin privileges required. Please log in with an administrator account.');
      window.location.replace('home.html');
      return null;
    }
    
    // Return session and supabase instance if admin access confirmed
    const { data: { session } } = await supabase.auth.getSession();
    return { supabase, session };
  } catch (err) {
    console.error('Error requiring admin session:', err);
    window.location.replace('admin-login.html');
    return null;
  }
}
