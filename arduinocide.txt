#include <ArduinoBLE.h>

// Minimal “connect-only” central for Eyoyo scanner
// - Scans until it finds a candidate (name starts with EY- / EYOYO, or even no name)
// - Stops scanning, connects, discovers attributes
// - Prints a short summary, then idles (heartbeat)

BLEDevice dev;
unsigned long lastBeat = 0;

bool looksEyoyo(const String& s) {
  String u = s; u.toUpperCase();
  return u.startsWith("EY-") || u.startsWith("EYOYO");
}

void connectEyoyo() {
  Serial.println(F("Scanning for devices…"));
  BLE.scan();

  while (true) {
    BLEDevice d = BLE.available();
    if (!d) continue;

    String name = d.localName();
    bool candidate = looksEyoyo(name) || name.length() == 0; // accept unnamed too

    if (!candidate) continue;

    Serial.print(F("Found candidate: "));
    Serial.println(name.length() ? name : "(no name)");

    // Per ArduinoBLE best-practice: stop scan before connect
    BLE.stopScan();

    Serial.print(F("Connecting … "));
    if (!d.connect()) {
      Serial.println(F("FAILED. Rescanning…"));
      BLE.scan();
      continue;
    }
    Serial.println(F("OK"));

    Serial.print(F("Discovering attributes … "));
    if (!d.discoverAttributes()) {
      Serial.println(F("FAILED"));
      d.disconnect();
      BLE.scan();
      continue;
    }
    Serial.println(F("OK"));

    // Print a tiny summary of what we found
    int sc = d.serviceCount();
    Serial.print(F("Service count: "));
    Serial.println(sc);
    for (int si = 0; si < sc; si++) {
      BLEService s = d.service(si);
      Serial.print(F("  svc "));
      Serial.println(s.uuid());
    }

    dev = d;
    Serial.println(F("Connected. (Minimal connect-only sketch; no subscriptions.)"));
    return;
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial) { /* wait for monitor */ }

  Serial.println();
  Serial.println(F("Booting (connect-only)…"));

  if (!BLE.begin()) {
    Serial.println(F("BLE.begin() FAILED. Update board radio firmware if needed."));
    while (1) { delay(500); Serial.print('.'); }
  }

  connectEyoyo();
}

void loop() {
  // Keep BLE stack responsive
  BLE.poll();

  // Reconnect if link drops
  if (!dev || !dev.connected()) {
    Serial.println(F("Disconnected; reconnecting"));
    connectEyoyo();
    return;
  }

  // 1s heartbeat so you know it’s alive
  unsigned long now = millis();
  if (now - lastBeat >= 1000UL) {
    lastBeat = now;
    String name = dev.localName();
    Serial.print(F("[HB] connected=1 name='"));
    Serial.print(name.length() ? name : "(no name)");
    Serial.println('\'');
  }
}
