<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CheckLoop Admin - Login</title>
  <script src="config.js"></script>
  <style>
    :root {
      --bg1: #0b4fb3;
      --bg2: #062b6f;
      --glass: #ffffff12;
      --glass-2: #ffffff1a;
      --white: #e6f0ff;
      --muted: #b8c7e8;
      --ink: #eaf1ff;
      --accent: #76a7ff;
      --accent-2: #5f96ff;
      --success: #2bd4a7;
      --danger: #ff6b6b;
      --warning: #ffca28;
      --shadow: 0 10px 30px rgba(6, 43, 111, .35);
      --round: 18px;
      --panel-bg: linear-gradient(145deg, #133b8a, #0c275e);
      --border-color: #ffffff1f;
    }
    
    * {
      box-sizing: border-box;
    }
    
    html, body {
      height: 100%;
    }
    
    body {
      margin: 0;
      font-family: Inter, system-ui, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
      color: var(--ink);
      background: #0b3a86;
      overflow-x: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Animated background from staff/admin portals */
    .bg {
      position: fixed;
      inset: 0;
      z-index: -1;
      overflow: hidden;
      background: radial-gradient(1200px 700px at 20% -10%, #6aa0ff33, transparent),
        radial-gradient(900px 600px at 90% 10%, #3566ff2e, transparent),
        linear-gradient(180deg, #0e3f93 0%, #082a69 100%);
    }
    
    .wave {
      position: absolute;
      width: 160%;
      height: 160%;
      left: -30%;
      top: -30%;
      background: conic-gradient(from 180deg at 50% 50%, #2c63ff22, #143a9622, #2c63ff22);
      filter: blur(60px);
      animation: drift 22s ease-in-out infinite alternate;
      transform-origin: 50% 50%;
    }
    
    .wave2 {
      animation-duration: 28s;
      mix-blend-mode: screen;
    }
    
    @keyframes drift {
      0% {
        transform: rotate(0deg) scale(1.0);
      }
      100% {
        transform: rotate(25deg) scale(1.08);
      }
    }
    
    /* Login container */
    .login-container {
      width: 100%;
      max-width: 440px;
      padding: 20px;
    }
    
    .login-card {
      background: var(--panel-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--round);
      box-shadow: var(--shadow);
      padding: 40px 32px;
    }
    
    .brand {
      text-align: center;
      margin-bottom: 32px;
    }
    
    .logo {
      width: 64px;
      height: 64px;
      margin: 0 auto 16px;
      border-radius: 16px;
      background: linear-gradient(135deg, #9ec1ff, #3f78ff);
      box-shadow: inset 0 0 0 3px #ffffff33;
    }
    
    .brand h1 {
      margin: 0 0 8px;
      font-size: 28px;
      font-weight: 900;
      letter-spacing: 0.5px;
      color: var(--white);
    }
    
    .brand .subtitle {
      color: var(--muted);
      font-size: 14px;
      font-weight: 600;
    }
    
    .badge {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 6px 12px;
      margin-top: 12px;
      border-radius: 999px;
      background: #ffffff18;
      border: 1px solid #ffffff2a;
      color: #fff;
      font-weight: 700;
      font-size: 12px;
      letter-spacing: 0.08em;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      margin-bottom: 8px;
      color: var(--white);
      font-weight: 600;
      font-size: 14px;
    }
    
    .form-input {
      width: 100%;
      padding: 12px 16px;
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      color: var(--white);
      font-size: 15px;
      transition: border-color 0.2s ease, background 0.2s ease;
    }
    
    .form-input:focus {
      outline: none;
      background: #ffffff18;
      border-color: var(--accent);
    }
    
    .form-input::placeholder {
      color: var(--muted);
      opacity: 0.7;
    }
    
    .form-checkbox {
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--muted);
      font-size: 14px;
      margin-bottom: 24px;
    }
    
    .form-checkbox input {
      width: 18px;
      height: 18px;
      cursor: pointer;
    }
    
    .btn {
      width: 100%;
      padding: 14px 20px;
      border: none;
      border-radius: 12px;
      font-weight: 700;
      font-size: 15px;
      cursor: pointer;
      transition: transform 0.2s ease, background 0.2s ease;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #7db1ff, #4f89ff);
      color: #fff;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
    }
    
    .btn-primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .error-message {
      background: var(--danger);
      color: white;
      padding: 12px 16px;
      border-radius: 12px;
      margin-bottom: 20px;
      font-size: 14px;
      display: none;
    }
    
    .error-message.show {
      display: block;
    }
    
    .info-message {
      background: var(--warning);
      color: #1a1a1a;
      padding: 12px 16px;
      border-radius: 12px;
      margin-bottom: 20px;
      font-size: 14px;
      font-weight: 600;
      text-align: center;
    }
    
    .links {
      margin-top: 24px;
      text-align: center;
    }
    
    .links a {
      color: var(--accent);
      text-decoration: none;
      font-size: 14px;
      font-weight: 600;
    }
    
    .links a:hover {
      text-decoration: underline;
    }
    
    .divider {
      margin: 16px 0;
      color: var(--muted);
      font-size: 14px;
      text-align: center;
    }
    
    .spinner {
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255,255,255,0.3);
      border-top-color: white;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      display: inline-block;
      vertical-align: middle;
      margin-right: 8px;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    /* Security badge (SSL Labs) */
    .security-foot{ margin-top:14px; display:flex; justify-content:center; align-items:center; gap:8px; opacity:.95 }
    .security-foot .label{ font-size:12px; color:var(--muted) }
    .ssl-badge{ display:inline-flex; align-items:center; border-radius:999px; overflow:hidden; border:1px solid var(--border-color); text-decoration:none; box-shadow:inset 0 0 0 1px #ffffff10 }
    .ssl-badge span{ line-height:1; padding:4px 8px; font-size:12px; font-weight:700 }
    .ssl-badge .left{ background:#ffffff12; color:var(--muted); letter-spacing:.4px }
    .ssl-badge .right{ background: var(--success); color:#052b1f }
    .ssl-badge:hover{ filter:brightness(1.05) }
  </style>
</head>
<body>
  <div class="bg">
    <div class="wave"></div>
    <div class="wave wave2"></div>
  </div>
  
  <div class="login-container">
    <div class="login-card">
      <div class="brand">
        <div class="logo" aria-hidden="true"></div>
        <h1>CheckLoop Admin</h1>
        <div class="subtitle">Admin Portal Access</div>
        <div class="badge">OWNER & ADMIN ONLY</div>
      </div>
      
      <div class="info-message">
        Only users with Owner or Admin roles can access this portal
      </div>
      
      <div class="error-message" id="error-message"></div>
      
      <form id="login-form">
        <div class="form-group">
          <label class="form-label" for="email">Email Address</label>
          <input 
            type="email" 
            id="email" 
            class="form-input" 
            placeholder="admin@practice.nhs.uk"
            required
            autocomplete="email"
          />
        </div>
        
        <div class="form-group">
          <label class="form-label" for="password">Password</label>
          <input 
            type="password" 
            id="password" 
            class="form-input" 
            placeholder="Enter your password"
            required
            autocomplete="current-password"
          />
        </div>
        
        <div class="form-checkbox">
          <input type="checkbox" id="remember" />
          <label for="remember">Remember me for 30 days</label>
        </div>
        
        <button type="submit" class="btn btn-primary" id="submit-btn">
          Sign In to Admin Portal
        </button>
      </form>
      
      <div class="links">
        <div class="divider">or</div>
        <a href="home.html">Go to Staff Login</a>
      </div>
      <!-- Security badge: links to live Qualys SSL Labs report -->
      <div class="security-foot">
        <a class="ssl-badge" href="https://www.ssllabs.com/ssltest/analyze.html?d=checkloops.co.uk&s=185.199.108.153" target="_blank" rel="noopener noreferrer" aria-label="SSL Labs report for checkloops.co.uk (Grade A)" title="View our live SSL Labs report">
          <span class="left">SSL</span>
          <span class="right">A</span>
        </a>
        <span class="label">Qualys SSL Labs</span>
      </div>
    </div>
  </div>
  
  <script type="module">
    import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
    
    // Create Supabase client with same settings as staff-common.js
    const supabase = createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY, {
      auth: { 
        persistSession: true, 
        autoRefreshToken: true, 
        detectSessionInUrl: true,
        flowType: 'pkce',
        storage: window.localStorage,
        storageKey: `sb-${CONFIG.SUPABASE_URL.split('//')[1].split('.')[0]}-auth-token`
      }
    });
    
    // Check if already logged in as admin
    async function checkExistingSession() {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session) {
          const user = session.user;
          // 1. Check master_users table for role
          let effectiveRole = null;
          const { data: profile } = await supabase
            .from('master_users')
            .select('role')
            .eq('auth_user_id', user.id)
            .maybeSingle();
          if (profile && profile.role) {
            effectiveRole = profile.role.toLowerCase();
          }
          // 2. Fallback to user_metadata.role
          if (!effectiveRole) {
            const metaRole = (user?.user_metadata?.role || '').toLowerCase();
            if (metaRole) effectiveRole = metaRole;
          }
          // 3. Bonus: check site_invites for admin/owner
          let hasAdminInvite = false;
          if (!effectiveRole || (effectiveRole !== 'admin' && effectiveRole !== 'owner')) {
            const { data: invites } = await supabase
              .from('site_invites')
              .select('role, status, site_id')
              .eq('email', user.email)
              .in('role', ['admin', 'owner'])
              .in('status', ['accepted', 'approved']);
            hasAdminInvite = invites && invites.length > 0;
            if (hasAdminInvite) effectiveRole = invites[0].role.toLowerCase();
          }
          const isAdmin = (effectiveRole === 'admin' || effectiveRole === 'owner' || hasAdminInvite);
          console.log('Session check - admin access granted:', isAdmin, 'role:', effectiveRole);
          if (isAdmin) {
            window.location.replace('admin-dashboard.html');
          }
        }
      } catch (err) {
        console.error('Session check error:', err);
      }
    }
    
    // Check on page load
    checkExistingSession();
    
    // Load remembered credentials if they exist
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const rememberCheckbox = document.getElementById('remember');
    
    if (localStorage.getItem('adminRememberMe') === 'true') {
      emailInput.value = localStorage.getItem('adminRememberedEmail') || '';
      passwordInput.value = localStorage.getItem('adminRememberedPassword') || '';
      rememberCheckbox.checked = true;
    }
    
    // Handle form submission
    const form = document.getElementById('login-form');
    const errorMsg = document.getElementById('error-message');
    const submitBtn = document.getElementById('submit-btn');
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value;
      const remember = document.getElementById('remember').checked;
      
      // Clear previous errors
      errorMsg.textContent = '';
      errorMsg.classList.remove('show');
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner"></span>Signing in...';
      
      try {
        // Sign in with Supabase
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
          options: {
            ...(remember && { 
              shouldCreateUser: false,
              data: { remember_me: true }
            })
          }
        });
        if (error) throw new Error(error.message);
        if (!data.session) throw new Error('No session created');
        const user = data.user;
        // 1. Check master_users table for role
        let effectiveRole = null;
        let profile = null;
        const { data: profileData } = await supabase
          .from('master_users')
          .select('role, onboarding_complete')
          .eq('auth_user_id', user.id)
          .maybeSingle();
        profile = profileData;
        if (profile && profile.role) {
          effectiveRole = profile.role.toLowerCase();
        }
        // 2. Fallback to user_metadata.role
        if (!effectiveRole) {
          const metaRole = (user?.user_metadata?.role || '').toLowerCase();
          if (metaRole) effectiveRole = metaRole;
        }
        // 3. Bonus: check site_invites for admin/owner
        let hasAdminInvite = false;
        if (!effectiveRole || (effectiveRole !== 'admin' && effectiveRole !== 'owner')) {
          const { data: invites } = await supabase
            .from('site_invites')
            .select('role, status, site_id')
            .eq('email', user.email)
            .in('role', ['admin', 'owner'])
            .in('status', ['accepted', 'approved']);
          hasAdminInvite = invites && invites.length > 0;
          if (hasAdminInvite) effectiveRole = invites[0].role.toLowerCase();
        }
        const isAdmin = (effectiveRole === 'admin' || effectiveRole === 'owner' || hasAdminInvite);
        console.log('Admin access granted:', isAdmin, 'role:', effectiveRole);
        if (!isAdmin) {
          await supabase.auth.signOut();
          throw new Error('Access denied. Only Owner and Admin users can access the admin portal. Please use the Staff Login instead.');
        }
        // Check if onboarding is complete (only if we have profile data)
        if (profile && !profile.onboarding_complete) {
          window.location.replace('staff-welcome.html');
        } else {
          // Handle remember me functionality
          if (remember) {
            localStorage.setItem('adminRememberMe', 'true');
            localStorage.setItem('adminRememberedEmail', email);
            localStorage.setItem('adminRememberedPassword', password);
          } else {
            localStorage.removeItem('adminRememberMe');
            localStorage.removeItem('adminRememberedEmail');
            localStorage.removeItem('adminRememberedPassword');
          }
          
          window.location.replace('admin-dashboard.html');
        }
      } catch (err) {
        console.error('Login error:', err);
        errorMsg.textContent = err.message || 'Invalid credentials. Please try again.';
        errorMsg.classList.add('show');
        submitBtn.disabled = false;
        submitBtn.textContent = 'Sign In to Admin Portal';
      }
    });
  </script>

    <!-- Debug Console - Persistent across all pages -->
    <script src="debug-console.js"></script>
    <script src="supabase-debug.js"></script>
</body>
</html>
