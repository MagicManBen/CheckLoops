<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CheckLoop — Staff</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://img.icons8.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <script src="config.js"></script>
  <link rel="stylesheet" href="staff.css">
  <link rel="stylesheet" href="welcome-tour.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css">
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    /* Page-specific tweaks only; core styles live in staff.css */
    .subtitle{ color:#64748b; font-weight:600; }
    .staff-avatar{ width:64px; height:64px; border-radius:50%; background:#fff; background-size:cover; background-position:center; box-shadow:0 4px 10px rgba(2,6,23,.10); border:1px solid var(--border-color); }
    .staff-hero-avatar{ width:96px; height:96px; border-radius:50%; background:#fff; background-size:cover; background-position:center; box-shadow:0 6px 16px rgba(2,6,23,.12); border:1px solid var(--border-color); }
    
    /* Quiz Alert Styles */
    .quiz-alert {
      background: linear-gradient(135deg, #fbbf24, #f59e0b);
      border-radius: 16px;
      padding: 16px;
      margin-bottom: 16px;
      border: 2px solid #fbbf24;
      animation: slideInDown 0.6s ease-out, pulseGlow 2s infinite;
    }
    
    .quiz-alert-content {
      display: flex;
      align-items: center;
      gap: 12px;
      color: white;
    }
    
    .quiz-alert-icon {
      width: 40px;
      height: 40px;
      animation: bounce 2s infinite;
    }
    .quiz-alert-icon img { width: 100%; height: 100%; display:block; }
    
    .quiz-alert-text {
      flex: 1;
    }
    
    .quiz-alert-title {
      font-weight: 800;
      font-size: 1.2em;
      margin-bottom: 4px;
    }
    
    .quiz-alert-subtitle {
      font-size: 0.9em;
      opacity: 0.9;
    }
    
    .quiz-alert-btn {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      padding: 10px 16px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.3);
    }
    
    .quiz-alert-btn:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-1px);
    }    /* Quiz Bubble Animation */
    .quiz-bubble {
      position: relative;
    }
    
    .quiz-bubble.due {
      animation: pulse 2s infinite;
    }
    
    .quiz-bubble.due::after {
      content: '!';
      position: absolute;
      top: -5px;
      right: -5px;
      background: #ef4444;
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 800;
      font-size: 12px;
      animation: bounce 1.5s infinite;
    }
    
    /* Animations */
    @keyframes slideInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes pulseGlow {
      0%, 100% {
        box-shadow: 0 0 20px rgba(251, 191, 36, 0.3);
      }
      50% {
        box-shadow: 0 0 30px rgba(251, 191, 36, 0.6);
      }
    }
    
    /* Disabled holiday button styles */
    .disabled-bubble {
      position: relative;
      transition: all 0.3s ease !important;
    }
    
    .disabled-bubble:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .disabled-bubble[title]:hover::after {
      content: attr(title);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.9);
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 12px;
      white-space: nowrap;
      max-width: 250px;
      white-space: normal;
      text-align: center;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      animation: fadeIn 0.2s ease;
      pointer-events: none;
    }
    
    .disabled-bubble[title]:hover::before {
      content: '';
      position: absolute;
      bottom: 92%;
      left: 50%;
      transform: translateX(-50%);
      border: 5px solid transparent;
      border-top-color: rgba(0, 0, 0, 0.9);
      z-index: 1001;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateX(-50%) translateY(5px); }
      to { opacity: 1; transform: translateX(-50%) translateY(0); }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
    }
    
    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
      }
      40% {
        transform: translateY(-10px);
      }
      60% {
        transform: translateY(-5px);
      }
    }
    
    /* Meetings Section Styles — High‑contrast redesign */
    .meetings-section { margin-top: 20px; }

    .meetings-tabs {
      display: flex;
      gap: 8px;
      margin-bottom: 12px;
      border-bottom: 2px solid #dbe2ea;
      align-items: flex-end;
    }

    .meetings-tab {
      padding: 10px 14px;
      background: #f3f5f8;
      color: #0f172a;
      border: 1px solid #cbd5e1;
      border-bottom: 3px solid transparent;
      border-radius: 10px 10px 0 0;
      font-weight: 700;
      cursor: pointer;
      transition: background .2s ease, color .2s ease, border-color .2s ease, transform .1s ease;
    }
    
    .btn-generate-pdf {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      margin-top: 15px;
    }
    
    .meeting-history-item {
      background: white;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 10px;
      border: 1px solid #e5e7eb;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .meeting-history-item:hover {
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      transform: translateY(-2px);
    }
    
    .meeting-form-group {
      margin-bottom: 15px;
    }
    
    .meeting-form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
      color: #374151;
    }
    
    .meeting-form-group input,
    .meeting-form-group textarea,
    .meeting-form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      font-family: inherit;
      color: #e6f0ff;
      background: rgba(255, 255, 255, 0.1);
    }
    
    .meeting-form-group select option {
      color: #333;
      background: white;
    }
    
    .attendees-list {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 10px;
    }
    
    .attendee-badge {
      padding: 5px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 500;
    }
    
    .attendee-badge.accepted {
      background: #dcfce7;
      color: #16a34a;
    }
    
    .attendee-badge.declined {
      background: #fee2e2;
      color: #dc2626;
    }
    
    .attendee-badge.pending {
      background: #fef3c7;
      color: #d97706;
    }

    /* Achievement Styles */
    .ach-grid {
      display: grid;
      gap: 12px;
    }

    .ach {
      display: flex;
      gap: 10px;
      padding: 12px;
      background: rgba(255, 255, 255, 0.08);
      border-radius: 12px;
      align-items: center;
      border: 1px solid rgba(255, 255, 255, 0.1);
      animation: fadeInScale 0.5s ease-out;
      transition: transform 0.2s ease;
    }

    .ach:hover {
      transform: translateY(-2px);
      background: rgba(255, 255, 255, 0.12);
    }

    .ach.new {
      animation: achievementUnlock 0.8s ease-out;
      box-shadow: 0 0 30px rgba(99, 102, 241, 0.6), 0 0 60px rgba(34, 211, 238, 0.4);
      border-color: rgba(99, 102, 241, 0.5);
    }

    .ach .ico {
      width: 48px;
      height: 48px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }

    .ach .ico img {
      width: 28px;
      height: 28px;
    }

    .ach .txt {
      flex: 1;
    }

    .ach .name {
      font-weight: 600;
      color: #f8fbff;
      margin-bottom: 2px;
      font-size: 14px;
    }

    .ach .desc {
      color: rgba(255, 255, 255, 0.7);
      font-size: 12px;
      line-height: 1.3;
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: scale(0.9);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    @keyframes achievementUnlock {
      0% {
        opacity: 0;
        transform: scale(0.5) rotate(-10deg);
      }
      50% {
        transform: scale(1.1) rotate(5deg);
      }
      100% {
        opacity: 1;
        transform: scale(1) rotate(0);
      }
    }

    /* Help Tour Button */
    #help-tour-btn {
      position: fixed;
      bottom: 24px;
      right: 24px;
      width: 56px;
      height: 56px;
      background: #0b69ff;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      font-weight: 700;
      box-shadow: 0 4px 20px rgba(11, 105, 255, 0.4);
      transition: all 0.3s ease;
      z-index: 1000;
      gap: 2px;
    }

    #help-tour-btn:hover {
      background: #0956cc;
      transform: translateY(-2px);
      box-shadow: 0 6px 25px rgba(11, 105, 255, 0.5);
    }

    #help-tour-btn svg {
      width: 20px;
      height: 20px;
    }
  </style>
</head>
<body class="staff-home-particles">
  <div class="bg">
    <div class="wave"></div>
    <div class="wave wave2"></div>
    <div class="particles" id="particles"></div>
    <div class="orb orb1"></div>
    <div class="orb orb2"></div>
    <div class="orb orb3"></div>
  </div>
  <div class="mesh" aria-hidden="true"><div class="m1"></div><div class="m2"></div><div class="m3"></div></div>
  
  <!-- Floating orbs for extra depth -->
  <div class="orb orb1"></div>
  <div class="orb orb2"></div>
  <div class="orb orb3"></div>
  <main class="content">
    <div class="topbar panel" style="position:relative;">
      <div class="halo"></div>
      <div class="nav seg-nav">
        <!-- Navigation will be rendered by staff-common.js -->
      </div>
      <div class="spacer"></div>
      <div class="pill" id="site-pill">Site: —</div>
      <div class="pill" id="email-pill">—</div>
      <div class="pill" id="role-pill">—</div>
      <button class="btn" id="logout-btn">Sign Out</button>
    </div>

    <!-- Fuzzy Match Notification -->
    <div id="fuzzy-match-notification" style="display: none; background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 16px 20px; margin: 20px 20px 0 20px; border-radius: 12px; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);">
      <div style="display: flex; align-items: center; justify-content: space-between;">
        <div style="display: flex; align-items: center; gap: 12px;">
          <span style="font-size: 24px;">🎉</span>
          <div>
            <div style="font-weight: 600; font-size: 16px;">Holiday Records Found!</div>
            <div style="opacity: 0.9; font-size: 14px;">You have <span id="fuzzy-match-count">0</span> historical holiday record(s) to review</div>
          </div>
        </div>
        <a href="review-holiday-matches.html" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; border-radius: 8px; text-decoration: none; font-weight: 600; transition: all 0.3s ease; display: inline-block;">
          Review Now →
        </a>
      </div>
    </div>

    <section class="panel g-12" style="margin:0; position:relative; overflow:hidden;">
      <div class="halo"></div>

      <!-- Quiz Due Alert -->
      <div id="quiz-alert" class="quiz-alert" style="display:none;">
        <div class="quiz-alert-content">
          <div class="quiz-alert-icon"><img data-i8="brain" data-i8-size="48" alt="Quiz"></div>
          <div class="quiz-alert-text">
            <div class="quiz-alert-title">Weekly Quiz Due!</div>
            <div class="quiz-alert-subtitle" id="quiz-alert-message">Complete your required knowledge check</div>
          </div>
          <a href="staff-quiz.html" class="quiz-alert-btn">Take Quiz</a>
        </div>
      </div>
      
      <div class="hero">
        <div class="ring bounce" id="compliance-ring" title="Training compliance" style="position:relative;">
          <div class="ring-progress"></div>
          <div class="ring-hole"></div>
          <img id="ring-avatar" alt="Avatar" />
        </div>
        <div style="min-width:200px;">
          <div class="subtitle" id="site-subtitle"></div>
          <div class="h1" id="welcome" style="font-size:32px;">Welcome</div>
          <!-- Badges removed as requested -->
        </div>
  <div class="spacer"></div>
        <div class="bubble-actions" aria-label="Quick actions">
          <a class="bubble" href="staff-scans.html">
            <div class="i c-purple"><img data-i8="document" data-i8-size="48" alt="My Scans"/></div>
            <div class="t">My Scans</div>
          </a>
          <a class="bubble" href="staff-training.html">
            <div class="i c-blue"><img data-i8="graduation-cap" data-i8-size="48" alt="Training"/></div>
            <div class="t">Training</div>
          </a>
          <div class="bubble disabled-bubble" title="Coming Soon" style="cursor: pointer; opacity: 0.6; color: #9ca3af;" onclick="handleHolidaysClick()">
            <div class="i c-green" style="opacity: 0.6;"><img data-i8="calendar" data-i8-size="48" alt="My Holidays" style="opacity: 0.6;"/></div>
            <div class="t" style="color: #9ca3af;">My Holidays</div>
          </div>
          <a class="bubble quiz-bubble" href="staff-quiz.html" id="quiz-bubble">
            <div class="i c-orange"><img data-i8="puzzle" data-i8-size="48" alt="Quiz"/></div>
            <div class="t">Quiz</div>
          </a>
        </div>
      </div>
      <div class="progress-wrap" style="margin-top:10px; padding:0 8px;">
        <div class="progress" style="height:10px; background:#e5e7eb; border-radius:999px; overflow:hidden; border:1px solid var(--border-color);">
          <div id="training-progress-bar" class="bar" style="height:100%; width:0%; background:linear-gradient(90deg,#60a5fa,#a78bfa);"></div>
        </div>
        <div id="training-progress-label" class="meta-note" style="text-align:right; margin-top:4px;">0% Training</div>
      </div>
      <div class="tile-grid" style="margin-top:14px;">
        <div class="tile">
          <div class="panel-header" style="align-items:center; gap:10px;">
            <div class="illus-circle"><img data-i8="medal" alt="Achievements"></div>
            <div class="panel-title">Achievements</div>
          </div>
          <div class="ach-grid" id="achievements-grid">
            <!-- Achievements will be populated dynamically -->
          </div>
          <div id="no-achievements" style="display:none; padding:20px; text-align:center; color:rgba(255,255,255,0.5); font-size:14px;">No achievements unlocked yet</div>
        </div>
        <div class="tile">
          <div class="panel-header" style="align-items:center; gap:10px;">
            <div class="illus-circle"><img data-i8="time-machine" alt="Recent Activity"></div>
            <div class="panel-title">Recent Activity</div>
          </div>
          <div id="recent-scans-loading" style="padding:10px; text-align:center;">Loading…</div>
          <div class="timeline" id="timeline" style="display:none;"></div>
          <div id="recent-scans-empty" class="empty" style="display:none">No activity yet.</div>
        </div>
      </div>
    </section>

  <!-- Meetings section removed (moved to dedicated page) -->

  <!-- Admin access panel removed from staff home (admin link remains available via top nav) -->

    <div class="muted" style="text-align:center; font-size:12px; padding:10px 0;">© CheckLoop • Staff</div>
  </main>

  <!-- Help Tour Button -->
  <button id="help-tour-btn" title="Take a guided tour of the dashboard">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/>
    </svg>
    ?
  </button>

  <script type="module">
  import { initSupabase, requireStaffSession, getSiteText, setTopbar, handleAuthState, navActivate, setRing, fmtDate, getUserAchievements, upsertAchievement, clearAuthData, computeCompliance } from './staff-common.js';
    
    // Global function to handle holidays click
    window.handleHolidaysClick = async function() {
      try {
        // Get current session
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          alert('Please sign in to access My Holidays.');
          return;
        }

        // Check if holidays are approved for this user in master_users table
        const { data: userData, error } = await supabase
          .from('master_users')
          .select('holiday_approved')
          .eq('auth_user_id', session.user.id)
          .single();

        if (error) {
          console.error('Error checking holiday approval:', error);
          alert('Unable to check holiday access. Please try again later.');
          return;
        }

        if (userData && userData.holiday_approved === true) {
          // Holidays are approved - navigate to holidays page
          window.location.href = 'my-holidays.html';
        } else {
          // Holidays not yet approved
          alert('Your holiday entitlement is awaiting admin approval. Please check back later or contact your admin.');
        }
      } catch (error) {
        console.error('Error in handleHolidaysClick:', error);
        alert('An error occurred. Please try again.');
      }
    };
    
    const supabase = await initSupabase();
    // Make supabase available globally for Admin Portal button
    window.supabase = supabase;
    
    handleAuthState(supabase);
    navActivate('home');

    // Quick client-side reveal: use locally stored session metadata to
    // show the Admin button immediately for admin/owner users while
    // the authoritative profileRow is loaded. This avoids a visible
    // 1-2s delay waiting for the DB-backed requireStaffSession call.
    try {
      supabase.auth.getSession().then(({ data }) => {
        const user = data?.session?.user || {};
        const earlyRole = user?.raw_user_meta_data?.role || user?.user_metadata?.role;
        if (earlyRole) {
        }
      }).catch(_=>{});
    } catch(_){}

    let isLoggingOut = false;
    function cleanupAndRedirect() {
      try { clearAuthData(true); } catch(_) {}
      try { sessionStorage.clear(); } catch(_) {}
      try { document.cookie.split(';').forEach(c => document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`)); } catch(_) {}
  window.location.replace('home.html?_=' + Date.now());
    }
    async function forceLogout() {
      if (isLoggingOut) return;
      isLoggingOut = true;
      try { const { data } = await supabase.auth.getSession(); if (data?.session) await supabase.auth.signOut(); } catch (e) { console.error('Supabase signOut failed:', e); }
      cleanupAndRedirect();
    }
    document.getElementById('logout-btn').addEventListener('click', async (e) => { e.preventDefault(); e.stopPropagation(); await forceLogout(); });

    requireStaffSession(supabase).then(async ({ session, profileRow }) => {
      await loadDashboard(session.user, profileRow);

      // Setup help tour button functionality
      setupHelpTourButton(profileRow, session);

      // Check holiday approval status and update button from master_users table
      try {
        const { data: userData, error } = await supabase
          .from('master_users')
          .select('holiday_approved')
          .eq('auth_user_id', session.user.id)
          .single();

        if (!error && userData) {
          const holidayBubble = document.querySelector('.disabled-bubble[onclick*="handleHolidaysClick"]');
          if (holidayBubble) {
            if (userData.holiday_approved === true) {
              // Convert to active link if approved
              const newLink = document.createElement('a');
              newLink.className = 'bubble';
              newLink.href = 'my-holidays.html';
              newLink.innerHTML = `
                <div class="i c-green"><img data-i8="calendar" data-i8-size="48" alt="My Holidays"/></div>
                <div class="t">My Holidays</div>
              `;
              holidayBubble.parentNode.replaceChild(newLink, holidayBubble);
            } else {
              // Keep it greyed out and add hover message
              holidayBubble.title = 'Holiday entitlement awaiting admin approval. You will be able to access your holidays once approved.';
              holidayBubble.style.cursor = 'not-allowed';
              
              const textEl = holidayBubble.querySelector('.t');
              if (textEl) {
                textEl.innerHTML = 'My Holidays<br><small style="font-size: 10px; opacity: 0.7; color: #f59e0b;">(Awaiting Approval)</small>';
              }
              
              // Add a subtle animation to indicate it's disabled but will become available
              holidayBubble.style.position = 'relative';
              holidayBubble.style.overflow = 'hidden';
              
              // Add a pulse effect to indicate pending status
              holidayBubble.addEventListener('mouseenter', function() {
                this.style.background = 'rgba(251, 191, 36, 0.1)';
                this.style.borderColor = 'rgba(251, 191, 36, 0.3)';
              });
              
              holidayBubble.addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.borderColor = '';
              });
            }
          }
        }
      } catch (error) {
        console.error('Error checking holiday approval status:', error);
      }

      // Reveal Admin link if applicable

      // Show admin access panel for admins and owners
      const role = (profileRow?.role || session.user?.raw_user_meta_data?.role || '').toLowerCase();
      if (role === 'admin' || role === 'owner') {
        const adminPanel = document.getElementById('admin-access-panel');
        if (adminPanel) {
          adminPanel.style.display = 'block';
        }
      }
    }).catch(e => {
  if (String(e.message).includes('NO_SESSION')) { window.location.replace('home.html'); return; }
  if (String(e.message).includes('NOT_STAFF')) { window.location.replace('home.html'); return; }
      console.error(e);
    });

    async function loadDashboard(user, profileRow){
      // Resolve a friendly display name
      let displayName = profileRow?.full_name || user?.raw_user_meta_data?.full_name || (user?.email?.split('@')[0]) || 'Staff Member';
      try{
        const { data: nickRow } = await supabase.from('master_users').select('nickname').eq('user_id', user.id).maybeSingle();
        if (nickRow?.nickname) displayName = nickRow.nickname;
      }catch(_){/* ignore */}

      const siteId = profileRow?.site_id || user?.raw_user_meta_data?.site_id || null;
      const role = profileRow?.role || user?.raw_user_meta_data?.role || 'Staff';
      const roleDetail = role.charAt(0).toUpperCase() + role.slice(1);  // Capitalize first letter

      document.getElementById('welcome').textContent = `Welcome, ${displayName}`;

      // Check quiz due status
      await checkQuizStatus(user, profileRow);

      // Check for pending fuzzy match holidays
      await checkFuzzyMatches(user, profileRow);
      
      // Resolve avatar and render into ring circle
      // Check sources in priority order (most authoritative first)
      try {
        let avatarUrl = null;
        let avatarVersion = null;
        const avatarCacheKey = `staff-avatar-${user.id}`;

        // 1. First check master_users table (most authoritative/recent)
        try {
          const { data: p } = await supabase.from('master_users').select('avatar_url, updated_at').eq('user_id', user.id).maybeSingle();
          if (p?.avatar_url) {
            avatarUrl = p.avatar_url;
            console.log('Avatar from profiles:', avatarUrl);
            avatarVersion = p.updated_at || avatarVersion;
          }
        } catch(e) {
          console.warn('Error fetching avatar from profiles:', e);
        }

        // 2. If not in profiles, check staff_app_welcome
        if (!avatarUrl) {
          try {
            if (siteId) {
              const { data: saw } = await supabase
                .from('master_users')
                .select('avatar_url, updated_at')
                .eq('user_id', user.id)
                .eq('site_id', siteId)
                .order('updated_at', { ascending: false })
                .limit(1)
                .maybeSingle();
              if (saw?.avatar_url) {
                avatarUrl = saw.avatar_url;
                console.log('Avatar from staff_app_welcome:', avatarUrl);
                avatarVersion = saw.updated_at || avatarVersion;
              }
            }
          } catch(e) {
            console.warn('Error fetching avatar from staff_app_welcome:', e);
          }
        }

        // 3. Finally fall back to user metadata
        if (!avatarUrl) {
          // Get fresh user data to ensure we have the latest metadata
          const { data: { user: refreshedUser } } = await supabase.auth.getUser();
          avatarUrl = refreshedUser?.user_metadata?.avatar_url || user?.raw_user_meta_data?.avatar_url || null;
          if (avatarUrl) {
            console.log('Avatar from user metadata:', avatarUrl);
            avatarVersion = avatarVersion
              || refreshedUser?.user_metadata?.avatar_updated_at
              || refreshedUser?.updated_at
              || user?.updated_at
              || null;
          }
        }

        if (!avatarUrl) {
          console.log('No avatar found for user');
        }
        
        // Check if this is a full-body avatar (from uploads bucket)
        const isFullBodyAvatar = avatarUrl && (avatarUrl.includes('/uploads/') || avatarUrl.includes('/full_avatars/'));

        const img = document.getElementById('ring-avatar');
        if (img && avatarUrl) {
          // Build a stable cache seed so the browser can reuse the cached avatar between visits
          let versionToken = null;
          if (avatarVersion) {
            if (typeof avatarVersion === 'number') {
              versionToken = avatarVersion;
            } else {
              const parsedVersion = Date.parse(avatarVersion);
              if (!Number.isNaN(parsedVersion)) {
                versionToken = parsedVersion;
              }
            }
          }

          const separator = avatarUrl.includes('?') ? '&' : '?';
          const finalUrl = versionToken ? `${avatarUrl}${separator}v=${versionToken}` : avatarUrl;

          try {
            localStorage.setItem(avatarCacheKey, JSON.stringify({
              url: avatarUrl,
              version: versionToken || null,
              resolvedUrl: finalUrl
            }));
          } catch(_) { /* ignore storage errors */ }

          img.src = finalUrl;
          if (isFullBodyAvatar) {
            img.style.objectFit = 'contain';
            img.style.padding = '4px';
          }
        } else if (img) {
          try {
            const cached = JSON.parse(localStorage.getItem(avatarCacheKey) || 'null');
            if (cached?.resolvedUrl) {
              img.src = cached.resolvedUrl;
              if (cached?.url && (cached.url.includes('/uploads/') || cached.url.includes('/full_avatars/'))) {
                img.style.objectFit = 'contain';
                img.style.padding = '4px';
              }
            }
          } catch(_) { /* ignore */ }
        }

        // Small right-hand avatar removed from markup; we only use the ring avatar now
      } catch(_){}
      // Set top bar site/email/role
      setTopbar({ siteText: await getSiteText(supabase, siteId), email: user.email, role: roleDetail });
      if (!siteId){ document.getElementById('site-subtitle').textContent = 'Your staff dashboard'; }

      // Fetch live metrics: try an aggregated view first, fallback to counting submissions
      let valid = 0, due = 0, total = 0, ringPct = 0;
      try{
        // Prefer an aggregated view if available
        try {
          const agg = await supabase.from('v_submission_summary').select('valid_count,due_count,total_count').eq('site_id', siteId).eq('staff_name', displayName).maybeSingle();
          if (!agg.error && agg.data) {
            valid = Number(agg.data.valid_count || 0);
            due = Number(agg.data.due_count || 0);
            total = Number(agg.data.total_count || 0);
          }
        } catch(_) {
          // ignore - view might not exist
        }

        // If aggregation failed or returned nothing, compute counts heuristically
        if (!total) {
          // total submissions
          try {
            const tRes = await supabase.from('v_submission_detail').select('id', { head: true, count: 'exact' }).eq('site_id', siteId).eq('staff_name', displayName);
            if (!tRes.error) total = Number(tRes.count || 0);
          } catch(_){}

          // valid submissions (heuristic: check_value values that indicate pass)
          try {
            const vRes = await supabase.from('v_submission_detail').select('id', { head: true, count: 'exact' }).eq('site_id', siteId).eq('staff_name', displayName).in('check_value', ['Valid','OK','Pass','Good','Yes']);
            if (!vRes.error) valid = Number(vRes.count || 0);
          } catch(_){}

          // due = total - valid (fallback)
          due = Math.max(0, total - valid);
        }

        // Training/compliance percent: prefer an explicit profile field, otherwise
        // try computing from the training matrix (training_types + training_records).
        // If no training matrix exists for the site, fall back to the submissions heuristic.
        if (profileRow?.training_compliance_pct != null) {
          ringPct = Math.round(Number(profileRow.training_compliance_pct));
        } else if (profileRow?.training_percent != null) {
          ringPct = Math.round(Number(profileRow.training_percent));
        } else {
          try {
            if (siteId) {
              // Fetch the site's active training types and the user's training records
              const [{ data: types, error: typesErr }, { data: recs, error: recsErr }] = await Promise.all([
                supabase.from('training_types').select('id, validity_months, active').eq('site_id', siteId).eq('active', true),
                // training_records schema varies; attempt to match either user_id or staff_id
                supabase.from('training_records').select('*').eq('site_id', siteId).or(`user_id.eq.${user.id},staff_id.eq.${user.id}`)
              ]);
              if (!typesErr && types && types.length) {
                const comp = computeCompliance(types, recs || [], new Date());
                ringPct = comp.percent || 0;
              } else {
                ringPct = total ? Math.round((valid / total) * 100) : 0;
              }
            } else {
              ringPct = total ? Math.round((valid / total) * 100) : 0;
            }
          } catch (_){
            ringPct = total ? Math.round((valid / total) * 100) : 0;
          }
        }
      } catch(e){
        console.error('Error loading metrics', e);
      }

      // Update UI badges and progress bar
  const badgeValid = document.getElementById('badge-valid');
  const badgeDue = document.getElementById('badge-due');
  const badgeTotal = document.getElementById('badge-total');
  if (badgeValid) badgeValid.textContent = `${valid} valid`;
  if (badgeDue) badgeDue.textContent = `${due} due`;
  if (badgeTotal) badgeTotal.textContent = `${total} total`;
      try {
        const bar = document.getElementById('training-progress-bar');
        const lbl = document.getElementById('training-progress-label');
        if (bar) bar.style.width = `${ringPct}%`;
        if (lbl) lbl.textContent = `${ringPct}% Training`;
      } catch(_){}

      // Get kiosk_user_id from user profile
      const kioskUserId = profileRow?.kiosk_user_id;

      // Achievements: reflect persisted status first, then opportunistically unlock
      try{
        // Get all unlocked achievements and display them
        const achGrid = document.getElementById('achievements-grid');
        const noAchievements = document.getElementById('no-achievements');

        // 1) Read existing achievements from DB
        const existing = (kioskUserId) ? (await getUserAchievements(supabase, kioskUserId)) : [];
        const unlockedAchievements = (existing || []).filter(a => a.status === 'unlocked');

        // Define achievement details
        const achievementDetails = {
          'onboarding_completion': {
            name: 'Onboarding Complete',
            desc: 'Successfully completed the onboarding process!',
            icon: 'trophy',
            color: '#dcfce7'
          },
          'first_practice_quiz': {
            name: 'Practice Makes Perfect',
            desc: 'Completed your first practice quiz!',
            icon: 'star',
            color: '#dbeafe'
          },
          'first_training_upload': {
            name: 'Training Champion',
            desc: 'Uploaded your first training record!',
            icon: 'certificate',
            color: '#fef3c7'
          }
        };

        // Check for newly unlocked achievements (for animation)
        const viewedAchievements = JSON.parse(localStorage.getItem('viewedAchievements') || '[]');
        const newAchievements = unlockedAchievements
          .map(a => a.achievement_key)
          .filter(key => !viewedAchievements.includes(key));

        // Display achievements
        achGrid.innerHTML = '';
        if (unlockedAchievements.length === 0) {
          noAchievements.style.display = 'block';
          achGrid.style.display = 'none';
        } else {
          noAchievements.style.display = 'none';
          achGrid.style.display = 'grid';

          unlockedAchievements.forEach(achievement => {
            const key = achievement.achievement_key;
            const details = achievementDetails[key] || {
              name: 'Unknown Achievement',
              desc: 'You unlocked an achievement!',
              icon: 'medal',
              color: '#e0e7ff'
            };

            const isNew = newAchievements.includes(key);
            const achDiv = document.createElement('div');
            achDiv.className = 'ach' + (isNew ? ' new' : '');
            achDiv.setAttribute('data-key', key);
            achDiv.innerHTML = `
              <div class="ico" style="background:${details.color};">
                <img data-i8="${details.icon}" alt="${details.name}">
              </div>
              <div class="txt">
                <div class="name">${details.name}</div>
                <div class="desc">${details.desc}</div>
              </div>
            `;
            achGrid.appendChild(achDiv);

            // Wire up icon
            const img = achDiv.querySelector('img[data-i8]');
            if (img) {
              img.src = i8(details.icon);
            }
          });

          // Save viewed achievements
          if (newAchievements.length > 0) {
            const allViewed = [...viewedAchievements, ...newAchievements];
            localStorage.setItem('viewedAchievements', JSON.stringify(allViewed));
          }
        }

        const statusMap = new Map((existing||[]).map(r => [String(r.achievement_key), String(r.status||'locked')]));

        // 2) Compute new unlocks from live activity and upsert if needed
        const ensureUnlocked = async (key, condition) => {
          if (!kioskUserId) return;
          const already = statusMap.get(key) === 'unlocked';
          if (already) {
            // Achievement already unlocked
            return;
          }
          if (!condition) return;
          try {
            // Directly upsert to user_achievements table
            const { error } = await supabase
              .from('user_achievements')
              .upsert({
                kiosk_user_id: kioskUserId,
                user_id: user.id,  // Include user_id
                achievement_key: key,
                status: 'unlocked',
                progress_percent: 100,
                unlocked_at: new Date().toISOString()
              }, {
                onConflict: 'kiosk_user_id,achievement_key'
              });

            if (!error) {
              statusMap.set(key, 'unlocked');
              console.log('Achievement unlocked:', key);

              // Reload achievements display
              location.reload();
            }
          } catch (e) { console.error('Upsert failed for', key, e); }
        };

        // Check if onboarding_completion achievement is already unlocked
        // It should have been unlocked during the onboarding process
        const onboardingComplete = profileRow?.onboarding_complete || false;
        if (onboardingComplete && statusMap.get('onboarding_completion') !== 'unlocked') {
          // If profile says onboarding is complete but achievement isn't unlocked, unlock it now
          await ensureUnlocked('onboarding_completion', true);
        }

        // Check if first_practice_quiz achievement should be unlocked
        // Check if user has completed any practice quizzes
        let hasCompletedPracticeQuiz = false;
        try {
          const { data: practiceData } = await supabase
            .from('quiz_practices')
            .select('id')
            .eq('user_id', user.id)
            .limit(1)
            .maybeSingle();
          hasCompletedPracticeQuiz = Boolean(practiceData);
        } catch(_) {}

        if (hasCompletedPracticeQuiz && statusMap.get('first_practice_quiz') !== 'unlocked') {
          await ensureUnlocked('first_practice_quiz', true);
        }

        // Check if first_training_upload achievement should be unlocked
        // Check if user has uploaded any training records
        let hasUploadedTraining = false;
        try {
          const { data: trainingData } = await supabase
            .from('staff_training_records')
            .select('id')
            .eq('user_id', user.id)
            .limit(1)
            .maybeSingle();
          hasUploadedTraining = Boolean(trainingData);
        } catch(_) {}

        if (hasUploadedTraining && statusMap.get('first_training_upload') !== 'unlocked') {
          await ensureUnlocked('first_training_upload', true);
        }

        // Refresh achievement display after checking
        setTimeout(() => checkAchievements(user, profileRow, kioskUserId), 100);

      }catch(e){ console.error('Achievement check failed', e); }

      // Finally load recent activity
      await loadRecentActivity(displayName, siteId);
      
  // Meetings moved to dedicated page
    }

    async function checkFuzzyMatches(user, profileRow) {
      try {
        // Get user's profile for name matching
        const fullName = profileRow?.full_name;
        const siteId = profileRow?.site_id;

        if (!fullName || !siteId) return;

        // Check for pending fuzzy matches
        const { data: matches, error } = await supabase
          .from('fuzzy_match_holidays')
          .select('id')
          .eq('site_id', siteId)
          .or(`matched_user_id.eq.${user.id},and(staff_name.ilike.${fullName},match_status.eq.pending)`)
          .in('match_status', ['pending', 'matched']);

        if (error) {
          console.error('Error checking fuzzy matches:', error);
          return;
        }

        // Filter to only count relevant pending matches
        const pendingMatches = matches?.filter(match => true) || [];

        if (pendingMatches.length > 0) {
          document.getElementById('fuzzy-match-count').textContent = pendingMatches.length;
          document.getElementById('fuzzy-match-notification').style.display = 'block';
        }
      } catch (error) {
        console.error('Error checking fuzzy matches:', error);
      }
    }

    async function checkQuizStatus(user, profileRow) {
      const quizAlert = document.getElementById('quiz-alert');
      const quizAlertMessage = document.getElementById('quiz-alert-message');
      const quizBubble = document.getElementById('quiz-bubble');
      
      try {
        const now = new Date();
        // Helpers for current week (Sunday-Saturday)
        function getWeekStart(d=new Date()){ const c=new Date(d); const day=c.getDay(); c.setDate(c.getDate()-day); c.setHours(0,0,0,0); return c; }
        function getWeekEnd(d=new Date()){ const s=getWeekStart(d); const e=new Date(s.getTime()+6*24*60*60*1000); e.setHours(23,59,59,999); return e; }
        function getNextWeekStart(d=new Date()){ const e=getWeekEnd(d); return new Date(e.getTime()+24*60*60*1000); }

        const weekStart = getWeekStart();

        let quizTakenThisWeek = false;
        let lastCompletedDate = null;

        // Always check database for reliable cross-device sync
        try {
          // Fetch any non‑practice attempt this week
          const { data: weekly, error: weeklyErr } = await supabase
            .from('quiz_attempts')
            .select('completed_at,created_at')
            .eq('user_id', user.id)
            .eq('is_practice', false)
            .gte('created_at', weekStart.toISOString())
            .lte('created_at', getWeekEnd().toISOString())
            .limit(1);
          if (!weeklyErr && weekly && weekly.length) {
            quizTakenThisWeek = true;
            const attempt = weekly[0];
            lastCompletedDate = attempt.completed_at || attempt.created_at;
          }
        } catch(_) {}

        // If still not found, fetch the last attempt (any week) to compute next due date / upcoming window
        if (!lastCompletedDate) {
          try {
            const { data: lastAny, error: lastErr } = await supabase
              .from('quiz_attempts')
              .select('completed_at,created_at')
              .eq('user_id', user.id)
              .eq('is_practice', false)
              .order('completed_at', { ascending: false, nullsFirst: false })
              .order('created_at', { ascending: false })
              .limit(1)
              .maybeSingle();
            if (!lastErr && lastAny) {
              lastCompletedDate = lastAny.completed_at || lastAny.created_at || null;
            }
          } catch(_) {}
        }

        // Derive nextDue
        let nextDue = null;
        if (quizTakenThisWeek) {
          // Next due is start of next week
            nextDue = getNextWeekStart();
        } else if (profileRow?.next_quiz_due) {
          nextDue = new Date(profileRow.next_quiz_due);
        } else if (lastCompletedDate) {
          nextDue = new Date(lastCompletedDate);
          nextDue.setDate(nextDue.getDate() + 7);
        }

        // Logic to show/hide banner
        if (quizTakenThisWeek) {
          // Hide the alert entirely when completed
          quizAlert.style.display = 'none';
          quizBubble.classList.remove('due');
          return; // Nothing else to do
        }

        // If no record at all (first time) OR overdue
        if (!nextDue || now >= nextDue) {
          quizAlert.style.display = 'block';
          quizBubble.classList.add('due');
          if (!nextDue) {
            quizAlertMessage.textContent = 'Take your first weekly quiz now!';
          } else {
            const overdueDays = Math.floor((now - nextDue) / (1000 * 60 * 60 * 24));
            quizAlertMessage.textContent = overdueDays > 0 ? `Quiz is ${overdueDays} day${overdueDays>1?'s':''} overdue!` : 'Your weekly quiz is due today!';
          }
        } else {
          const hoursUntilDue = (nextDue - now) / (1000 * 60 * 60);
            if (hoursUntilDue <= 24) {
              quizAlert.style.display = 'block';
              quizAlert.style.background = 'linear-gradient(135deg, #3b82f6, #1d4ed8)';
              quizAlertMessage.textContent = `Quiz due in ${Math.ceil(hoursUntilDue)} hour${Math.ceil(hoursUntilDue)>1?'s':''}`;
            } else {
              quizAlert.style.display = 'none';
              quizBubble.classList.remove('due');
            }
        }
      } catch (error) {
        console.error('Error checking quiz status:', error);
      }
    }

    async function loadRecentActivity(displayName, siteId){
      const loadingEl = document.getElementById('recent-scans-loading');
      const timeline = document.getElementById('timeline');
      const emptyEl = document.getElementById('recent-scans-empty');
      try{
        let rows = [];
        if (siteId){
          const v = await supabase
            .from('v_submission_detail')
            .select('submitted_at,item_name,room,check_type,check_value,staff_name,site_id')
            .eq('site_id', siteId)
            .eq('staff_name', displayName)
            .order('submitted_at', { ascending:false })
            .limit(10);
          if (!v.error && v.data) rows = v.data;
        }
        if (!rows?.length){
          const s = await supabase
            .from('submissions')
            .select('submitted_at, staff_name, comment')
            .eq('staff_name', displayName)
            .order('submitted_at', { ascending:false })
            .limit(5);
          if (!s.error && s.data){ rows = s.data.map(r => ({ submitted_at:r.submitted_at, item_name:'—', room:'—', check_type:'—', check_value:r.comment||'Done' })); }
        }
        loadingEl.style.display='none';
        if (!rows?.length){ emptyEl.style.display='block'; return { count: 0 }; }
        timeline.style.display='grid';
        timeline.innerHTML = rows.map(r => `
          <div class="t-item">
            <div class="muted">${fmtDate(r.submitted_at)}</div>
            <div><strong>${r.item_name || '—'}</strong> · ${r.check_type || '—'} → <span class="muted">${r.check_value || '—'}</span></div>
            <div class="pill">${r.room || '—'}</div>
          </div>`).join('');
        return { count: rows.length };
      } catch(e){
        console.error('Activity load error', e);
        loadingEl.style.display='none';
        emptyEl.style.display='block';
        return { count: 0 };
      }
    }

    // No training table on the new Home. We'll surface training in its own page.
    
  // Meetings code removed from home page
  </script>

  <script>
    (function(){
      function i8(name, opts){
        opts = opts || {}; 
        var style = opts.style || 'dusk';
        var size  = (opts.size == null) ? 48 : opts.size; // default 48px
        var base  = 'https://img.icons8.com';
        // Icons8 OMG-IMG pattern is style/size/name.png
        var path  = [style, String(size || 48), encodeURIComponent(name) + '.png'].join('/');
        return base + '/' + path;
      }
      function setIcon(el){
        var name  = el.getAttribute('data-i8');
        var size  = el.getAttribute('data-i8-size');
        var style = el.getAttribute('data-i8-style') || 'fluency';
        var fallback = (el.getAttribute('data-i8-fallback') || '').toLowerCase();
        
        if (fallback === 'auto') {
          var stylesToTry = [style, 'fluency', 'color'];
          var idx = 0;
          function tryNext(){
            if (idx >= stylesToTry.length) { el.onerror = null; return; }
            var url = i8(name, {style: stylesToTry[idx++], size: size ? parseInt(size,10) : undefined});
            if (el.src !== url) el.src = url; else tryNext();
          }
          el.onerror = tryNext;
          tryNext();
        } else {
          // Strict mode: stay in the requested style (default: dusk)
          var url = i8(name, {style: style, size: size ? parseInt(size,10) : undefined});
          el.src = url;
          el.onerror = null;
        }
        if (!el.alt) el.alt = (name || '').replace(/[\-_]/g,' ');
      }
      function wireIcons(){
        document.querySelectorAll('img[data-i8]').forEach(setIcon);
      }
      if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', wireIcons);
      else wireIcons();
      window.i8 = i8; // optional helper for manual usage
    })();
  </script>
  
  <script>
    // Setup Help Tour Button
    function setupHelpTourButton(profileRow, session) {
      const helpBtn = document.getElementById('help-tour-btn');
      if (!helpBtn) return;

      helpBtn.addEventListener('click', () => {
        if (!window.CLWelcomeTour) {
          console.warn('Welcome tour not available');
          return;
        }

        const role = (profileRow?.role || session.user?.raw_user_meta_data?.role || '').toLowerCase();
        
        const steps = [
          { 
            selector: '#welcome', 
            title: 'Welcome to CheckLoop Staff! 👋', 
            body: 'This is your personal dashboard where you can access all staff tools, track your progress, and stay compliant with training requirements.' 
          },
          { 
            selector: '.nav', 
            title: 'Navigation Menu', 
            body: 'Use the top navigation to access different areas: Staff tools, Training modules, Admin functions (if you have access), and your profile settings.' 
          },
          { 
            selector: '#compliance-ring', 
            title: 'Your Training Compliance 📊', 
            body: 'This ring shows your overall training completion status. Keep it at 100% to maintain compliance! The ring fills up as you complete required training modules.' 
          },
          { 
            selector: '.bubble-actions', 
            title: 'Quick Action Hub ⚡', 
            body: 'These are your most-used tools: Scans for patient records, Training for courses, Holidays for time off, and Quiz for weekly assessments.' 
          },
          { 
            selector: 'a[href="staff-scans.html"]', 
            title: 'My Scans 📋', 
            body: 'Access and manage patient scan records. This is where you\'ll spend most of your clinical work time.' 
          },
          { 
            selector: 'a[href="staff-training.html"]', 
            title: 'Training Center 🎓', 
            body: 'Complete mandatory training modules, view certificates, and track your learning progress. Essential for maintaining compliance!' 
          },
          { 
            selector: '#quiz-bubble', 
            title: 'Weekly Quiz 🧠', 
            body: 'Complete your required weekly knowledge assessments here. The bubble will glow when a quiz is due!' 
          },
          { 
            selector: '.progress-wrap', 
            title: 'Training Progress Tracker 📈', 
            body: 'This bar shows your overall training completion percentage. Aim to keep this at 100% to stay compliant with requirements.' 
          },
          { 
            selector: '#achievements-grid', 
            title: 'Your Achievements 🏆', 
            body: 'Earn badges and recognition for completing training, maintaining compliance, and reaching milestones. Show off your progress!' 
          },
          { 
            selector: '#timeline', 
            title: 'Recent Activity 📅', 
            body: 'Track your recent scans, training completions, and other activities. Great for staying on top of your work!' 
          },
          { 
            selector: '.topbar .pill', 
            title: 'Your Profile Info 👤', 
            body: 'These pills show your current site, email, and role. Make sure everything looks correct!' 
          }
        ];

        // Add admin-specific step if user is admin/owner
        if (role === 'admin' || role === 'owner') {
          steps.push({ 
            selector: '#admin-access-panel', 
            title: 'Admin Panel 🔧', 
            body: 'As an admin, you have access to the Admin Site for managing users, viewing reports, and configuring system settings.' 
          });
        }

        // Add final step
        steps.push({ 
          selector: '#logout-btn', 
          title: 'Sign Out Securely 🔒', 
          body: 'Always remember to sign out when you\'re done, especially on shared computers. Security is important! You\'re all set - enjoy using CheckLoop!' 
        });

        window.CLWelcomeTour.show(steps);
      });
    }
  </script>

  <script>
    // Create animated particles - only on staff home page
    // DISABLED: Commenting out particle animation to improve performance
    // Uncomment the block below to re-enable particles
    /*
    (function() {
      function createParticles() {
        // Only create particles if we're on the staff home page
        if (!document.body.classList.contains('staff-home-particles')) return;

        const particlesContainer = document.getElementById('particles');
        if (!particlesContainer) return;

        // Clear any existing particles
        particlesContainer.innerHTML = '';

        const particleCount = 35;
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.className = 'particle';

          // Randomize starting positions around screen edges
          const edge = Math.random() * 4;
          if (edge < 1) {
            // Bottom edge
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = '100vh';
          } else if (edge < 2) {
            // Left edge
            particle.style.left = '-10px';
            particle.style.top = Math.random() * 100 + '%';
          } else if (edge < 3) {
            // Right edge
            particle.style.left = '100vw';
            particle.style.top = Math.random() * 100 + '%';
          } else {
            // Top edge (some particles start from top)
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = '-10px';
          }

          // Random animation delay to stagger particles
          particle.style.animationDelay = Math.random() * 40 + 's';

          // Vary animation duration slightly for more natural feel
          const baseDuration = 25 + Math.random() * 15; // 25-40s
          particle.style.animationDuration = baseDuration + 's';

          particlesContainer.appendChild(particle);
        }
      }

      // Add mouse tracking for interactive effects
      document.addEventListener('mousemove', function(e) {
        const cards = document.querySelectorAll('.stat-card');
        cards.forEach(card => {
          const rect = card.getBoundingClientRect();
          const x = ((e.clientX - rect.left) / rect.width) * 100;
          const y = ((e.clientY - rect.top) / rect.height) * 100;
          card.style.setProperty('--mouse-x', x + '%');
          card.style.setProperty('--mouse-y', y + '%');
        });
      });

      // Initialize particles when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', createParticles);
      } else {
        createParticles();
      }

      // Refresh particles every 2 minutes to keep the effect dynamic
      setInterval(createParticles, 120000);
    })();
    */
  </script>

  <script src="welcome-tour.js"></script>
  <!-- Debug Console - Persistent across all pages -->
  <script src="debug-console.js"></script>
</body>
</html>
