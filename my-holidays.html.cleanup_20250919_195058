<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CheckLoop ‚Äî My Holidays</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://img.icons8.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;900&display=swap" rel="stylesheet">
  <script src="config.js"></script>
  <link rel="stylesheet" href="staff.css">
  <!-- Flatpickr modern date picker -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    /* --- Glass overlay for approval gate --- */
    .glass-overlay {
      position: fixed;
      inset: 0;
      display: none;               /* toggled to flex in JS */
      align-items: center;
      justify-content: center;
      z-index: 9999;
      backdrop-filter: blur(12px) saturate(140%);
      -webkit-backdrop-filter: blur(12px) saturate(140%);
      background: rgba(8, 12, 24, 0.55);
    }
    .glass-card {
      width: min(640px, 92vw);
      border-radius: 18px;
      padding: 22px;
      background: linear-gradient(145deg, rgba(255,255,255,0.08), rgba(255,255,255,0.04));
      border: 1px solid rgba(255,255,255,0.16);
      box-shadow: 0 12px 40px rgba(0,0,0,0.35), inset 0 1px 0 rgba(255,255,255,0.1);
      color: var(--white);
      text-align: left;
    }
    .glass-card .title {
      font-size: 22px;
      font-weight: 900;
      letter-spacing: .2px;
      margin: 0 0 6px 0;
      display:flex;
      align-items:center;
      gap:10px;
    }
    .glass-card .title .emoji {
      font-size: 26px;
      line-height: 1;
      filter: drop-shadow(0 2px 6px rgba(0,0,0,0.25));
    }
    .glass-card .subtitle {
      color: var(--muted);
      margin: 0 0 12px 0;
    }
    .glass-card .badge {
      display:inline-block;
      padding:6px 10px;
      border-radius:999px;
      font-weight:700;
      font-size:12px;
      color:#e7f9ff;
      background: linear-gradient(90deg, rgba(59,130,246,.25), rgba(14,165,233,.25));
      border:1px solid rgba(59,130,246,.45);
      margin-bottom:12px;
    }
    .glass-actions {
      display:flex;
      gap:10px;
      margin-top:16px;
      flex-wrap:wrap;
    }
    .btn-solid {
      padding:10px 16px;
      border-radius:12px;
      font-weight:700;
      border:1px solid rgba(255,255,255,0.2);
      background: linear-gradient(135deg, #4338ca, #3b82f6);
      color:white;
      cursor:pointer;
    }
    .btn-ghost {
      padding:10px 16px;
      border-radius:12px;
      font-weight:700;
      border:1px solid rgba(255,255,255,0.2);
      background: rgba(255,255,255,0.06);
      color:white;
      cursor:pointer;
    }
    /* Holiday-specific overrides while maintaining staff.css base */
    .progress-bar {
      width: 100%;
      height: 12px;
      background: rgba(255,255,255,0.1);
      border-radius: 999px;
      overflow: hidden;
      margin-top: 12px;
      border: 1px solid var(--border-color);
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--success), var(--accent));
      transition: width 0.3s ease;
    }

    .status-pending {
      background: rgba(255, 214, 69, 0.2);
      color: var(--warning);
      border: 1px solid rgba(255, 214, 69, 0.3);
    }

    .status-approved {
      background: rgba(77, 220, 159, 0.2);
      color: var(--success);
      border: 1px solid rgba(77, 220, 159, 0.3);
    }

    .status-rejected {
      background: rgba(255, 125, 125, 0.2);
      color: var(--danger);
      border: 1px solid rgba(255, 125, 125, 0.3);
    }

    .booking-status {
      padding: 6px 12px;
      border-radius: 8px;
      font-size: 12px;
      font-weight: 600;
    }

    .booking-item {
      background: rgba(255,255,255,0.05);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 12px;
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 16px;
      transition: all 0.3s ease;
    }

    .booking-item:hover {
      background: rgba(255,255,255,0.08);
      transform: translateY(-2px);
      box-shadow: var(--shadow);
    }

    /* Improve visibility of booking reason text on dark background */
    .booking-reason { color: #e2e8f0; font-size: 13px; margin-top: 4px; font-weight: 600; opacity: .95; }
    .booking-reason strong { color: #ffffff; font-weight: 800; }
    .dest-emoji{ display:inline-block; margin-right:6px; font-size:16px; filter: drop-shadow(0 1px 2px rgba(0,0,0,.25)); }

    .booking-dates {
      font-weight: 700;
      color: var(--white);
    }

    .hours-display {
      color: var(--muted);
      font-size: 14px;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr auto;
      gap: 16px;
      align-items: end;
      margin-bottom: 16px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .form-label {
      font-size: 13px;
      font-weight: 600;
      color: var(--white);
    }

    .form-input {
      padding: 12px 14px;
      border: 1px solid var(--border-color);
      border-radius: 10px;
      font-size: 14px;
      background: rgba(255,255,255,0.05);
      color: var(--white);
    }

    .form-input::placeholder {
      color: var(--muted);
    }

    .form-input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      background: rgba(255,255,255,0.08);
    }

    /* Ensure illus-circle is properly styled */
    .illus-circle {
      display: grid;
      place-items: center;
      background: linear-gradient(135deg, var(--glass), var(--glass-2));
      border: 2px solid var(--border-color);
      border-radius: 16px;
      box-shadow: var(--shadow);
    }

    /* --- Calculation card styles --- */
    #calculation-result.calc-card {
      display: grid;
      gap: 12px;
      border-radius: 14px;
      padding: 14px;
      background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.03));
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow);
    }
    .calc-header {
      font-weight: 800;
      letter-spacing: .2px;
      color: var(--white);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .calc-header::before{
      content: "üóìÔ∏è";
      font-size: 18px;
    }
    .calc-list{
      max-height: 220px;
      overflow: auto;
      border: 1px dashed rgba(255,255,255,0.15);
      border-radius: 10px;
      padding: 8px;
      background: rgba(255,255,255,0.03);
    }
    .calc-row{
      display:flex;
      align-items:center;
      justify-content:space-between;
      padding:8px 10px;
      border-radius:8px;
      transition:.2s ease;
      border:1px solid rgba(255,255,255,0.06);
      background: rgba(255,255,255,0.02);
      margin:6px 0;
    }
    .calc-row:hover{ background: rgba(255,255,255,0.06); }
    .calc-date{ color: var(--white); font-weight:600; }
    .calc-badge{
      font-weight:700;
      font-size:12px;
      padding:6px 10px;
      border-radius:999px;
      background: rgba(59,130,246,.15);
      border:1px solid rgba(59,130,246,.35);
      color:#e6f0ff;
      white-space:nowrap;
    }
    .calc-total{
      margin-top: 4px;
      display:flex;
      align-items:center;
      justify-content:space-between;
      background: rgba(77, 220, 159, 0.10);
      border:1px solid rgba(77, 220, 159, 0.35);
      padding:10px 12px;
      border-radius:10px;
    }
    .calc-total-label{ color: var(--white); font-weight:800; }
    .calc-total-value{ color: var(--white); font-weight:900; font-size:18px; }

    /* Holiday image thumbnail styles */
    .holiday-image-card {
      margin-top: 8px;
      border-radius: 12px;
      overflow: hidden;
      border: 1px solid var(--border-color);
      background: rgba(255,255,255,0.03);
      max-width: 200px;
    }
    .holiday-image-thumb {
      width: 100%;
      height: auto;
      display: block;
      cursor: pointer;
      transition: transform 0.3s ease;
    }
    .holiday-image-thumb:hover {
      transform: scale(1.05);
    }
    .holiday-image-caption {
      padding: 8px;
      font-size: 11px;
      color: var(--muted);
      text-align: center;
      font-weight: 600;
      background: rgba(0,0,0,0.2);
    }
  </style>
</head>
<body>
  <div class="bg"><div class="wave"></div><div class="wave wave2"></div></div>
  <div class="mesh"><div class="m1"></div><div class="m2"></div><div class="m3"></div></div>

  <main class="content">
    <!-- Holiday approval gate overlay -->
    <div id="approval-overlay" class="glass-overlay">
      <div class="glass-card">
        <div class="badge">Access pending</div>
        <div class="title"><span class="emoji">üõÇ</span> Holiday access awaiting approval</div>
        <p class="subtitle">Your manager needs to approve your holiday entitlement before you can request time off.</p>
        <ul style="margin:0 0 10px 18px; color:var(--muted);">
          <li>Once approved, your allowance will appear here automatically.</li>
          <li>You can still browse, but requesting time off is disabled.</li>
        </ul>
        <div class="glass-actions">
          <button id="approval-refresh" class="btn-solid">Refresh status</button>
          <button id="approval-home" class="btn-ghost">Back to Home</button>
        </div>
      </div>
    </div>
    <div class="topbar panel" style="position:relative;">
      <div class="halo"></div>
      <div class="nav seg-nav">
        <!-- Navigation will be rendered by staff-common.js -->
      </div>
      <div class="spacer"></div>
      <div class="pill" id="site-pill">Site: ‚Äî</div>
      <div class="pill" id="email-pill">‚Äî</div>
      <div class="pill" id="role-pill">‚Äî</div>
      <button class="btn admin-portal-btn" id="admin-portal-btn" title="Access Admin Dashboard" style="display:none; background: linear-gradient(135deg, #4338ca, #3b82f6); margin-right: 8px;">Admin Portal</button>
      <button class="btn" id="logout-btn">Sign Out</button>
    </div>


    <section class="panel g-12" style="margin:0; position:relative; overflow:hidden;">
      <div class="halo"></div>
      
      <div class="hero" style="margin-bottom: 20px;">
        <div>
          <div class="h1" style="font-size:28px;">My Holiday Allowance</div>
          <div class="subtitle">Manage your holiday requests and track your allowance</div>
        </div>
      </div>

      <!-- Holiday Statistics -->
      <div class="stat-row">
        <div class="stat-card g-4" style="--card-index: 0;">
          <div class="icon-wrap" style="--c: var(--stat-1-bg); --i: var(--stat-1-color);">üìä</div>
          <div>
            <div class="stat-num" id="total-allowance">0</div>
            <div class="stat-label">Total Allowance <span id="allowance-unit">hours</span></div>
          </div>
        </div>

        <div class="stat-card g-4" style="--card-index: 1;">
          <div class="icon-wrap" style="--c: var(--stat-2-bg); --i: var(--stat-2-color);">üìÖ</div>
          <div>
            <div class="stat-num" id="used-holidays">0</div>
            <div class="stat-label">Used <span id="used-unit">hours</span></div>
          </div>
        </div>

        <div class="stat-card g-4" style="--card-index: 2;">
          <div class="icon-wrap" style="--c: var(--stat-3-bg); --i: var(--stat-3-color);">‚è∞</div>
          <div style="flex: 1;">
            <div class="stat-num" id="remaining-holidays">0</div>
            <div class="stat-label">Remaining <span id="remaining-unit">hours</span></div>
            <div class="progress-bar">
              <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
            </div>
            <div class="muted" id="pending-line" style="font-size:12px; margin-top:6px; display:none;">
              Pending: <span id="pending-amount">0</span> <span id="pending-unit">sessions</span>
              ‚Ä¢ After pending: <span id="remaining-after-pending">0</span> <span id="remaining-after-unit">sessions</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Booking Form -->
      <div class="panel" style="margin-top: 20px;">
        <div class="panel-header">
          <div class="illus-circle" style="width:48px;height:48px;"><img src="https://img.icons8.com/fluency/48/plus.png" alt="Request" style="width:32px;height:32px;"/></div>
          <h3 class="panel-title" style="margin: 0;">Request Time Off</h3>
        </div>

        <div class="form-row">
          <div class="form-group" style="grid-column: 1 / span 2;">
            <label class="form-label">Date Range</label>
            <input id="holiday-range" class="form-input" placeholder="Select holiday dates‚Ä¶" autocomplete="off" value="" />
            <div class="muted" style="font-size:12px; margin-top:6px;">Click start date, then end date (click once for a single day).</div>
          </div>
          <button class="btn" id="calculate-btn" style="padding:10px 20px;">Calculate</button>
        </div>

        <div id="calculation-result" class="calc-card" style="display:none; margin:16px 0;">
          <div class="calc-header">Time Off Calculation</div>
          <div id="calc-list" class="calc-list"></div>
          <div class="calc-total">
            <span class="calc-total-label">Total</span>
            <span class="calc-total-value"><span id="calc-total">0</span> <span id="calc-unit">hours</span></span>
          </div>
        </div>

        <!-- Overlap Detection Section -->
        <div id="overlap-section" class="calc-card" style="display:none; margin:16px 0; background: linear-gradient(145deg, rgba(251,191,36,0.08), rgba(245,158,11,0.04)); border: 1px solid rgba(251,191,36,0.25);">
          <div class="calc-header" style="color: #fbbf24;">‚ö†Ô∏è Other Staff on Holiday During This Period</div>
          <div id="overlap-list" style="padding: 12px;">
            <!-- Overlapping holidays will be loaded here -->
          </div>
        </div>

        <div class="form-group" style="margin-top:16px;">
          <label class="form-label">Reason (optional)</label>
          <textarea id="reason" class="form-input" rows="3" placeholder="Holiday, personal time, etc."></textarea>
        </div>

        <button class="btn" id="submit-request" style="margin-top:16px; display:none;">Submit Request</button>
        <div id="request-msg" style="margin-top:12px; font-weight:600; color:var(--white);"></div>
      </div>

      <!-- Bookings List -->
      <div class="panel" style="margin-top: 20px;">
        <div class="panel-header">
          <div class="illus-circle" style="width:48px;height:48px;"><img src="https://img.icons8.com/fluency/48/list.png" alt="Requests" style="width:32px;height:32px;"/></div>
          <h3 class="panel-title" style="margin: 0;">Your Holiday Requests</h3>
        </div>
        <div id="bookings-container">
          <!-- Bookings will be loaded here -->
        </div>
      </div>
    </section>

    <div class="muted" style="text-align:center; font-size:12px; padding:10px 0;">¬© CheckLoop ‚Ä¢ Staff</div>
  </main>

  <script type="module">
    import { initSupabase, requireStaffSession, getSiteText, setTopbar, handleAuthState, navActivate, attachLogout } from './staff-common.js';

    // Fun destination icon helper
    function destinationIconHTML(text){
      if (!text) return '';
      const t = String(text).toLowerCase();
      // Keyword ‚Üí emoji map (cities, regions, countries). Put specific places first.
      const entries = [
        // --- Cities & popular destinations ---
        ['paris','üóº'], ['new york','üóΩ'], ['nyc','üóΩ'], ['disney','üè∞'], ['orlando','üè∞'], ['las vegas','üé∞'], ['vegas','üé∞'],
        ['london','üé°'], ['rome','üèõÔ∏è'], ['barcelona','üåÜ'], ['madrid','üèüÔ∏è'], ['venice','üö§'], ['florence','üñºÔ∏è'],
        ['amsterdam','üö≤'], ['berlin','üß±'], ['munich','üç∫'], ['athens','üè∫'], ['dubai','üèôÔ∏è'], ['abu dhabi','üèúÔ∏è'],
        ['tokyo','üóº'], ['kyoto','‚õ©Ô∏è'], ['seoul','üïç'], ['bangkok','üõï'], ['singapore','üåá'], ['sydney','üåâ'],
        ['melbourne','üéæ'], ['auckland','üóª'], ['toronto','üßä'], ['vancouver','üå≤'], ['montreal','üé≠'],
        ['cancun','üèñÔ∏è'], ['mexico city','ü¶Ö'], ['rio','üéâ'], ['buenos aires','‚öΩ'], ['cape town','üóª'],
        ['cairo','üóø'], ['marrakech','üïå'], ['istanbul','üïå'], ['prague','üéª'], ['vienna','üéº'], ['budapest','üåâ'],
        ['reykjavik','‚ùÑÔ∏è'], ['oslo','üõ∂'], ['stockholm','üö§'], ['copenhagen','üö¥'], ['helsinki','üßä'],
        // --- Activities / generic ---
        ['beach','üèñÔ∏è'], ['mountain','üèîÔ∏è'], ['ski','üéø'], ['cruise','üõ≥Ô∏è'], ['camping','üèïÔ∏è'], ['safari','ü¶í'],
        // --- Countries / regions ---
        ['france','üá´üá∑'], ['spain','üá™üá∏'], ['italy','üáÆüáπ'], ['greece','üá¨üá∑'], ['portugal','üáµüáπ'],
        ['germany','üá©üá™'], ['netherlands','üá≥üá±'], ['belgium','üáßüá™'], ['switzerland','üá®üá≠'], ['austria','üá¶üáπ'],
        ['czech','üá®üáø'], ['hungary','üá≠üá∫'], ['poland','üáµüá±'], ['croatia','üá≠üá∑'], ['slovenia','üá∏üáÆ'], ['malta','üá≤üáπ'],
        ['turkey','üáπüá∑'], ['cyprus','üá®üáæ'], ['iceland','üáÆüá∏'], ['norway','üá≥üá¥'], ['sweden','üá∏üá™'], ['denmark','üá©üá∞'], ['finland','üá´üáÆ'],
        ['ireland','üáÆüá™'], ['northern ireland','üè¥'], ['scotland','üè¥'], ['wales','üè¥'], ['uk','üá¨üáß'], ['england','üè¥'],
        ['morocco','üá≤üá¶'], ['egypt','üá™üá¨'], ['south africa','üáøüá¶'],
        ['united states','üá∫üá∏'], ['usa','üá∫üá∏'], ['america','üá∫üá∏'], ['canada','üá®üá¶'], ['mexico','üá≤üáΩ'],
        ['brazil','üáßüá∑'], ['argentina','üá¶üá∑'], ['chile','üá®üá±'],
        ['uae','üá¶üá™'], ['qatar','üá∂üá¶'], ['oman','üá¥üá≤'], ['jordan','üáØüá¥'],
        ['india','üáÆüá≥'], ['sri lanka','üá±üá∞'], ['thailand','üáπüá≠'], ['vietnam','üáªüá≥'], ['indonesia','üáÆüá©'], ['bali','üå¥'],
        ['philippines','üáµüá≠'], ['malaysia','üá≤üáæ'], ['singapore','üá∏üá¨'], ['japan','üáØüáµ'], ['china','üá®üá≥'], ['south korea','üá∞üá∑'],
        ['australia','üá¶üá∫'], ['new zealand','üá≥üáø']
      ];

      const found = entries.find(([k]) => t.includes(k));
      if (!found) return '';
      const emoji = found[1];
      return `<span class="dest-emoji" title="${text}">${emoji}</span>`;
    }

    (async function() {
      const supabase = await initSupabase();
      // Make supabase available globally for Admin Portal button
      window.supabase = supabase;
      handleAuthState(supabase);
      navActivate('holidays');
      attachLogout(supabase);

      // Setup Flatpickr for range selection
      // Using 2025 as the holiday year to match current data
      const holidayYear = 2025; // TODO: Get this from holiday year settings

      // Ensure no pre-filled value from browser restoration/autofill
      const holidayInput = document.getElementById('holiday-range');
      if (holidayInput) holidayInput.value = '';

      const rangePicker = flatpickr("#holiday-range", {
        mode: "range",
        dateFormat: "Y-m-d",
        altInput: true,
        altFormat: "D, j M Y",
        weekNumbers: true,
        defaultDate: null, // explicitly no default
        minDate: new Date(holidayYear, 0, 1), // Start from Jan 1 of holiday year
        maxDate: new Date(holidayYear, 11, 31), // End at Dec 31 of holiday year
        onReady: function(selectedDates, dateStr, instance){
          // Clear any restored selection from bfcache/autofill
          instance.clear();
        }
      });
      window.rangePicker = rangePicker;

      try {
        const { session, profileRow } = await requireStaffSession(supabase);
        const user = session.user;

        // Check if holidays are approved for this user in master_users table
        const { data: userData, error: approvalError } = await supabase
          .from('master_users')
          .select('holiday_approved')
          .eq('auth_user_id', user.id)
          .single();

        if (approvalError) {
          console.error('Error checking holiday approval:', approvalError);
          alert('Unable to verify holiday access. Please try again later.');
          window.location.href = 'staff.html';
          return;
        }

        if (!userData || userData.holiday_approved !== true) {
          // Show glass overlay and block the page behind it.
          const overlay = document.getElementById('approval-overlay');
          overlay.style.display = 'flex';

          // Wire actions
          const refreshBtn = document.getElementById('approval-refresh');
          const homeBtn = document.getElementById('approval-home');

          refreshBtn?.addEventListener('click', async () => {
            // Recheck approval flag
            const { data: reUser } = await supabase
              .from('master_users')
              .select('holiday_approved')
              .eq('auth_user_id', user.id)
              .single();
            if (reUser?.holiday_approved === true) {
              overlay.style.display = 'none';
              // Proceed with normal load
              // (do nothing here; page continues)
            } else {
              // cute nudge
              refreshBtn.textContent = 'Still pending...';
              setTimeout(() => (refreshBtn.textContent = 'Refresh status'), 1200);
            }
          });

          homeBtn?.addEventListener('click', () => {
            window.location.href = 'staff.html';
          });

          // Stop further loading on this page (keep overlay visible)
          return;
        }

        const siteId = profileRow?.site_id || 1;

        // Set topbar
        const roleDetail = profileRow?.role || user?.raw_user_meta_data?.role || 'Staff';
        setTopbar({
          siteText: await getSiteText(supabase, siteId),
          email: user.email,
          role: roleDetail.charAt(0).toUpperCase() + roleDetail.slice(1)
        });

        // Load holiday data from master_users (single source of truth)
        async function loadHolidayData() {
          console.log('[my-holidays] Loading holiday data for user:', user.email);

          // Get all holiday data directly from master_users table
          const { data: holidaySummary, error: summaryError } = await supabase
            .from('master_users')
            .select('*')
            .eq('auth_user_id', user.id)
            .single();

          console.log('[my-holidays] Master users result:', { holidaySummary, summaryError });

          if (!holidaySummary) {
            document.getElementById('holidays').innerHTML = `
              <div class="panel-header">
                <div class="illus-circle" style="width:64px;height:64px;"><img src="https://img.icons8.com/fluency/48/calendar.png" alt="Holidays" style="width:48px;height:48px;"/></div>
                <div class="panel-title">Holiday Setup Required</div>
              </div>
              <p>Please complete your welcome process first to set up your holiday allowance.</p>
              <button class="btn" onclick="window.location.href='staff-welcome.html'">Complete Setup</button>
            `;
            return;
          }

          // All working pattern data is now in master_users
          window.isGP = holidaySummary.is_gp;
          
          // Store working pattern data from master_users for calculations
          window.workingPattern = {
            monday_hours: holidaySummary.monday_hours || 0,
            tuesday_hours: holidaySummary.tuesday_hours || 0,
            wednesday_hours: holidaySummary.wednesday_hours || 0,
            thursday_hours: holidaySummary.thursday_hours || 0,
            friday_hours: holidaySummary.friday_hours || 0,
            saturday_hours: holidaySummary.saturday_hours || 0,
            sunday_hours: holidaySummary.sunday_hours || 0,
            monday_sessions: holidaySummary.monday_sessions || 0,
            tuesday_sessions: holidaySummary.tuesday_sessions || 0,
            wednesday_sessions: holidaySummary.wednesday_sessions || 0,
            thursday_sessions: holidaySummary.thursday_sessions || 0,
            friday_sessions: holidaySummary.friday_sessions || 0,
            saturday_sessions: holidaySummary.saturday_sessions || 0,
            sunday_sessions: holidaySummary.sunday_sessions || 0,
            total_hours: holidaySummary.total_hours || 0,
            total_sessions: holidaySummary.total_sessions || 0
          };

          // Helper function to format hours as HH:MM
          function formatHours(decimalHours) {
            const hours = Math.floor(decimalHours || 0);
            const minutes = Math.round(((decimalHours || 0) % 1) * 60);
            return `${hours}:${minutes.toString().padStart(2, '0')}`;
          }

          // Update display using consolidated data
          const isGP = holidaySummary.is_gp;
          console.log('[my-holidays] Updating display - isGP:', isGP, 'summary:', holidaySummary);

          // Compute totals and used amount
          let totalAllowance = 0;
          let usedAmount = 0;
          let remaining = 0;

          // Derive "used" from approved holiday requests within the selected holiday year
          const year = holidaySummary.holiday_year || new Date().getFullYear();
          const { data: approvedRows, error: usedErr } = await supabase
            .from('4_holiday_requests')
            .select('total_days, start_date, status')
            .eq('auth_user_id', user.id)
            .eq('status', 'approved')
            .gte('start_date', `${year}-01-01`)
            .lte('start_date', `${year}-12-31`);

          if (usedErr) {
            console.warn('[my-holidays] Could not load used holidays:', usedErr);
          }

          usedAmount = (approvedRows || []).reduce((sum, r) => sum + (parseFloat(r.total_days) || 0), 0);

          // Also get pending requests to preview impact
          const { data: pendingRows, error: pendingErr } = await supabase
            .from('4_holiday_requests')
            .select('total_days, start_date, status')
            .eq('user_id', user.id)
            .eq('status', 'pending')
            .gte('start_date', `${year}-01-01`)
            .lte('start_date', `${year}-12-31`);
          if (pendingErr) {
            console.warn('[my-holidays] Could not load pending holidays:', pendingErr);
          }
          const pendingAmount = (pendingRows || []).reduce((sum, r) => sum + (parseFloat(r.total_days) || 0), 0);

          if (window.isGP) {
            // GP uses sessions - from master_users final_annual_sessions
            totalAllowance = parseFloat(holidaySummary.final_annual_sessions || 0);
          } else {
            // Non-GP uses hours - from master_users final_annual_hours
            totalAllowance = parseFloat(holidaySummary.final_annual_hours || 0);
          }

          remaining = totalAllowance - usedAmount;
          const remainingAfterPending = remaining - pendingAmount;

          if (window.isGP) {
            // GP uses sessions

            document.getElementById('total-allowance').textContent = totalAllowance;
            document.getElementById('used-holidays').textContent = usedAmount;
            document.getElementById('remaining-holidays').textContent = remaining;
            document.getElementById('allowance-unit').textContent = 'sessions';
            document.getElementById('used-unit').textContent = 'sessions';
            document.getElementById('remaining-unit').textContent = 'sessions';

            // Update progress bar
            const percentage = totalAllowance > 0 ? Math.min(100, Math.max(0, (usedAmount / totalAllowance) * 100)) : 0;
            document.getElementById('progress-fill').style.width = percentage + '%';

            // Set pending preview line
            const pendingLine = document.getElementById('pending-line');
            if (pendingAmount > 0) {
              document.getElementById('pending-amount').textContent = pendingAmount;
              document.getElementById('remaining-after-pending').textContent = remainingAfterPending;
              document.getElementById('pending-unit').textContent = 'sessions';
              document.getElementById('remaining-after-unit').textContent = 'sessions';
              pendingLine.style.display = 'block';
            } else {
              pendingLine.style.display = 'none';
            }

            console.log('[my-holidays] GP display updated - Total:', totalAllowance, 'Used:', usedAmount, 'Remaining:', remaining);
          } else {
            // Non-GP uses hours
            document.getElementById('total-allowance').textContent = formatHours(totalAllowance);
            document.getElementById('used-holidays').textContent = formatHours(usedAmount);
            document.getElementById('remaining-holidays').textContent = formatHours(remaining);
            document.getElementById('allowance-unit').textContent = '';
            document.getElementById('used-unit').textContent = '';
            document.getElementById('remaining-unit').textContent = '';

            // Update progress bar
            const percentage = totalAllowance > 0 ? Math.min(100, Math.max(0, (usedAmount / totalAllowance) * 100)) : 0;
            document.getElementById('progress-fill').style.width = percentage + '%';

            // Set pending preview line
            const pendingLine = document.getElementById('pending-line');
            if (pendingAmount > 0) {
              document.getElementById('pending-amount').textContent = formatHours(pendingAmount);
              document.getElementById('remaining-after-pending').textContent = formatHours(remainingAfterPending);
              document.getElementById('pending-unit').textContent = '';
              document.getElementById('remaining-after-unit').textContent = '';
              pendingLine.style.display = 'block';
            } else {
              pendingLine.style.display = 'none';
            }

            console.log('[my-holidays] Staff display updated - Total:', formatHours(totalAllowance), 'Used:', formatHours(usedAmount), 'Remaining:', formatHours(remaining));
          }

          // Load all bookings
          loadBookings();
        }

        // Load bookings list
        async function loadBookings() {
          const { data: bookings } = await supabase
            .from('4_holiday_requests')
            .select('*')
            .eq('user_id', user.id)
            .order('start_date', { ascending: false });

          const container = document.getElementById('bookings-container');

          if (!bookings || bookings.length === 0) {
            container.innerHTML = '<p style="color:#6b7280;">No holiday requests yet.</p>';
            return;
          }

          // Helper function to format hours as HH:MM
          function formatHours(decimalHours) {
            const hours = Math.floor(decimalHours);
            const minutes = Math.round((decimalHours % 1) * 60);
            return `${hours}:${minutes.toString().padStart(2, '0')}`;
          }

          container.innerHTML = bookings.map(booking => {
            const startDate = new Date(booking.start_date).toLocaleDateString();
            const endDate = new Date(booking.end_date).toLocaleDateString();
            const totalDays = booking.total_days || 0;

            let amount;
            if (window.isGP) {
              amount = `${totalDays} ${totalDays === 1 ? 'session' : 'sessions'}`;
            } else {
              amount = formatHours(totalDays);
            }

            return `
              <div class="booking-item">
                <div style="flex: 1;">
                  <div class="booking-dates">${startDate} - ${endDate}</div>
                  <div class="hours-display">${amount}</div>
                  ${booking.reason ? `<div class="booking-reason">${destinationIconHTML(booking.reason)}<strong>Reason:</strong> ${booking.reason}</div>` : ''}
                  ${booking.status === 'rejected' && booking.notes ? `<div style="color:#dc2626; font-size:13px; margin-top:4px; font-weight:600;"><strong>Rejected:</strong> ${booking.notes}</div>` : ''}
                  ${booking.holiday_image_url ? `
                    <div class="holiday-image-card">
                      <img
                        src="${booking.holiday_image_url}"
                        alt="Holiday at ${booking.reason || 'destination'}"
                        class="holiday-image-thumb"
                        onclick="window.open('${booking.holiday_image_url}', '_blank')"
                        loading="lazy"
                        onerror="this.parentElement.style.display='none'"
                      />
                      <div class="holiday-image-caption">üå¥ Your avatar on holiday!</div>
                    </div>
                  ` : ''}
                </div>
                <span class="booking-status status-${booking.status}">${booking.status}</span>
              </div>
            `;
          }).join('');
        }

        // Function to check for overlapping holidays (SITE-STRICT)
        async function checkHolidayOverlaps(startDate, endDate) {
          console.log('=== CHECKING FOR OVERLAPS (SITE-STRICT) ===');
          console.log('Start date:', startDate);
          console.log('End date:', endDate);
          console.log('Current user ID:', user.id);
          console.log('Current user email:', user.email);

          try {
            // 1) Get current user's site_id
            const { data: currentUser, error: cuErr } = await supabase
              .from('master_users')
              .select('site_id, full_name, email')
              .eq('auth_user_id', user.id)
              .single();

            if (cuErr) {
              console.error('[Overlap Check] Error loading current user site:', cuErr);
              return [];
            }
            if (!currentUser || !currentUser.site_id) {
              console.warn('[Overlap Check] No site_id for current user; cannot check overlaps.');
              return [];
            }

            const siteId = currentUser.site_id;
            console.log('[Overlap Check] Using site_id =', siteId);

            // 2a) Prefer a VIEW that already joins master_users so we get names/emails in one go
            try {
              const { data: vRows, error: vErr } = await supabase
                .from('v_holiday_requests_with_user')
                .select('id, auth_user_id, site_id, start_date, end_date, status, reason, full_name, email, avatar_url')
                .eq('site_id', siteId)
                .neq('user_id', user.id)
                .in('status', ['approved', 'pending'])
                .lte('start_date', endDate)
                .gte('end_date', startDate);

              if (!vErr && Array.isArray(vRows)) {
                console.log('[Overlap Check] Using view v_holiday_requests_with_user. Rows:', vRows.length);
                if (vRows.length > 0) {
                  return vRows.map(r => ({
                    ...r,
                    userName: r.full_name || r.email || 'Unknown User',
                    avatarUrl: r.avatar_url || null
                  }));
                }
              } else if (vErr) {
                console.log('[Overlap Check] View not available or error:', vErr.message || vErr);
              }
            } catch(viewCatch){
              console.log('[Overlap Check] View join attempt failed:', viewCatch?.message || viewCatch);
            }

            // 2b) Fallback: Query requests in-site then enrich with master_users
            // Overlap condition: start_date <= endDate AND end_date >= startDate
            const { data: overlappingRequests, error: reqErr } = await supabase
              .from('4_holiday_requests')
              .select('id, user_id, site_id, start_date, end_date, status, reason')
              .eq('site_id', siteId)
              .neq('user_id', user.id)
              .in('status', ['approved', 'pending'])
              .lte('start_date', endDate)
              .gte('end_date', startDate);

            if (reqErr) {
              console.error('[Overlap Check] Error querying requests:', reqErr);
              return [];
            }

            console.log('[Overlap Check] Raw overlapping requests count:', overlappingRequests?.length || 0);
            if (!overlappingRequests || overlappingRequests.length === 0) {
              return [];
            }

            // 3) Enrich with user profiles for display (names/avatars)
            const otherIds = [...new Set(overlappingRequests.map(r => r.user_id))];
            let profiles = [];
            if (otherIds.length > 0) {
              const { data: profs, error: profErr } = await supabase
                .from('master_users')
                .select('auth_auth_user_id, full_name, email, avatar_url')
                .in('auth_user_id', otherIds);
              if (profErr) {
                console.warn('[Overlap Check] Could not load user profiles:', profErr);
              }
              profiles = profs || [];
            }

            const overlaps = overlappingRequests.map(req => {
              const u = profiles.find(p => p.auth_user_id === req.user_id) || {};
              return {
                ...req,
                userName: u.full_name || u.email || (req.user_id ? `User ${String(req.user_id).slice(0,6)}‚Ä¶` : 'Unknown User'),
                avatarUrl: u.avatar_url || null,
                email: u.email || ''
              };
            });

            console.log('[Overlap Check] Final overlaps to display:', overlaps.length);
            return overlaps;
          } catch (error) {
            console.error('[Overlap Check] Unexpected error:', error);
            return [];
          }
        }

        // Function to display overlapping holidays
        function displayOverlaps(overlaps) {
          console.log('[displayOverlaps] Called with:', overlaps);
          const overlapSection = document.getElementById('overlap-section');
          const overlapList = document.getElementById('overlap-list');

          console.log('[displayOverlaps] Section element:', overlapSection);
          console.log('[displayOverlaps] List element:', overlapList);

          if (!overlaps || overlaps.length === 0) {
            console.log('[displayOverlaps] No overlaps, hiding section');
            if (overlapSection) overlapSection.style.display = 'none';
            return;
          }

          console.log('[displayOverlaps] Showing overlap section with', overlaps.length, 'overlaps');
          if (!overlapSection) {
            console.error('[displayOverlaps] ERROR: overlap-section element not found!');
            return;
          }
          overlapSection.style.display = 'block';

          const overlapHTML = overlaps.map(overlap => {
            const startDate = new Date(overlap.start_date).toLocaleDateString();
            const endDate = new Date(overlap.end_date).toLocaleDateString();
            const avatarHTML = overlap.avatarUrl
              ? `<img src="${overlap.avatarUrl}" alt="${overlap.userName}" style="width: 32px; height: 32px; border-radius: 50%; margin-right: 8px; vertical-align: middle;">`
              : `<div style="width: 32px; height: 32px; border-radius: 50%; background: linear-gradient(135deg, #667eea, #764ba2); display: inline-block; margin-right: 8px; vertical-align: middle; text-align: center; line-height: 32px; color: white; font-weight: bold;">${overlap.userName.charAt(0).toUpperCase()}</div>`;

            const statusBadge = overlap.status === 'approved'
              ? '<span style="background: #059669; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-left: 8px;">Approved</span>'
              : '<span style="background: #f59e0b; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-left: 8px;">Pending</span>';

            return `
              <div style="padding: 8px; margin: 4px 0; background: rgba(255,255,255,0.05); border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                ${avatarHTML}
                <strong style="color: #fbbf24;">${overlap.userName}</strong>
                ${statusBadge}
                <div style="margin-left: 40px; color: #d1d5db; font-size: 13px; margin-top: 4px;">
                  ${startDate} - ${endDate}
                  ${overlap.reason ? `<span style="color: #9ca3af;"> ‚Ä¢ ${overlap.reason}</span>` : ''}
                </div>
              </div>
            `;
          }).join('');

          overlapList.innerHTML = overlapHTML;
        }

        // Calculate time off
        document.getElementById('calculate-btn').addEventListener('click', async () => {
          const dates = (window.rangePicker && window.rangePicker.selectedDates) || [];
          const fromDate = dates[0] ? new Date(dates[0]) : null;
          const toDate = dates[1] ? new Date(dates[1]) : (dates[0] ? new Date(dates[0]) : null);

          if (!fromDate || !toDate) {
            alert('Please select a date or range');
            return;
          }

          if (fromDate > toDate) {
            alert('End date must be after start date');
            return;
          }

          const pattern = window.workingPattern;
          if (!pattern) {
            alert('Working pattern not found. Please complete your setup first.');
            return;
          }

          let totalHours = 0;
          let totalSessions = 0;
          let totalMinutes = 0;
          let rows = [];

          // Loop through each day
          const currentDate = new Date(fromDate);
          while (currentDate <= toDate) {
            const dayName = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][currentDate.getDay()];
            const dateStr = currentDate.toLocaleDateString();

            if (window.isGP) {
              const sessions = parseFloat(pattern[`${dayName}_sessions`] || 0);
              if (sessions > 0) {
                totalSessions += sessions;
                rows.push(
                  `<div class="calc-row"><div class="calc-date">${dateStr}</div><div class="calc-badge">${sessions} ${sessions === 1 ? 'session' : 'sessions'}</div></div>`
                );
              }
            } else {
              const hours = parseFloat(pattern[`${dayName}_hours`] || 0);
              if (hours > 0) {
                totalHours += Math.floor(hours);
                totalMinutes += Math.round((hours % 1) * 60);
                const displayHours = Math.floor(hours);
                const displayMinutes = Math.round((hours % 1) * 60);
                const timeStr = displayMinutes > 0 ? `${displayHours}h ${displayMinutes}m` : `${displayHours}h`;
                rows.push(
                  `<div class="calc-row"><div class="calc-date">${dateStr}</div><div class="calc-badge">${timeStr}</div></div>`
                );
              }
            }

            currentDate.setDate(currentDate.getDate() + 1);
          }

          // Calculate total time for staff
          if (!window.isGP) {
            // Handle minute overflow
            totalHours += Math.floor(totalMinutes / 60);
            totalMinutes = totalMinutes % 60;
          }

          // Check for overlapping holidays
          try {
            const startDateStr = fromDate.toISOString().split('T')[0];
            const endDateStr = toDate.toISOString().split('T')[0];
            console.log('[Calculate] Checking overlaps for dates:', startDateStr, 'to', endDateStr);
            const overlaps = await checkHolidayOverlaps(startDateStr, endDateStr);
            console.log('[Calculate] Overlaps found:', overlaps);
            console.log('[Calculate] Type of overlaps:', typeof overlaps);
            console.log('[Calculate] Is array?', Array.isArray(overlaps));
            displayOverlaps(overlaps);
          } catch (overlapError) {
            console.error('[Calculate] Error checking overlaps:', overlapError);
          }

          // Display result
          const resultDiv = document.getElementById('calculation-result');
          resultDiv.style.display = 'block';
          document.getElementById('calc-list').innerHTML = rows.join('');

          if (window.isGP) {
            document.getElementById('calc-total').textContent = totalSessions;
            document.getElementById('calc-unit').textContent = totalSessions === 1 ? 'session' : 'sessions';
            // Store total sessions for submission
            window.holidayRequestTotal = totalSessions;
          } else {
            const totalTimeStr = totalMinutes > 0 ?
              `${totalHours}:${totalMinutes.toString().padStart(2, '0')}` :
              `${totalHours}:00`;
            document.getElementById('calc-total').textContent = totalTimeStr;
            document.getElementById('calc-unit').textContent = '';
            // Store total as decimal hours for submission
            window.holidayRequestTotal = totalHours + (totalMinutes / 60);
          }

          document.getElementById('submit-request').style.display = 'block';
        });

        // Submit request
        document.getElementById('submit-request').addEventListener('click', async () => {
          const sDates = (window.rangePicker && window.rangePicker.selectedDates) || [];
          const fromDate = sDates[0] ? window.rangePicker.formatDate(sDates[0], "Y-m-d") : '';
          const toDate = sDates[1] ? window.rangePicker.formatDate(sDates[1], "Y-m-d") : (sDates[0] ? window.rangePicker.formatDate(sDates[0], "Y-m-d") : '');
          const reason = document.getElementById('reason').value;
          const total = window.holidayRequestTotal || 0;

          if (!fromDate || !toDate) {
            alert('Please select dates');
            return;
          }

          const requestData = {
            user_id: user.id,
            site_id: siteId,
            start_date: fromDate,
            end_date: toDate,
            total_days: total, // This stores hours or sessions as a number
            request_type: 'annual',
            reason: reason || null,
            status: 'pending',
            requested_at: new Date().toISOString()
          };

          document.getElementById('submit-request').disabled = true;
          document.getElementById('request-msg').textContent = 'Submitting...';
          document.getElementById('request-msg').style.color = '#6b7280';

          const { data: insertedRequest, error } = await supabase
            .from('4_holiday_requests')
            .insert(requestData)
            .select()
            .single();

          if (error) {
            console.error('Request error:', error);
            document.getElementById('request-msg').textContent = 'Error submitting request: ' + error.message;
            document.getElementById('request-msg').style.color = '#dc2626';
            document.getElementById('submit-request').disabled = false;
          } else {
            document.getElementById('request-msg').textContent = 'Request submitted successfully!';
            document.getElementById('request-msg').style.color = '#059669';

            // IMAGE GENERATION TEMPORARILY DISABLED
            // Keeping code for future development but not triggering API calls
            /*
            // Trigger image generation if a reason/destination was provided
            if (reason && insertedRequest && insertedRequest.id) {
              try {
                // Get user's avatar URL from master_users
                const { data: userData } = await supabase
                  .from('master_users')
                  .select('avatar_url')
                  .eq('auth_user_id', user.id)
                  .single();

                // Call the Edge Function to generate holiday image
                const { data: imageData, error: imageError } = await supabase.functions.invoke('generate-holiday-avatar', {
                  body: {
                    destination: reason,
                    avatarUrl: userData?.avatar_url || null,
                    requestId: insertedRequest.id
                  }
                });

                if (imageError) {
                  console.error('Image generation error:', imageError);
                  // Don't show error to user - image is optional enhancement
                } else if (imageData?.imageUrl) {
                  console.log('Holiday image generated successfully:', imageData);
                  if (imageData.costEstimate) {
                    console.log('üéØ Image Generation Cost Breakdown:', imageData.costEstimate);
                    console.log('üìù Avatar Analysis:', imageData.avatarAnalysis);
                  }
                  document.getElementById('request-msg').textContent = `Request submitted with holiday image! (Cost: ${imageData.costEstimate?.total_per_request || 'N/A'})`;
                }
              } catch (imgErr) {
                console.error('Error generating holiday image:', imgErr);
                // Continue without image - it's an optional enhancement
              }
            }
            */

            // For now, just log that feature is disabled
            if (reason && insertedRequest && insertedRequest.id) {
              console.log('Holiday image generation is currently disabled. Reason provided:', reason);
            }

            // Clear form
            if (window.rangePicker) window.rangePicker.clear();
            document.getElementById('reason').value = '';
            document.getElementById('calculation-result').style.display = 'none';
            document.getElementById('overlap-section').style.display = 'none';
            document.getElementById('submit-request').style.display = 'none';

            // Reload bookings
            loadBookings();

            // Reload holiday data to update remaining balance
            loadHolidayData();

            setTimeout(() => {
              document.getElementById('request-msg').textContent = '';
              document.getElementById('submit-request').disabled = false;
            }, 3000);
          }
        });

        // Function to refresh holiday calculations
        async function refreshHolidayCalculations() {
          try {
            console.log('[my-holidays] Refreshing holiday calculations...');

            // Call the stored procedure to recalculate
            const { error } = await supabase.rpc('refresh_all_holiday_summaries');

            if (error) {
              console.error('[my-holidays] Error refreshing calculations:', error);
            } else {
              console.log('[my-holidays] Holiday calculations refreshed successfully');
              // Reload the page data
              loadHolidayData();
            }
          } catch (err) {
            console.error('[my-holidays] Error during refresh:', err);
          }
        }

        // Initial load
        loadHolidayData();

      } catch (error) {
        console.error('Error:', error);
        if (String(error.message).includes('NO_SESSION')) {
          window.location.replace('index.html');
          return;
        }
        if (String(error.message).includes('NOT_STAFF')) {
          window.location.replace('index.html');
          return;
        }
        document.getElementById('app').innerHTML = `
          <div class="panel g-12">
            <p>Error loading holiday data: ${error.message}</p>
            <button class="btn" onclick="window.location.href='staff.html'">Back to Home</button>
          </div>
        `;
      }
    })();
  </script>

  <script>
    // Icon helper function using Icons8 cute-color style
    (function(){
      function i8(name, opts = {}) {
        var base  = 'https://img.icons8.com';
        var style = opts.style || 'cute-color';
        var size  = opts.size  || 48;
        // Icons8 OMG-IMG pattern is style/size/name.png
        var path  = [style, String(size), encodeURIComponent(name) + '.png'].join('/');
        return base + '/' + path;
      }
      
      function setIcon(el){
        var name  = el.getAttribute('data-i8');
        var size  = el.getAttribute('data-i8-size');
        var style = el.getAttribute('data-i8-style') || 'fluency';
        var fallback = (el.getAttribute('data-i8-fallback') || '').toLowerCase();
        
        if (fallback === 'auto') {
          var stylesToTry = [style, 'fluency', 'color'];
          var idx = 0;
          function tryNext(){
            if (idx >= stylesToTry.length) { el.onerror = null; return; }
            var url = i8(name, {style: stylesToTry[idx++], size: size ? parseInt(size,10) : undefined});
            if (el.src !== url) el.src = url; else tryNext();
          }
          el.onerror = tryNext;
          tryNext();
        } else {
          el.src = i8(name, {style: style, size: size ? parseInt(size,10) : undefined});
        }
      }
      
      function wireIcons(){
        document.querySelectorAll('img[data-i8]').forEach(setIcon);
      }
      
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', wireIcons);
      } else {
        wireIcons();
      }
      
      window.i8 = i8;
      window.setIcon = setIcon;
      window.wireIcons = wireIcons;
    })();
  </script>

    <!-- Debug Console - Persistent across all pages -->
    <script src="debug-console.js"></script>
</body>
</html>
